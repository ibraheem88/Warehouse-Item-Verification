{"version":3,"mappings":"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","names":["default","_extends","target","Object","value","enumerable","configurable","writable","obj","isPlatformSupported","Platform","OS","ENABLE_SCREENS","enableScreens","shouldEnableScreens","UIManager","getViewManagerConfig","console","error","ENABLE_FREEZE","enableFreeze","shouldEnableReactFreeze","minor","parseInt","version","split","warn","shouldUseActivityState","screensEnabled","NativeScreenValue","NativeScreenContainerValue","NativeScreenNavigationContainerValue","NativeScreenStack","NativeScreenStackHeaderConfig","NativeScreenStackHeaderSubview","AnimatedNativeScreen","NativeSearchBar","NativeFullWindowOverlay","ScreensNativeModules","NativeScreen","NativeScreenContainer","NativeScreenNavigationContainer","DelayedFreeze","freeze","_ref","children","React","useState","freezeState","setFreezeState","setImmediate","_react","_reactFreeze","ScreenStack","props","rest","size","Children","count","childrenWithFreeze","map","child","index","key","descriptor","descriptors","_props$descriptors","freezeEnabled","options","_descriptor$options","freezeOnBlur","InnerScreen","_defineProperty","Animated","Value","ref","onComponentRef","_this$props$onCompone","setNativeProps","_this$ref","render","enabled","createAnimatedComponent","active","activityState","isNativeStack","gestureResponseDistance","undefined","handleRef","viewConfig","_ref$viewConfig","validAttributes","_ref$viewConfig$valid","style","display","setRef","start","end","top","bottom","onTransitionProgress","event","nativeEvent","progress","closing","goingForward","useNativeDriver","_TransitionProgressContext","Provider","_reactNative","View","Component","ScreenContainer","hasTwoStates","FullWindowOverlay","position","width","height","styles","StyleSheet","create","headerSubview","right","flexDirection","alignItems","justifyContent","ScreenStackHeaderBackButtonImage","type","resizeMode","fadeDuration","ScreenStackHeaderRightView","ScreenStackHeaderLeftView","ScreenStackHeaderCenterView","ScreenStackHeaderSearchBarView","ScreenContext","createContext","Screen","ScreenWrapper","context","module","exports","ScreenStackHeaderConfig","ScreenStackHeaderSubview","SearchBar","isSearchBarAvailableForCurrentPlatform","useTransitionProgress","executeNativeBackPress"],"sources":["index.native.tsx"],"sourcesContent":["import React, { PropsWithChildren, ReactNode } from 'react';\nimport {\n  Animated,\n  Image,\n  ImageProps,\n  Platform,\n  requireNativeComponent,\n  StyleProp,\n  StyleSheet,\n  UIManager,\n  View,\n  ViewProps,\n  ViewStyle,\n} from 'react-native';\nimport { Freeze } from 'react-freeze';\nimport { version } from 'react-native/package.json';\n\nimport TransitionProgressContext from './TransitionProgressContext';\nimport useTransitionProgress from './useTransitionProgress';\nimport {\n  StackPresentationTypes,\n  StackAnimationTypes,\n  BlurEffectTypes,\n  ScreenReplaceTypes,\n  ScreenOrientationTypes,\n  HeaderSubviewTypes,\n  ScreenProps,\n  ScreenContainerProps,\n  ScreenStackProps,\n  ScreenStackHeaderConfigProps,\n  SearchBarProps,\n} from './types';\nimport {\n  isSearchBarAvailableForCurrentPlatform,\n  executeNativeBackPress,\n} from './utils';\n\n// web implementation is taken from `index.tsx`\nconst isPlatformSupported =\n  Platform.OS === 'ios' ||\n  Platform.OS === 'android' ||\n  Platform.OS === 'windows';\n\nlet ENABLE_SCREENS = isPlatformSupported;\n\nfunction enableScreens(shouldEnableScreens = true): void {\n  ENABLE_SCREENS = isPlatformSupported && shouldEnableScreens;\n  if (ENABLE_SCREENS && !UIManager.getViewManagerConfig('RNSScreen')) {\n    console.error(\n      `Screen native module hasn't been linked. Please check the react-native-screens README for more details`\n    );\n  }\n}\n\nlet ENABLE_FREEZE = false;\n\nfunction enableFreeze(shouldEnableReactFreeze = true): void {\n  const minor = parseInt(version.split('.')[1]); // eg. takes 66 from '0.66.0'\n\n  // react-freeze requires react-native >=0.64, react-native from main is 0.0.0\n  if (!(minor === 0 || minor >= 64) && shouldEnableReactFreeze) {\n    console.warn(\n      'react-freeze library requires at least react-native 0.64. Please upgrade your react-native version in order to use this feature.'\n    );\n  }\n\n  ENABLE_FREEZE = shouldEnableReactFreeze;\n}\n\n// const that tells if the library should use new implementation, will be undefined for older versions\nconst shouldUseActivityState = true;\n\nfunction screensEnabled(): boolean {\n  return ENABLE_SCREENS;\n}\n\n// We initialize these lazily so that importing the module doesn't throw error when not linked\n// This is necessary coz libraries such as React Navigation import the library where it may not be enabled\nlet NativeScreenValue: React.ComponentType<ScreenProps>;\nlet NativeScreenContainerValue: React.ComponentType<ScreenContainerProps>;\nlet NativeScreenNavigationContainerValue: React.ComponentType<ScreenContainerProps>;\nlet NativeScreenStack: React.ComponentType<ScreenStackProps>;\nlet NativeScreenStackHeaderConfig: React.ComponentType<ScreenStackHeaderConfigProps>;\nlet NativeScreenStackHeaderSubview: React.ComponentType<\n  React.PropsWithChildren<ViewProps & { type?: HeaderSubviewTypes }>\n>;\nlet AnimatedNativeScreen: React.ComponentType<ScreenProps>;\nlet NativeSearchBar: React.ComponentType<SearchBarProps>;\nlet NativeFullWindowOverlay: React.ComponentType<\n  PropsWithChildren<{\n    style: StyleProp<ViewStyle>;\n  }>\n>;\n\nconst ScreensNativeModules = {\n  get NativeScreen() {\n    NativeScreenValue =\n      NativeScreenValue || requireNativeComponent('RNSScreen');\n    return NativeScreenValue;\n  },\n\n  get NativeScreenContainer() {\n    NativeScreenContainerValue =\n      NativeScreenContainerValue ||\n      requireNativeComponent('RNSScreenContainer');\n    return NativeScreenContainerValue;\n  },\n\n  get NativeScreenNavigationContainer() {\n    NativeScreenNavigationContainerValue =\n      NativeScreenNavigationContainerValue ||\n      (Platform.OS === 'ios'\n        ? requireNativeComponent('RNSScreenNavigationContainer')\n        : this.NativeScreenContainer);\n    return NativeScreenNavigationContainerValue;\n  },\n\n  get NativeScreenStack() {\n    NativeScreenStack =\n      NativeScreenStack || requireNativeComponent('RNSScreenStack');\n    return NativeScreenStack;\n  },\n\n  get NativeScreenStackHeaderConfig() {\n    NativeScreenStackHeaderConfig =\n      NativeScreenStackHeaderConfig ||\n      requireNativeComponent('RNSScreenStackHeaderConfig');\n    return NativeScreenStackHeaderConfig;\n  },\n\n  get NativeScreenStackHeaderSubview() {\n    NativeScreenStackHeaderSubview =\n      NativeScreenStackHeaderSubview ||\n      requireNativeComponent('RNSScreenStackHeaderSubview');\n    return NativeScreenStackHeaderSubview;\n  },\n\n  get NativeSearchBar() {\n    NativeSearchBar = NativeSearchBar || requireNativeComponent('RNSSearchBar');\n    return NativeSearchBar;\n  },\n\n  get NativeFullWindowOverlay() {\n    NativeFullWindowOverlay =\n      NativeFullWindowOverlay || requireNativeComponent('RNSFullWindowOverlay');\n    return NativeFullWindowOverlay;\n  },\n};\n\ninterface FreezeWrapperProps {\n  freeze: boolean;\n  children: React.ReactNode;\n}\n\n// This component allows one more render before freezing the screen.\n// Allows activityState to reach the native side and useIsFocused to work correctly.\nfunction DelayedFreeze({ freeze, children }: FreezeWrapperProps) {\n  // flag used for determining whether freeze should be enabled\n  const [freezeState, setFreezeState] = React.useState(false);\n\n  if (freeze !== freezeState) {\n    // setImmediate is executed at the end of the JS execution block.\n    // Used here for changing the state right after the render.\n    setImmediate(() => {\n      setFreezeState(freeze);\n    });\n  }\n\n  return <Freeze freeze={freeze ? freezeState : false}>{children}</Freeze>;\n}\n\nfunction ScreenStack(props: ScreenStackProps) {\n  const { children, ...rest } = props;\n  const size = React.Children.count(children);\n  // freezes all screens except the top one\n  const childrenWithFreeze = React.Children.map(children, (child, index) => {\n    // @ts-expect-error it's either SceneView in v6 or RouteView in v5\n    const { props, key } = child;\n    const descriptor = props?.descriptor ?? props?.descriptors?.[key];\n    const freezeEnabled = descriptor?.options?.freezeOnBlur ?? ENABLE_FREEZE;\n\n    return (\n      <DelayedFreeze freeze={freezeEnabled && size - index > 1}>\n        {child}\n      </DelayedFreeze>\n    );\n  });\n\n  return (\n    <ScreensNativeModules.NativeScreenStack {...rest}>\n      {childrenWithFreeze}\n    </ScreensNativeModules.NativeScreenStack>\n  );\n}\n\n// Incomplete type, all accessible properties available at:\n// react-native/Libraries/Components/View/ReactNativeViewViewConfig.js\ninterface ViewConfig extends View {\n  viewConfig: {\n    validAttributes: {\n      style: {\n        display: boolean;\n      };\n    };\n  };\n}\n\nclass InnerScreen extends React.Component<ScreenProps> {\n  private ref: React.ElementRef<typeof View> | null = null;\n  private closing = new Animated.Value(0);\n  private progress = new Animated.Value(0);\n  private goingForward = new Animated.Value(0);\n\n  setNativeProps(props: ScreenProps): void {\n    this.ref?.setNativeProps(props);\n  }\n\n  setRef = (ref: React.ElementRef<typeof View> | null): void => {\n    this.ref = ref;\n    this.props.onComponentRef?.(ref);\n  };\n\n  render() {\n    const {\n      enabled = ENABLE_SCREENS,\n      freezeOnBlur = ENABLE_FREEZE,\n      ...rest\n    } = this.props;\n\n    if (enabled && isPlatformSupported) {\n      AnimatedNativeScreen =\n        AnimatedNativeScreen ||\n        Animated.createAnimatedComponent(ScreensNativeModules.NativeScreen);\n\n      let {\n        // Filter out active prop in this case because it is unused and\n        // can cause problems depending on react-native version:\n        // https://github.com/react-navigation/react-navigation/issues/4886\n        active,\n        activityState,\n        children,\n        isNativeStack,\n        gestureResponseDistance,\n        ...props\n      } = rest;\n\n      if (active !== undefined && activityState === undefined) {\n        console.warn(\n          'It appears that you are using old version of react-navigation library. Please update @react-navigation/bottom-tabs, @react-navigation/stack and @react-navigation/drawer to version 5.10.0 or above to take full advantage of new functionality added to react-native-screens'\n        );\n        activityState = active !== 0 ? 2 : 0; // in the new version, we need one of the screens to have value of 2 after the transition\n      }\n\n      const handleRef = (ref: ViewConfig) => {\n        if (ref?.viewConfig?.validAttributes?.style) {\n          ref.viewConfig.validAttributes.style = {\n            ...ref.viewConfig.validAttributes.style,\n            display: false,\n          };\n          this.setRef(ref);\n        }\n      };\n\n      return (\n        <DelayedFreeze freeze={freezeOnBlur && activityState === 0}>\n          <AnimatedNativeScreen\n            {...props}\n            activityState={activityState}\n            gestureResponseDistance={{\n              start: gestureResponseDistance?.start ?? -1,\n              end: gestureResponseDistance?.end ?? -1,\n              top: gestureResponseDistance?.top ?? -1,\n              bottom: gestureResponseDistance?.bottom ?? -1,\n            }}\n            // This prevents showing blank screen when navigating between multiple screens with freezing\n            // https://github.com/software-mansion/react-native-screens/pull/1208\n            ref={handleRef}\n            onTransitionProgress={\n              !isNativeStack\n                ? undefined\n                : Animated.event(\n                    [\n                      {\n                        nativeEvent: {\n                          progress: this.progress,\n                          closing: this.closing,\n                          goingForward: this.goingForward,\n                        },\n                      },\n                    ],\n                    { useNativeDriver: true }\n                  )\n            }\n          >\n            {!isNativeStack ? ( // see comment of this prop in types.tsx for information why it is needed\n              children\n            ) : (\n              <TransitionProgressContext.Provider\n                value={{\n                  progress: this.progress,\n                  closing: this.closing,\n                  goingForward: this.goingForward,\n                }}\n              >\n                {children}\n              </TransitionProgressContext.Provider>\n            )}\n          </AnimatedNativeScreen>\n        </DelayedFreeze>\n      );\n    } else {\n      // same reason as above\n      let {\n        active,\n        activityState,\n        style,\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        onComponentRef,\n        ...props\n      } = rest;\n\n      if (active !== undefined && activityState === undefined) {\n        activityState = active !== 0 ? 2 : 0;\n      }\n      return (\n        <Animated.View\n          style={[style, { display: activityState !== 0 ? 'flex' : 'none' }]}\n          ref={this.setRef}\n          {...props}\n        />\n      );\n    }\n  }\n}\n\nfunction ScreenContainer(props: ScreenContainerProps) {\n  const { enabled = ENABLE_SCREENS, hasTwoStates, ...rest } = props;\n\n  if (enabled && isPlatformSupported) {\n    if (hasTwoStates) {\n      return <ScreensNativeModules.NativeScreenNavigationContainer {...rest} />;\n    }\n    return <ScreensNativeModules.NativeScreenContainer {...rest} />;\n  }\n  return <View {...rest} />;\n}\n\nfunction FullWindowOverlay(props: { children: ReactNode }) {\n  if (Platform.OS !== 'ios') {\n    console.warn('Importing FullWindowOverlay is only valid on iOS devices.');\n    return <View {...props} />;\n  }\n  return (\n    <ScreensNativeModules.NativeFullWindowOverlay\n      style={{ position: 'absolute', width: '100%', height: '100%' }}\n    >\n      {props.children}\n    </ScreensNativeModules.NativeFullWindowOverlay>\n  );\n}\n\nconst styles = StyleSheet.create({\n  headerSubview: {\n    position: 'absolute',\n    top: 0,\n    right: 0,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n\nconst ScreenStackHeaderBackButtonImage = (props: ImageProps): JSX.Element => (\n  <ScreensNativeModules.NativeScreenStackHeaderSubview\n    type=\"back\"\n    style={styles.headerSubview}\n  >\n    <Image resizeMode=\"center\" fadeDuration={0} {...props} />\n  </ScreensNativeModules.NativeScreenStackHeaderSubview>\n);\n\nconst ScreenStackHeaderRightView = (\n  props: React.PropsWithChildren<ViewProps>\n): JSX.Element => (\n  <ScreensNativeModules.NativeScreenStackHeaderSubview\n    {...props}\n    type=\"right\"\n    style={styles.headerSubview}\n  />\n);\n\nconst ScreenStackHeaderLeftView = (\n  props: React.PropsWithChildren<ViewProps>\n): JSX.Element => (\n  <ScreensNativeModules.NativeScreenStackHeaderSubview\n    {...props}\n    type=\"left\"\n    style={styles.headerSubview}\n  />\n);\n\nconst ScreenStackHeaderCenterView = (\n  props: React.PropsWithChildren<ViewProps>\n): JSX.Element => (\n  <ScreensNativeModules.NativeScreenStackHeaderSubview\n    {...props}\n    type=\"center\"\n    style={styles.headerSubview}\n  />\n);\n\nconst ScreenStackHeaderSearchBarView = (\n  props: React.PropsWithChildren<SearchBarProps>\n): JSX.Element => (\n  <ScreensNativeModules.NativeScreenStackHeaderSubview\n    {...props}\n    type=\"searchBar\"\n    style={styles.headerSubview}\n  />\n);\n\nexport type {\n  StackPresentationTypes,\n  StackAnimationTypes,\n  BlurEffectTypes,\n  ScreenReplaceTypes,\n  ScreenOrientationTypes,\n  HeaderSubviewTypes,\n  ScreenProps,\n  ScreenContainerProps,\n  ScreenStackProps,\n  ScreenStackHeaderConfigProps,\n  SearchBarProps,\n};\n\n// context to be used when the user wants to use enhanced implementation\n// e.g. to use `useReanimatedTransitionProgress` (see `reanimated` folder in repo)\nconst ScreenContext = React.createContext(InnerScreen);\n\nclass Screen extends React.Component<ScreenProps> {\n  static contextType = ScreenContext;\n\n  render() {\n    const ScreenWrapper = this.context || InnerScreen;\n    return <ScreenWrapper {...this.props} />;\n  }\n}\n\nmodule.exports = {\n  // these are classes so they are not evaluated until used\n  // so no need to use getters for them\n  Screen,\n  ScreenContainer,\n  ScreenContext,\n  ScreenStack,\n  InnerScreen,\n  FullWindowOverlay,\n\n  get NativeScreen() {\n    return ScreensNativeModules.NativeScreen;\n  },\n\n  get NativeScreenContainer() {\n    return ScreensNativeModules.NativeScreenContainer;\n  },\n\n  get NativeScreenNavigationContainer() {\n    return ScreensNativeModules.NativeScreenNavigationContainer;\n  },\n\n  get ScreenStackHeaderConfig() {\n    return ScreensNativeModules.NativeScreenStackHeaderConfig;\n  },\n  get ScreenStackHeaderSubview() {\n    return ScreensNativeModules.NativeScreenStackHeaderSubview;\n  },\n  get SearchBar() {\n    if (!isSearchBarAvailableForCurrentPlatform) {\n      console.warn(\n        'Importing SearchBar is only valid on iOS and Android devices.'\n      );\n      return View;\n    }\n\n    return ScreensNativeModules.NativeSearchBar;\n  },\n  // these are functions and will not be evaluated until used\n  // so no need to use getters for them\n  ScreenStackHeaderBackButtonImage,\n  ScreenStackHeaderRightView,\n  ScreenStackHeaderLeftView,\n  ScreenStackHeaderCenterView,\n  ScreenStackHeaderSearchBarView,\n\n  enableScreens,\n  enableFreeze,\n  screensEnabled,\n  shouldUseActivityState,\n  useTransitionProgress,\n\n  isSearchBarAvailableForCurrentPlatform,\n  executeNativeBackPress,\n};\n"]}