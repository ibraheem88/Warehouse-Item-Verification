{"version":3,"mappings":";;;;;;AAAA;AACA;AACA;AASA,IAAMA,cAAc,GAAG,uBACrB,kFADqB,CAAvB;AAMA,IAAMC,oBAAoB,GAAG,6HAAYC,cAAZ,MAA+BC,SAA5D;AACA,IAAMC,eAAe,GAAGC,6BAAH,aAAGA,6BAAH,uBAAGA,8BAAYD,eAApC;AAEO,IAAME,mBAAmB,GAAG;EACjCC,MAAM,kBAACC,UAAD,EAA8C;IAClD;;IACA,OAAO;MACLC,KAAK,EAAE,iBAAM;QACX;;QACA,IAAIR,oBAAJ,EAA0B;UACxBG,eAAe,CAACI,UAAD,EAAaE,aAAMC,KAAnB,CAAf;QACD,CAFD,MAEO;UACLC,OAAO,CAACC,IAAR,CAAab,cAAb;QACD;MACF,CARI;MAULc,QAAQ,EAAE,oBAAM;QACd;;QACA,IAAIb,oBAAJ,EAA0B;UACxBG,eAAe,CAACI,UAAD,EAAaE,aAAMK,MAAnB,CAAf;QACD,CAFD,MAEO;UACLH,OAAO,CAACC,IAAR,CAAab,cAAb;QACD;MACF,CAjBI;MAmBLgB,IAAI,EAAE,gBAAM;QACV;;QACA,IAAIf,oBAAJ,EAA0B;UACxBG,eAAe,CAACI,UAAD,EAAaE,aAAMO,MAAnB,CAAf;QACD,CAFD,MAEO;UACLL,OAAO,CAACC,IAAR,CAAab,cAAb;QACD;MACF,CA1BI;MA4BLkB,GAAG,EAAE,eAAM;QACT;;QACA,IAAIjB,oBAAJ,EAA0B;UACxBG,eAAe,CAACI,UAAD,EAAaE,aAAMS,GAAnB,CAAf;QACD,CAFD,MAEO;UACLP,OAAO,CAACC,IAAR,CAAab,cAAb;QACD;MACF;IAnCI,CAAP;EAqCD;AAxCgC,CAA5B","names":["warningMessage","REANIMATED_AVAILABLE","useSharedValue","undefined","setGestureState","Reanimated","GestureStateManager","create","handlerTag","begin","State","BEGAN","console","warn","activate","ACTIVE","fail","FAILED","end","END"],"sources":["gestureStateManager.ts"],"sourcesContent":["import { Reanimated } from './reanimatedWrapper';\nimport { State } from '../../State';\nimport { tagMessage } from '../../utils';\n\nexport interface GestureStateManagerType {\n  begin: () => void;\n  activate: () => void;\n  fail: () => void;\n  end: () => void;\n}\n\nconst warningMessage = tagMessage(\n  'react-native-reanimated is required in order to use synchronous state management'\n);\n\n// check if reanimated module is available, but look for useSharedValue as conditional\n// require of reanimated can sometimes return content of `utils.ts` file (?)\nconst REANIMATED_AVAILABLE = Reanimated?.useSharedValue !== undefined;\nconst setGestureState = Reanimated?.setGestureState;\n\nexport const GestureStateManager = {\n  create(handlerTag: number): GestureStateManagerType {\n    'worklet';\n    return {\n      begin: () => {\n        'worklet';\n        if (REANIMATED_AVAILABLE) {\n          setGestureState(handlerTag, State.BEGAN);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n\n      activate: () => {\n        'worklet';\n        if (REANIMATED_AVAILABLE) {\n          setGestureState(handlerTag, State.ACTIVE);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n\n      fail: () => {\n        'worklet';\n        if (REANIMATED_AVAILABLE) {\n          setGestureState(handlerTag, State.FAILED);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n\n      end: () => {\n        'worklet';\n        if (REANIMATED_AVAILABLE) {\n          setGestureState(handlerTag, State.END);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n    };\n  },\n};\n"]}