{"version":3,"mappings":"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","names":["RawButton","GestureHandlerButton","shouldCancelWhenOutside","shouldActivateOnStart","BaseButton","constructor","props","_defineProperty","nativeEvent","state","oldState","pointerInside","active","State","ACTIVE","lastActive","onActiveStateChange","longPressDetected","CANCELLED","onPress","Platform","OS","BEGAN","onLongPress","longPressTimeout","setTimeout","delayLongPress","undefined","clearTimeout","END","FAILED","e","onHandlerStateChange","handleEvent","onGestureEvent","render","rippleColor","rest","React","Component","AnimatedBaseButton","Animated","createAnimatedComponent","btnStyles","StyleSheet","create","underlay","position","left","right","bottom","top","RectButton","opacity","setValue","activeOpacity","Value","children","style","resolvedStyle","flatten","_reactNative","View","backgroundColor","underlayColor","borderRadius","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","BorderlessButton","borderless"],"sources":["GestureButtons.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  Platform,\n  processColor,\n  StyleSheet,\n  StyleProp,\n  ViewStyle,\n} from 'react-native';\n\nimport createNativeWrapper from '../handlers/createNativeWrapper';\nimport GestureHandlerButton from './GestureHandlerButton';\nimport { State } from '../State';\n\nimport {\n  GestureEvent,\n  HandlerStateChangeEvent,\n} from '../handlers/gestureHandlerCommon';\nimport {\n  NativeViewGestureHandlerPayload,\n  NativeViewGestureHandlerProps,\n} from '../handlers/NativeViewGestureHandler';\n\nexport interface RawButtonProps extends NativeViewGestureHandlerProps {\n  /**\n   * Defines if more than one button could be pressed simultaneously. By default\n   * set true.\n   */\n  exclusive?: boolean;\n  // TODO: we should transform props in `createNativeWrapper`\n\n  /**\n   * Android only.\n   *\n   * Defines color of native ripple animation used since API level 21.\n   */\n  rippleColor?: any; // it was present in BaseButtonProps before but is used here in code\n\n  /**\n   * Android only.\n   *\n   * Defines radius of native ripple animation used since API level 21.\n   */\n  rippleRadius?: number | null;\n\n  /**\n   * Android only.\n   *\n   * Set this to true if you want the ripple animation to render outside the view bounds.\n   */\n  borderless?: boolean;\n\n  /**\n   * Android only.\n   *\n   * Defines whether the ripple animation should be drawn on the foreground of the view.\n   */\n  foreground?: boolean;\n\n  /**\n   * Android only.\n   *\n   * Set this to true if you don't want the system to play sound when the button is pressed.\n   */\n  touchSoundDisabled?: boolean;\n}\n\nexport interface BaseButtonProps extends RawButtonProps {\n  /**\n   * Called when the button gets pressed (analogous to `onPress` in\n   * `TouchableHighlight` from RN core).\n   */\n  onPress?: (pointerInside: boolean) => void;\n\n  /**\n   * Called when the button gets pressed and is held for `delayLongPress`\n   * milliseconds.\n   */\n  onLongPress?: () => void;\n\n  /**\n   * Called when button changes from inactive to active and vice versa. It\n   * passes active state as a boolean variable as a first parameter for that\n   * method.\n   */\n  onActiveStateChange?: (active: boolean) => void;\n  style?: StyleProp<ViewStyle>;\n  testID?: string;\n\n  /**\n   * Delay, in milliseconds, after which the `onLongPress` callback gets called.\n   * Defaults to 600.\n   */\n  delayLongPress?: number;\n}\n\nexport interface RectButtonProps extends BaseButtonProps {\n  /**\n   * Background color that will be dimmed when button is in active state.\n   */\n  underlayColor?: string;\n\n  /**\n   * iOS only.\n   *\n   * Opacity applied to the underlay when button is in active state.\n   */\n  activeOpacity?: number;\n}\n\nexport interface BorderlessButtonProps extends BaseButtonProps {\n  /**\n   * iOS only.\n   *\n   * Opacity applied to the button when it is in an active state.\n   */\n  activeOpacity?: number;\n}\n\nexport const RawButton = createNativeWrapper(GestureHandlerButton, {\n  shouldCancelWhenOutside: false,\n  shouldActivateOnStart: false,\n});\n\nexport class BaseButton extends React.Component<BaseButtonProps> {\n  static defaultProps = {\n    delayLongPress: 600,\n  };\n\n  private lastActive: boolean;\n  private longPressTimeout: ReturnType<typeof setTimeout> | undefined;\n  private longPressDetected: boolean;\n\n  constructor(props: BaseButtonProps) {\n    super(props);\n    this.lastActive = false;\n    this.longPressDetected = false;\n  }\n\n  private handleEvent = ({\n    nativeEvent,\n  }: HandlerStateChangeEvent<NativeViewGestureHandlerPayload>) => {\n    const { state, oldState, pointerInside } = nativeEvent;\n    const active = pointerInside && state === State.ACTIVE;\n\n    if (active !== this.lastActive && this.props.onActiveStateChange) {\n      this.props.onActiveStateChange(active);\n    }\n\n    if (\n      !this.longPressDetected &&\n      oldState === State.ACTIVE &&\n      state !== State.CANCELLED &&\n      this.lastActive &&\n      this.props.onPress\n    ) {\n      this.props.onPress(active);\n    }\n\n    if (\n      !this.lastActive &&\n      // NativeViewGestureHandler sends different events based on platform\n      state === (Platform.OS !== 'android' ? State.ACTIVE : State.BEGAN) &&\n      pointerInside\n    ) {\n      this.longPressDetected = false;\n      if (this.props.onLongPress) {\n        this.longPressTimeout = setTimeout(\n          this.onLongPress,\n          this.props.delayLongPress\n        );\n      }\n    } else if (\n      // cancel longpress timeout if it's set and the finger moved out of the view\n      state === State.ACTIVE &&\n      !pointerInside &&\n      this.longPressTimeout !== undefined\n    ) {\n      clearTimeout(this.longPressTimeout);\n      this.longPressTimeout = undefined;\n    } else if (\n      // cancel longpress timeout if it's set and the gesture has finished\n      this.longPressTimeout !== undefined &&\n      (state === State.END ||\n        state === State.CANCELLED ||\n        state === State.FAILED)\n    ) {\n      clearTimeout(this.longPressTimeout);\n      this.longPressTimeout = undefined;\n    }\n\n    this.lastActive = active;\n  };\n\n  private onLongPress = () => {\n    this.longPressDetected = true;\n    this.props.onLongPress?.();\n  };\n\n  // Normally, the parent would execute it's handler first, then forward the\n  // event to listeners. However, here our handler is virtually only forwarding\n  // events to listeners, so we reverse the order to keep the proper order of\n  // the callbacks (from \"raw\" ones to \"processed\").\n  private onHandlerStateChange = (\n    e: HandlerStateChangeEvent<NativeViewGestureHandlerPayload>\n  ) => {\n    this.props.onHandlerStateChange?.(e);\n    this.handleEvent(e);\n  };\n\n  private onGestureEvent = (\n    e: GestureEvent<NativeViewGestureHandlerPayload>\n  ) => {\n    this.props.onGestureEvent?.(e);\n    this.handleEvent(\n      e as HandlerStateChangeEvent<NativeViewGestureHandlerPayload>\n    ); // TODO: maybe it is not correct\n  };\n\n  render() {\n    const { rippleColor, ...rest } = this.props;\n\n    return (\n      <RawButton\n        rippleColor={processColor(rippleColor)}\n        {...rest}\n        onGestureEvent={this.onGestureEvent}\n        onHandlerStateChange={this.onHandlerStateChange}\n      />\n    );\n  }\n}\n\nconst AnimatedBaseButton = Animated.createAnimatedComponent(BaseButton);\n\nconst btnStyles = StyleSheet.create({\n  underlay: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    bottom: 0,\n    top: 0,\n  },\n});\n\nexport class RectButton extends React.Component<RectButtonProps> {\n  static defaultProps = {\n    activeOpacity: 0.105,\n    underlayColor: 'black',\n  };\n\n  private opacity: Animated.Value;\n\n  constructor(props: RectButtonProps) {\n    super(props);\n    this.opacity = new Animated.Value(0);\n  }\n\n  private onActiveStateChange = (active: boolean) => {\n    if (Platform.OS !== 'android') {\n      this.opacity.setValue(active ? this.props.activeOpacity! : 0);\n    }\n\n    this.props.onActiveStateChange?.(active);\n  };\n\n  render() {\n    const { children, style, ...rest } = this.props;\n\n    const resolvedStyle = StyleSheet.flatten(style ?? {});\n\n    return (\n      <BaseButton\n        {...rest}\n        style={resolvedStyle}\n        onActiveStateChange={this.onActiveStateChange}>\n        <Animated.View\n          style={[\n            btnStyles.underlay,\n            {\n              opacity: this.opacity,\n              backgroundColor: this.props.underlayColor,\n              borderRadius: resolvedStyle.borderRadius,\n              borderTopLeftRadius: resolvedStyle.borderTopLeftRadius,\n              borderTopRightRadius: resolvedStyle.borderTopRightRadius,\n              borderBottomLeftRadius: resolvedStyle.borderBottomLeftRadius,\n              borderBottomRightRadius: resolvedStyle.borderBottomRightRadius,\n            },\n          ]}\n        />\n        {children}\n      </BaseButton>\n    );\n  }\n}\n\nexport class BorderlessButton extends React.Component<BorderlessButtonProps> {\n  static defaultProps = {\n    activeOpacity: 0.3,\n    borderless: true,\n  };\n\n  private opacity: Animated.Value;\n\n  constructor(props: BorderlessButtonProps) {\n    super(props);\n    this.opacity = new Animated.Value(1);\n  }\n\n  private onActiveStateChange = (active: boolean) => {\n    if (Platform.OS !== 'android') {\n      this.opacity.setValue(active ? this.props.activeOpacity! : 1);\n    }\n\n    this.props.onActiveStateChange?.(active);\n  };\n\n  render() {\n    const { children, style, ...rest } = this.props;\n\n    return (\n      <AnimatedBaseButton\n        {...rest}\n        onActiveStateChange={this.onActiveStateChange}\n        style={[style, Platform.OS === 'ios' && { opacity: this.opacity }]}>\n        {children}\n      </AnimatedBaseButton>\n    );\n  }\n}\n\nexport { default as PureNativeButton } from './GestureHandlerButton';\n"]}