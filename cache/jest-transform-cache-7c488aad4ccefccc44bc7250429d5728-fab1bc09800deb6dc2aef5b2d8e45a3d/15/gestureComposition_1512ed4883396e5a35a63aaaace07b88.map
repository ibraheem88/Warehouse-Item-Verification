{"version":3,"mappings":"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","names":["extendRelation","currentRelation","extendWith","undefined","ComposedGesture","constructor","_defineProperty","gestures","prepareSingleGesture","gesture","simultaneousGestures","requireGesturesToFail","BaseGesture","newConfig","config","simultaneousWith","requireToFail","prepare","initialize","toGestureArray","flatMap","Gesture","SimultaneousGesture","simultaneousArrays","map","filter","x","i","length","ExclusiveGesture","gestureArrays","concat"],"sources":["gestureComposition.ts"],"sourcesContent":["import { BaseGesture, Gesture, GestureRef, GestureType } from './gesture';\n\nfunction extendRelation(\n  currentRelation: GestureRef[] | undefined,\n  extendWith: GestureType[]\n) {\n  if (currentRelation === undefined) {\n    return [...extendWith];\n  } else {\n    return [...currentRelation, ...extendWith];\n  }\n}\n\nexport class ComposedGesture extends Gesture {\n  protected gestures: Gesture[] = [];\n  protected simultaneousGestures: GestureType[] = [];\n  protected requireGesturesToFail: GestureType[] = [];\n\n  constructor(...gestures: Gesture[]) {\n    super();\n    this.gestures = gestures;\n  }\n\n  protected prepareSingleGesture(\n    gesture: Gesture,\n    simultaneousGestures: GestureType[],\n    requireGesturesToFail: GestureType[]\n  ) {\n    if (gesture instanceof BaseGesture) {\n      const newConfig = { ...gesture.config };\n\n      newConfig.simultaneousWith = extendRelation(\n        newConfig.simultaneousWith,\n        simultaneousGestures\n      );\n      newConfig.requireToFail = extendRelation(\n        newConfig.requireToFail,\n        requireGesturesToFail\n      );\n\n      gesture.config = newConfig;\n    } else if (gesture instanceof ComposedGesture) {\n      gesture.simultaneousGestures = simultaneousGestures;\n      gesture.requireGesturesToFail = requireGesturesToFail;\n      gesture.prepare();\n    }\n  }\n\n  prepare() {\n    for (const gesture of this.gestures) {\n      this.prepareSingleGesture(\n        gesture,\n        this.simultaneousGestures,\n        this.requireGesturesToFail\n      );\n    }\n  }\n\n  initialize() {\n    for (const gesture of this.gestures) {\n      gesture.initialize();\n    }\n  }\n\n  toGestureArray(): GestureType[] {\n    return this.gestures.flatMap((gesture) => gesture.toGestureArray());\n  }\n}\n\nexport class SimultaneousGesture extends ComposedGesture {\n  prepare() {\n    // this piece of magic works something like this:\n    // for every gesture in the array\n    const simultaneousArrays = this.gestures.map((gesture) =>\n      // we take the array it's in\n      this.gestures\n        // and make a copy without it\n        .filter((x) => x !== gesture)\n        // then we flatmap the result to get list of raw (not composed) gestures\n        // this way we don't make the gestures simultaneous with themselves, which is\n        // important when the gesture is `ExclusiveGesture` - we don't want to make\n        // exclusive gestures simultaneous\n        .flatMap((x) => x.toGestureArray())\n    );\n\n    for (let i = 0; i < this.gestures.length; i++) {\n      this.prepareSingleGesture(\n        this.gestures[i],\n        simultaneousArrays[i],\n        this.requireGesturesToFail\n      );\n    }\n  }\n}\n\nexport class ExclusiveGesture extends ComposedGesture {\n  prepare() {\n    // transforms the array of gestures into array of grouped raw (not composed) gestures\n    // i.e. [gesture1, gesture2, ComposedGesture(gesture3, gesture4)] -> [[gesture1], [gesture2], [gesture3, gesture4]]\n    const gestureArrays = this.gestures.map((gesture) =>\n      gesture.toGestureArray()\n    );\n\n    let requireToFail: GestureType[] = [];\n\n    for (let i = 0; i < this.gestures.length; i++) {\n      this.prepareSingleGesture(\n        this.gestures[i],\n        this.simultaneousGestures,\n        this.requireGesturesToFail.concat(requireToFail)\n      );\n\n      // every group gets to wait for all groups before it\n      requireToFail = requireToFail.concat(gestureArrays[i]);\n    }\n  }\n}\n\nexport type ComposedGestureType = InstanceType<typeof ComposedGesture>;\nexport type RaceGestureType = ComposedGestureType;\nexport type SimultaneousGestureType = InstanceType<typeof SimultaneousGesture>;\nexport type ExclusiveGestureType = InstanceType<typeof ExclusiveGesture>;\n"]}