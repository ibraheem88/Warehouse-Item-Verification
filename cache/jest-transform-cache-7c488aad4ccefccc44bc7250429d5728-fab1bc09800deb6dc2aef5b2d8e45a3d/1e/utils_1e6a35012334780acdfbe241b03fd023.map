{"version":3,"mappings":";;;;;;;;;;;;;;;;;AAAA;;;;;;AAEA,4BAA6BA,iBAAKC,OAAL,CAAaC,KAAb,CAAmB,GAAnB,CAA7B;EAAA;EAAOC,QAAD;EAAWC,QAAX;AACC,IAAMC,oBAAoB,GAAG;EAClCC,KAAK,EAAEC,QAAQ,CAACJ,QAAD,EAAW,EAAX,CADmB;EAElCK,KAAK,EAAED,QAAQ,CAACH,QAAD,EAAW,EAAX;AAFmB,CAA7B;;AAKA,SAASK,OAAT,CAAoBC,MAApB,EAA0C;EAC/C,IAAI,CAACC,KAAK,CAACC,OAAN,CAAcF,MAAd,CAAL,EAA4B;IAC1B,OAAO,CAACA,MAAD,CAAP;EACD;EAED,OAAOA,MAAP;AACD;AAMM,SAASG,kBAAT,CACLC,KADK,EAELC,KAFK,EAGU;EACf,IAAMC,WAAmC,GAAG,CAAC,IAAD,CAA5C;EACA,IAAMC,UAAU,oCAAOH,KAAJ,CAAnB;EACA,IAAMI,cAA6B,GAAG,EAAtC;EACAD,UAAU,CAACE,OAAX,CAAmB,UAACC,OAAD,EAAUC,CAAV,EAAgB;IACjC,IAAMC,QAAQ,GAAGN,WAAW,CAACK,CAAD,CAA5B;IACA,IAAME,WAAW,GAAGR,KAAK,CAACO,QAAD,EAAWF,OAAX,CAAzB;IACAJ,WAAW,CAACQ,IAAZ,CAAiBD,WAAjB;IACAL,cAAc,CAACM,IAAf,CAAoBD,WAApB;EACD,CALD;EAMA,OAAOL,cAAP;AACD;AAGM,SAASO,WAAT,CAAqBf,MAArB,EAAqCgB,GAArC,EAAkD;EACvD,OAAOC,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCpB,MAArC,EAA6CgB,GAA7C,CAAP;AACD;AAEM,SAASK,SAAT,GAA8B;EAEnC,OAAON,WAAW,CAACO,MAAD,EAAS,SAAT,CAAX,IAAkC,CAAC,CAACC,OAAO,CAACC,GAAR,CAAYC,cAAvD;AACD;AAEM,SAASC,UAAT,CAAoBC,GAApB,EAAiC;EACtC,2CAAyCA,GAAI;AAC9C;AAIM,SAASC,QAAT,GAA6B;EAAA;EAElC,OAAO,CAAC,aAACN,MAAD,oCAACO,QAAQC,qBAAT,CAAR;AACD;AAEM,SAASC,+BAAT,GAAoD;EAEzD,OAAOpC,oBAAoB,CAACG,KAArB,IAA8B,EAA9B,IAAoCH,oBAAoB,CAACC,KAArB,GAA6B,CAAxE;AACD;AAEM,SAASoC,wBAAT,GAA6C;EAGlD,OAAO,CAAEV,MAAD,CAAgBW,kBAAjB,IAAwCX,MAAD,CAAgBY,aAA9D;AACD","names":["pack","version","split","majorStr","minorStr","REACT_NATIVE_VERSION","major","parseInt","minor","toArray","object","Array","isArray","withPrevAndCurrent","array","mapFn","previousArr","currentArr","transformedArr","forEach","current","i","previous","transformed","push","hasProperty","key","Object","prototype","hasOwnProperty","call","isJestEnv","global","process","env","JEST_WORKER_ID","tagMessage","msg","isFabric","_global","nativeFabricUIManager","shouldUseCodegenNativeComponent","isRemoteDebuggingEnabled","nativeCallSyncHook","__REMOTEDEV__"],"sources":["utils.ts"],"sourcesContent":["import pack from 'react-native/package.json';\n\nconst [majorStr, minorStr] = pack.version.split('.');\nexport const REACT_NATIVE_VERSION = {\n  major: parseInt(majorStr, 10),\n  minor: parseInt(minorStr, 10),\n};\n\nexport function toArray<T>(object: T | T[]): T[] {\n  if (!Array.isArray(object)) {\n    return [object];\n  }\n\n  return object;\n}\n\nexport type withPrevAndCurrentMapFn<T, Transformed> = (\n  previous: Transformed | null,\n  current: T\n) => Transformed;\nexport function withPrevAndCurrent<T, Transformed>(\n  array: T[],\n  mapFn: withPrevAndCurrentMapFn<T, Transformed>\n): Transformed[] {\n  const previousArr: (null | Transformed)[] = [null];\n  const currentArr = [...array];\n  const transformedArr: Transformed[] = [];\n  currentArr.forEach((current, i) => {\n    const previous = previousArr[i];\n    const transformed = mapFn(previous, current);\n    previousArr.push(transformed);\n    transformedArr.push(transformed);\n  });\n  return transformedArr;\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function hasProperty(object: object, key: string) {\n  return Object.prototype.hasOwnProperty.call(object, key);\n}\n\nexport function isJestEnv(): boolean {\n  // @ts-ignore Do not use `@types/node` because it will prioritise Node types over RN types which breaks the types (ex. setTimeout) in React Native projects.\n  return hasProperty(global, 'process') && !!process.env.JEST_WORKER_ID;\n}\n\nexport function tagMessage(msg: string) {\n  return `[react-native-gesture-handler] ${msg}`;\n}\n\n// helper method to check whether Fabric is enabled, however global.nativeFabricUIManager\n// may not be initialized before the first render\nexport function isFabric(): boolean {\n  // @ts-expect-error nativeFabricUIManager is not yet included in the RN types\n  return !!global?.nativeFabricUIManager;\n}\n\nexport function shouldUseCodegenNativeComponent(): boolean {\n  // use codegenNativeComponent starting with RN 0.68\n  return REACT_NATIVE_VERSION.minor >= 68 || REACT_NATIVE_VERSION.major > 0;\n}\n\nexport function isRemoteDebuggingEnabled(): boolean {\n  // react-native-reanimated checks if in remote debugging in the same way\n  // @ts-ignore global is available but node types are not included\n  return !(global as any).nativeCallSyncHook || (global as any).__REMOTEDEV__;\n}\n"]}