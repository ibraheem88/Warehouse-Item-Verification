{"version":3,"mappings":"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","names":["UIManagerAny","UIManager","customGHEventsConfigFabricAndroid","topOnGestureHandlerEvent","registrationName","topOnGestureHandlerStateChange","customGHEventsConfig","onGestureHandlerEvent","onGestureHandlerStateChange","Platform","OS","genericDirectEventTypes","UIManagerConstants","getViewManagerConfig","_UIManagerAny$getView2","getConstants","_UIManagerAny$getCons","setJSResponder","oldSetJSResponder","clearJSResponder","oldClearJSResponder","tag","blockNativeResponder","RNGestureHandlerModule","handleSetJSResponder","handleClearJSResponder","allowTouches","DEV_ON_ANDROID","__DEV__","DeviceEventEmitter","addListener","hasUnresolvedRefs","props","extract","refs","Array","isArray","current","some","r","stateToPropMappings","State","UNDETERMINED","undefined","BEGAN","FAILED","CANCELLED","ACTIVE","END","UNRESOLVED_REFS_RETRY_LIMIT","createHandler","name","allowedProps","config","transformProps","customNativeProps","Handler","constructor","_defineProperty","event","nativeEvent","handlerTag","onGestureEvent","onHandlerStateChange","state","stateEventName","eventHandler","node","viewNode","child","React","Children","only","children","ref","newConfig","createGestureHandler","newViewTag","viewTag","attachGestureHandler","ActionType","JS_FUNCTION_OLD_API","propsRef","onGestureStateChange","actionType","REANIMATED_WORKLET","NATIVE_ANIMATED_EVENT","updateGestureHandler","createRef","id","handlerIDToTag","Error","componentDidMount","inspectorToggleListener","setState","_","update","updateEnqueued","setImmediate","componentDidUpdate","componentWillUnmount","remove","dropGestureHandler","clearImmediate","handlerID","remainingTries","setNativeProps","updates","mergedProps","render","gestureEventHandler","gestureStateEventHandler","events","e","grandChildren","type","displayName","toArray","push","_PressabilityDebugView","key","color","hitSlop","cloneElement","refHandler","collapsable","handlerType","testID","Component"],"sources":["createHandler.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Platform,\n  UIManager,\n  DeviceEventEmitter,\n  EmitterSubscription,\n} from 'react-native';\n// @ts-ignore - it isn't typed by TS & don't have definitelyTyped types\nimport deepEqual from 'lodash/isEqual';\nimport RNGestureHandlerModule from '../RNGestureHandlerModule';\nimport type RNGestureHandlerModuleWeb from '../RNGestureHandlerModule.web';\nimport { State } from '../State';\nimport {\n  handlerIDToTag,\n  getNextHandlerTag,\n  registerOldGestureHandler,\n} from './handlersRegistry';\n\nimport {\n  BaseGestureHandlerProps,\n  filterConfig,\n  GestureEvent,\n  HandlerStateChangeEvent,\n  findNodeHandle,\n  scheduleFlushOperations,\n} from './gestureHandlerCommon';\nimport { ValueOf } from '../typeUtils';\nimport { isFabric, isJestEnv, tagMessage } from '../utils';\nimport { ActionType } from '../ActionType';\nimport { PressabilityDebugView } from './PressabilityDebugView';\n\nconst UIManagerAny = UIManager as any;\n\nconst customGHEventsConfigFabricAndroid = {\n  topOnGestureHandlerEvent: { registrationName: 'onGestureHandlerEvent' },\n  topOnGestureHandlerStateChange: {\n    registrationName: 'onGestureHandlerStateChange',\n  },\n};\n\nconst customGHEventsConfig = {\n  onGestureHandlerEvent: { registrationName: 'onGestureHandlerEvent' },\n  onGestureHandlerStateChange: {\n    registrationName: 'onGestureHandlerStateChange',\n  },\n\n  // When using React Native Gesture Handler for Animated.event with useNativeDriver: true\n  // on Android with Fabric enabled, the native part still sends the native events to JS\n  // but prefixed with \"top\". We cannot simply rename the events above so they are prefixed\n  // with \"top\" instead of \"on\" because in such case Animated.events would not be registered.\n  // That's why we need to register another pair of event names.\n  // The incoming events will be queued but never handled.\n  // Without this piece of code below, you'll get the following JS error:\n  // Unsupported top level event type \"topOnGestureHandlerEvent\" dispatched\n  ...(isFabric() &&\n    Platform.OS === 'android' &&\n    customGHEventsConfigFabricAndroid),\n};\n\n// Add gesture specific events to genericDirectEventTypes object exported from UIManager\n// native module.\n// Once new event types are registered with react it is possible to dispatch these\n// events to all kind of native views.\nUIManagerAny.genericDirectEventTypes = {\n  ...UIManagerAny.genericDirectEventTypes,\n  ...customGHEventsConfig,\n};\n// In newer versions of RN the `genericDirectEventTypes` is located in the object\n// returned by UIManager.getViewManagerConfig('getConstants') or in older RN UIManager.getConstants(), we need to add it there as well to make\n// it compatible with RN 61+\nconst UIManagerConstants =\n  UIManagerAny.getViewManagerConfig?.('getConstants') ??\n  UIManagerAny.getConstants?.();\n\nif (UIManagerConstants) {\n  UIManagerConstants.genericDirectEventTypes = {\n    ...UIManagerConstants.genericDirectEventTypes,\n    ...customGHEventsConfig,\n  };\n}\n\n// Wrap JS responder calls and notify gesture handler manager\nconst {\n  setJSResponder: oldSetJSResponder = () => {\n    //no operation\n  },\n  clearJSResponder: oldClearJSResponder = () => {\n    //no operation\n  },\n} = UIManagerAny;\nUIManagerAny.setJSResponder = (tag: number, blockNativeResponder: boolean) => {\n  RNGestureHandlerModule.handleSetJSResponder(tag, blockNativeResponder);\n  oldSetJSResponder(tag, blockNativeResponder);\n};\nUIManagerAny.clearJSResponder = () => {\n  RNGestureHandlerModule.handleClearJSResponder();\n  oldClearJSResponder();\n};\n\nlet allowTouches = true;\nconst DEV_ON_ANDROID = __DEV__ && Platform.OS === 'android';\n// Toggled inspector blocks touch events in order to allow inspecting on Android\n// This needs to be a global variable in order to set initial state for `allowTouches` property in Handler component\nif (DEV_ON_ANDROID) {\n  DeviceEventEmitter.addListener('toggleElementInspector', () => {\n    allowTouches = !allowTouches;\n  });\n}\n\ntype HandlerProps<T extends Record<string, unknown>> = Readonly<\n  React.PropsWithChildren<BaseGestureHandlerProps<T>>\n>;\nfunction hasUnresolvedRefs<T extends Record<string, unknown>>(\n  props: HandlerProps<T>\n) {\n  // TODO(TS) - add type for extract arg\n  const extract = (refs: any | any[]) => {\n    if (!Array.isArray(refs)) {\n      return refs && refs.current === null;\n    }\n    return refs.some((r) => r && r.current === null);\n  };\n  return extract(props['simultaneousHandlers']) || extract(props['waitFor']);\n}\n\nconst stateToPropMappings = {\n  [State.UNDETERMINED]: undefined,\n  [State.BEGAN]: 'onBegan',\n  [State.FAILED]: 'onFailed',\n  [State.CANCELLED]: 'onCancelled',\n  [State.ACTIVE]: 'onActivated',\n  [State.END]: 'onEnded',\n} as const;\n\ntype CreateHandlerArgs<HandlerPropsT extends Record<string, unknown>> =\n  Readonly<{\n    name: string;\n    allowedProps: Readonly<Extract<keyof HandlerPropsT, string>[]>;\n    config: Readonly<Record<string, unknown>>;\n    transformProps?: (props: HandlerPropsT) => HandlerPropsT;\n    customNativeProps?: Readonly<string[]>;\n  }>;\n\n// TODO(TS) fix event types\ntype InternalEventHandlers = {\n  onGestureHandlerEvent?: (event: any) => void;\n  onGestureHandlerStateChange?: (event: any) => void;\n};\n\nconst UNRESOLVED_REFS_RETRY_LIMIT = 1;\n\n// TODO(TS) - make sure that BaseGestureHandlerProps doesn't need other generic parameter to work with custom properties.\nexport default function createHandler<\n  T extends BaseGestureHandlerProps<U>,\n  U extends Record<string, unknown>\n>({\n  name,\n  allowedProps = [],\n  config = {},\n  transformProps,\n  customNativeProps = [],\n}: CreateHandlerArgs<T>): React.ComponentType<T & React.RefAttributes<any>> {\n  interface HandlerState {\n    allowTouches: boolean;\n  }\n  class Handler extends React.Component<\n    T & InternalEventHandlers,\n    HandlerState\n  > {\n    static displayName = name;\n\n    private handlerTag: number;\n    private config: Record<string, unknown>;\n    private propsRef: React.MutableRefObject<unknown>;\n    private viewNode: any;\n    private viewTag?: number;\n    private updateEnqueued: ReturnType<typeof setImmediate> | null = null;\n    private inspectorToggleListener?: EmitterSubscription;\n\n    constructor(props: T & InternalEventHandlers) {\n      super(props);\n      this.handlerTag = getNextHandlerTag();\n      this.config = {};\n      this.propsRef = React.createRef();\n      this.state = { allowTouches };\n      if (props.id) {\n        if (handlerIDToTag[props.id] !== undefined) {\n          throw new Error(`Handler with ID \"${props.id}\" already registered`);\n        }\n        handlerIDToTag[props.id] = this.handlerTag;\n      }\n    }\n\n    componentDidMount() {\n      const props: HandlerProps<U> = this.props;\n\n      if (DEV_ON_ANDROID) {\n        this.inspectorToggleListener = DeviceEventEmitter.addListener(\n          'toggleElementInspector',\n          () => {\n            this.setState((_) => ({ allowTouches }));\n            this.update(UNRESOLVED_REFS_RETRY_LIMIT);\n          }\n        );\n      }\n      if (hasUnresolvedRefs(props)) {\n        // If there are unresolved refs (e.g. \".current\" has not yet been set)\n        // passed as `simultaneousHandlers` or `waitFor`, we enqueue a call to\n        // _update method that will try to update native handler props using\n        // setImmediate. This makes it so update() function gets called after all\n        // react components are mounted and we expect the missing ref object to\n        // be resolved by then.\n        this.updateEnqueued = setImmediate(() => {\n          this.updateEnqueued = null;\n          this.update(UNRESOLVED_REFS_RETRY_LIMIT);\n        });\n      }\n\n      this.createGestureHandler(\n        filterConfig(\n          transformProps ? transformProps(this.props) : this.props,\n          [...allowedProps, ...customNativeProps],\n          config\n        )\n      );\n\n      this.attachGestureHandler(findNodeHandle(this.viewNode) as number); // TODO(TS) - check if this can be null\n    }\n\n    componentDidUpdate() {\n      const viewTag = findNodeHandle(this.viewNode);\n      if (this.viewTag !== viewTag) {\n        this.attachGestureHandler(viewTag as number); // TODO(TS) - check interaction between _viewTag & findNodeHandle\n      }\n      this.update(UNRESOLVED_REFS_RETRY_LIMIT);\n    }\n\n    componentWillUnmount() {\n      this.inspectorToggleListener?.remove();\n      RNGestureHandlerModule.dropGestureHandler(this.handlerTag);\n      scheduleFlushOperations();\n      if (this.updateEnqueued) {\n        clearImmediate(this.updateEnqueued);\n      }\n      // We can't use this.props.id directly due to TS generic type narrowing bug, see https://github.com/microsoft/TypeScript/issues/13995 for more context\n      const handlerID: string | undefined = this.props.id;\n      if (handlerID) {\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete handlerIDToTag[handlerID];\n      }\n    }\n\n    private onGestureHandlerEvent = (event: GestureEvent<U>) => {\n      if (event.nativeEvent.handlerTag === this.handlerTag) {\n        if (typeof this.props.onGestureEvent === 'function') {\n          this.props.onGestureEvent?.(event);\n        }\n      } else {\n        this.props.onGestureHandlerEvent?.(event);\n      }\n    };\n\n    // TODO(TS) - make sure this is right type for event\n    private onGestureHandlerStateChange = (\n      event: HandlerStateChangeEvent<U>\n    ) => {\n      if (event.nativeEvent.handlerTag === this.handlerTag) {\n        if (typeof this.props.onHandlerStateChange === 'function') {\n          this.props.onHandlerStateChange?.(event);\n        }\n\n        const state: ValueOf<typeof State> = event.nativeEvent.state;\n        const stateEventName = stateToPropMappings[state];\n        const eventHandler = stateEventName && this.props[stateEventName];\n        if (eventHandler && typeof eventHandler === 'function') {\n          eventHandler(event);\n        }\n      } else {\n        this.props.onGestureHandlerStateChange?.(event);\n      }\n    };\n\n    private refHandler = (node: any) => {\n      this.viewNode = node;\n\n      const child = React.Children.only(this.props.children);\n      // TODO(TS) fix ref type\n      const { ref }: any = child;\n      if (ref !== null) {\n        if (typeof ref === 'function') {\n          ref(node);\n        } else {\n          ref.current = node;\n        }\n      }\n    };\n\n    private createGestureHandler = (\n      newConfig: Readonly<Record<string, unknown>>\n    ) => {\n      this.config = newConfig;\n\n      RNGestureHandlerModule.createGestureHandler(\n        name,\n        this.handlerTag,\n        newConfig\n      );\n    };\n\n    private attachGestureHandler = (newViewTag: number) => {\n      this.viewTag = newViewTag;\n\n      if (Platform.OS === 'web') {\n        // typecast due to dynamic resolution, attachGestureHandler should have web version signature in this branch\n        (\n          RNGestureHandlerModule.attachGestureHandler as typeof RNGestureHandlerModuleWeb.attachGestureHandler\n        )(\n          this.handlerTag,\n          newViewTag,\n          ActionType.JS_FUNCTION_OLD_API, // ignored on web\n          this.propsRef\n        );\n      } else {\n        registerOldGestureHandler(this.handlerTag, {\n          onGestureEvent: this.onGestureHandlerEvent,\n          onGestureStateChange: this.onGestureHandlerStateChange,\n        });\n\n        const actionType = (() => {\n          if (\n            this.props?.onGestureEvent &&\n            'current' in this.props.onGestureEvent\n          ) {\n            // Reanimated worklet\n            return ActionType.REANIMATED_WORKLET;\n          } else if (\n            this.props?.onGestureEvent &&\n            '__isNative' in this.props.onGestureEvent\n          ) {\n            // Animated.event with useNativeDriver: true\n            return ActionType.NATIVE_ANIMATED_EVENT;\n          } else {\n            // JS callback or Animated.event with useNativeDriver: false\n            return ActionType.JS_FUNCTION_OLD_API;\n          }\n        })();\n\n        RNGestureHandlerModule.attachGestureHandler(\n          this.handlerTag,\n          newViewTag,\n          actionType\n        );\n      }\n\n      scheduleFlushOperations();\n    };\n\n    private updateGestureHandler = (\n      newConfig: Readonly<Record<string, unknown>>\n    ) => {\n      this.config = newConfig;\n\n      RNGestureHandlerModule.updateGestureHandler(this.handlerTag, newConfig);\n      scheduleFlushOperations();\n    };\n\n    private update(remainingTries: number) {\n      const props: HandlerProps<U> = this.props;\n\n      // When ref is set via a function i.e. `ref={(r) => refObject.current = r}` instead of\n      // `ref={refObject}` it's possible that it won't be resolved in time. Seems like trying\n      // again is easy enough fix.\n      if (hasUnresolvedRefs(props) && remainingTries > 0) {\n        this.updateEnqueued = setImmediate(() => {\n          this.updateEnqueued = null;\n          this.update(remainingTries - 1);\n        });\n      } else {\n        const newConfig = filterConfig(\n          transformProps ? transformProps(this.props) : this.props,\n          [...allowedProps, ...customNativeProps],\n          config\n        );\n        if (!deepEqual(this.config, newConfig)) {\n          this.updateGestureHandler(newConfig);\n        }\n      }\n    }\n\n    setNativeProps(updates: any) {\n      const mergedProps = { ...this.props, ...updates };\n      const newConfig = filterConfig(\n        transformProps ? transformProps(mergedProps) : mergedProps,\n        [...allowedProps, ...customNativeProps],\n        config\n      );\n      this.updateGestureHandler(newConfig);\n    }\n\n    render() {\n      let gestureEventHandler = this.onGestureHandlerEvent;\n      // Another instance of https://github.com/microsoft/TypeScript/issues/13995\n      type OnGestureEventHandlers = {\n        onGestureEvent?: BaseGestureHandlerProps<U>['onGestureEvent'];\n        onGestureHandlerEvent?: InternalEventHandlers['onGestureHandlerEvent'];\n      };\n      const { onGestureEvent, onGestureHandlerEvent }: OnGestureEventHandlers =\n        this.props;\n      if (onGestureEvent && typeof onGestureEvent !== 'function') {\n        // If it's not a method it should be an native Animated.event\n        // object. We set it directly as the handler for the view\n        // In this case nested handlers are not going to be supported\n        if (onGestureHandlerEvent) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n        gestureEventHandler = onGestureEvent;\n      } else {\n        if (\n          onGestureHandlerEvent &&\n          typeof onGestureHandlerEvent !== 'function'\n        ) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n      }\n\n      let gestureStateEventHandler = this.onGestureHandlerStateChange;\n      // Another instance of https://github.com/microsoft/TypeScript/issues/13995\n      type OnGestureStateChangeHandlers = {\n        onHandlerStateChange?: BaseGestureHandlerProps<U>['onHandlerStateChange'];\n        onGestureHandlerStateChange?: InternalEventHandlers['onGestureHandlerStateChange'];\n      };\n      const {\n        onHandlerStateChange,\n        onGestureHandlerStateChange,\n      }: OnGestureStateChangeHandlers = this.props;\n      if (onHandlerStateChange && typeof onHandlerStateChange !== 'function') {\n        // If it's not a method it should be an native Animated.event\n        // object. We set it directly as the handler for the view\n        // In this case nested handlers are not going to be supported\n        if (onGestureHandlerStateChange) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n        gestureStateEventHandler = onHandlerStateChange;\n      } else {\n        if (\n          onGestureHandlerStateChange &&\n          typeof onGestureHandlerStateChange !== 'function'\n        ) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n      }\n      const events = {\n        onGestureHandlerEvent: this.state.allowTouches\n          ? gestureEventHandler\n          : undefined,\n        onGestureHandlerStateChange: this.state.allowTouches\n          ? gestureStateEventHandler\n          : undefined,\n      };\n\n      this.propsRef.current = events;\n\n      let child: any = null;\n      try {\n        child = React.Children.only(this.props.children);\n      } catch (e) {\n        throw new Error(\n          tagMessage(\n            `${name} got more than one view as a child. If you want the gesture to work on multiple views, wrap them with a common parent and attach the gesture to that view.`\n          )\n        );\n      }\n\n      let grandChildren = child.props.children;\n      if (\n        __DEV__ &&\n        child.type &&\n        (child.type === 'RNGestureHandlerButton' ||\n          child.type.name === 'View' ||\n          child.type.displayName === 'View')\n      ) {\n        grandChildren = React.Children.toArray(grandChildren);\n        grandChildren.push(\n          <PressabilityDebugView\n            key=\"pressabilityDebugView\"\n            color=\"mediumspringgreen\"\n            hitSlop={child.props.hitSlop}\n          />\n        );\n      }\n\n      return React.cloneElement(\n        child,\n        {\n          ref: this.refHandler,\n          collapsable: false,\n          ...(isJestEnv()\n            ? {\n                handlerType: name,\n                handlerTag: this.handlerTag,\n              }\n            : {}),\n          testID: this.props.testID ?? child.props.testID,\n          ...events,\n        },\n        grandChildren\n      );\n    }\n  }\n  return Handler;\n}\n"]}