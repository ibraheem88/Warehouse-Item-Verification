{"version":3,"mappings":"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","names":["TOUCHABLE_STATE","UNDETERMINED","BEGAN","MOVED_OUTSIDE","GenericTouchable","args","_defineProperty","pointerInside","nativeEvent","onMoveIn","onMoveOut","state","State","CANCELLED","FAILED","moveToState","Platform","OS","ACTIVE","STATE","handlePressIn","END","shouldCallOnPress","longPressDetected","pressOutTimeout","handleGoToUndetermined","props","onPress","onLongPress","delayPressIn","pressInTimeout","setTimeout","time","delayLongPress","longPressTimeout","onLongPressDetected","handleMoveOutside","delayPressOut","clearTimeout","componentDidMount","reset","newState","onPressIn","onPressOut","onStateChange","componentWillUnmount","render","coreProps","accessible","accessibilityLabel","accessibilityHint","accessibilityRole","accessibilityState","accessibilityActions","onAccessibilityAction","nativeID","onLayout","hitSlop","React","_GestureButtons","style","containerStyle","onHandlerStateChange","disabled","undefined","onGestureEvent","shouldActivateOnStart","disallowInterruption","testID","touchSoundDisabled","enabled","extraButtonProps","_reactNative","View","children","Component","rippleColor","exclusive"],"sources":["GenericTouchable.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Component } from 'react';\nimport {\n  Animated,\n  Platform,\n  StyleProp,\n  ViewStyle,\n  TouchableWithoutFeedbackProps,\n} from 'react-native';\n\nimport { State } from '../../State';\nimport { BaseButton } from '../GestureButtons';\n\nimport {\n  GestureEvent,\n  HandlerStateChangeEvent,\n} from '../../handlers/gestureHandlerCommon';\nimport { NativeViewGestureHandlerPayload } from '../../handlers/NativeViewGestureHandler';\nimport { TouchableNativeFeedbackExtraProps } from './TouchableNativeFeedback.android';\n\n/**\n * Each touchable is a states' machine which preforms transitions.\n * On very beginning (and on the very end or recognition) touchable is\n * UNDETERMINED. Then it moves to BEGAN. If touchable recognizes that finger\n * travel outside it transits to special MOVED_OUTSIDE state. Gesture recognition\n * finishes in UNDETERMINED state.\n */\nexport const TOUCHABLE_STATE = {\n  UNDETERMINED: 0,\n  BEGAN: 1,\n  MOVED_OUTSIDE: 2,\n} as const;\n\ntype TouchableState = typeof TOUCHABLE_STATE[keyof typeof TOUCHABLE_STATE];\n\nexport interface GenericTouchableProps extends TouchableWithoutFeedbackProps {\n  // Decided to drop not used fields from RN's implementation.\n  // e.g. onBlur and onFocus as well as deprecated props. - TODO: this comment may be unuseful in this moment\n\n  // TODO: in RN these events get native event parameter, which prolly could be used in our implementation too\n  onPress?: () => void;\n  onPressIn?: () => void;\n  onPressOut?: () => void;\n  onLongPress?: () => void;\n\n  nativeID?: string;\n  shouldActivateOnStart?: boolean;\n  disallowInterruption?: boolean;\n\n  containerStyle?: StyleProp<ViewStyle>;\n}\n\ninterface InternalProps {\n  extraButtonProps: TouchableNativeFeedbackExtraProps;\n  onStateChange?: (oldState: TouchableState, newState: TouchableState) => void;\n}\n\n// TODO: maybe can be better\n// TODO: all clearTimeout have ! added, maybe they shouldn't ?\ntype Timeout = ReturnType<typeof setTimeout> | null | undefined;\n\n/**\n * GenericTouchable is not intented to be used as it is.\n * Should be treated as a source for the rest of touchables\n */\n\nexport default class GenericTouchable extends Component<\n  GenericTouchableProps & InternalProps\n> {\n  static defaultProps = {\n    delayLongPress: 600,\n    extraButtonProps: {\n      rippleColor: 'transparent',\n      exclusive: true,\n    },\n  };\n\n  // timeout handlers\n  pressInTimeout: Timeout;\n  pressOutTimeout: Timeout;\n  longPressTimeout: Timeout;\n\n  // This flag is required since recognition of longPress implies not-invoking onPress\n  longPressDetected = false;\n\n  pointerInside = true;\n\n  // State of touchable\n  STATE: TouchableState = TOUCHABLE_STATE.UNDETERMINED;\n\n  // handlePressIn in called on first touch on traveling inside component.\n  // Handles state transition with delay.\n  handlePressIn() {\n    if (this.props.delayPressIn) {\n      this.pressInTimeout = setTimeout(() => {\n        this.moveToState(TOUCHABLE_STATE.BEGAN);\n        this.pressInTimeout = null;\n      }, this.props.delayPressIn);\n    } else {\n      this.moveToState(TOUCHABLE_STATE.BEGAN);\n    }\n    if (this.props.onLongPress) {\n      const time =\n        (this.props.delayPressIn || 0) + (this.props.delayLongPress || 0);\n      this.longPressTimeout = setTimeout(this.onLongPressDetected, time);\n    }\n  }\n  // handleMoveOutside in called on traveling outside component.\n  // Handles state transition with delay.\n  handleMoveOutside() {\n    if (this.props.delayPressOut) {\n      this.pressOutTimeout =\n        this.pressOutTimeout ||\n        setTimeout(() => {\n          this.moveToState(TOUCHABLE_STATE.MOVED_OUTSIDE);\n          this.pressOutTimeout = null;\n        }, this.props.delayPressOut);\n    } else {\n      this.moveToState(TOUCHABLE_STATE.MOVED_OUTSIDE);\n    }\n  }\n\n  // handleGoToUndetermined transits to UNDETERMINED state with proper delay\n  handleGoToUndetermined() {\n    clearTimeout(this.pressOutTimeout!); // TODO: maybe it can be undefined\n    if (this.props.delayPressOut) {\n      this.pressOutTimeout = setTimeout(() => {\n        if (this.STATE === TOUCHABLE_STATE.UNDETERMINED) {\n          this.moveToState(TOUCHABLE_STATE.BEGAN);\n        }\n        this.moveToState(TOUCHABLE_STATE.UNDETERMINED);\n        this.pressOutTimeout = null;\n      }, this.props.delayPressOut);\n    } else {\n      if (this.STATE === TOUCHABLE_STATE.UNDETERMINED) {\n        this.moveToState(TOUCHABLE_STATE.BEGAN);\n      }\n      this.moveToState(TOUCHABLE_STATE.UNDETERMINED);\n    }\n  }\n\n  componentDidMount() {\n    this.reset();\n  }\n  // reset timeout to prevent memory leaks.\n  reset() {\n    this.longPressDetected = false;\n    this.pointerInside = true;\n    clearTimeout(this.pressInTimeout!);\n    clearTimeout(this.pressOutTimeout!);\n    clearTimeout(this.longPressTimeout!);\n    this.pressOutTimeout = null;\n    this.longPressTimeout = null;\n    this.pressInTimeout = null;\n  }\n\n  // All states' transitions are defined here.\n  moveToState(newState: TouchableState) {\n    if (newState === this.STATE) {\n      // Ignore dummy transitions\n      return;\n    }\n    if (newState === TOUCHABLE_STATE.BEGAN) {\n      // First touch and moving inside\n      this.props.onPressIn?.();\n    } else if (newState === TOUCHABLE_STATE.MOVED_OUTSIDE) {\n      // Moving outside\n      this.props.onPressOut?.();\n    } else if (newState === TOUCHABLE_STATE.UNDETERMINED) {\n      // Need to reset each time on transition to UNDETERMINED\n      this.reset();\n      if (this.STATE === TOUCHABLE_STATE.BEGAN) {\n        // ... and if it happens inside button.\n        this.props.onPressOut?.();\n      }\n    }\n    // Finally call lister (used by subclasses)\n    this.props.onStateChange?.(this.STATE, newState);\n    // ... and make transition.\n    this.STATE = newState;\n  }\n\n  onGestureEvent = ({\n    nativeEvent: { pointerInside },\n  }: GestureEvent<NativeViewGestureHandlerPayload>) => {\n    if (this.pointerInside !== pointerInside) {\n      if (pointerInside) {\n        this.onMoveIn();\n      } else {\n        this.onMoveOut();\n      }\n    }\n    this.pointerInside = pointerInside;\n  };\n\n  onHandlerStateChange = ({\n    nativeEvent,\n  }: HandlerStateChangeEvent<NativeViewGestureHandlerPayload>) => {\n    const { state } = nativeEvent;\n    if (state === State.CANCELLED || state === State.FAILED) {\n      // Need to handle case with external cancellation (e.g. by ScrollView)\n      this.moveToState(TOUCHABLE_STATE.UNDETERMINED);\n    } else if (\n      // This platform check is an implication of slightly different behavior of handlers on different platform.\n      // And Android \"Active\" state is achieving on first move of a finger, not on press in.\n      // On iOS event on \"Began\" is not delivered.\n      state === (Platform.OS !== 'android' ? State.ACTIVE : State.BEGAN) &&\n      this.STATE === TOUCHABLE_STATE.UNDETERMINED\n    ) {\n      // Moving inside requires\n      this.handlePressIn();\n    } else if (state === State.END) {\n      const shouldCallOnPress =\n        !this.longPressDetected &&\n        this.STATE !== TOUCHABLE_STATE.MOVED_OUTSIDE &&\n        this.pressOutTimeout === null;\n      this.handleGoToUndetermined();\n      if (shouldCallOnPress) {\n        // Calls only inside component whether no long press was called previously\n        this.props.onPress?.();\n      }\n    }\n  };\n\n  onLongPressDetected = () => {\n    this.longPressDetected = true;\n    // checked for in the caller of `onLongPressDetected`, but better to check twice\n    this.props.onLongPress?.();\n  };\n\n  componentWillUnmount() {\n    // to prevent memory leaks\n    this.reset();\n  }\n\n  onMoveIn() {\n    if (this.STATE === TOUCHABLE_STATE.MOVED_OUTSIDE) {\n      // This call is not throttled with delays (like in RN's implementation).\n      this.moveToState(TOUCHABLE_STATE.BEGAN);\n    }\n  }\n\n  onMoveOut() {\n    // long press should no longer be detected\n    clearTimeout(this.longPressTimeout!);\n    this.longPressTimeout = null;\n    if (this.STATE === TOUCHABLE_STATE.BEGAN) {\n      this.handleMoveOutside();\n    }\n  }\n\n  render() {\n    const coreProps = {\n      accessible: this.props.accessible !== false,\n      accessibilityLabel: this.props.accessibilityLabel,\n      accessibilityHint: this.props.accessibilityHint,\n      accessibilityRole: this.props.accessibilityRole,\n      // TODO: check if changed to no 's' correctly, also removed 2 props that are no longer available: `accessibilityComponentType` and `accessibilityTraits`,\n      // would be good to check if it is ok for sure, see: https://github.com/facebook/react-native/issues/24016\n      accessibilityState: this.props.accessibilityState,\n      accessibilityActions: this.props.accessibilityActions,\n      onAccessibilityAction: this.props.onAccessibilityAction,\n      nativeID: this.props.nativeID,\n      onLayout: this.props.onLayout,\n      hitSlop: this.props.hitSlop,\n    };\n\n    return (\n      <BaseButton\n        style={this.props.containerStyle}\n        onHandlerStateChange={\n          // TODO: not sure if it can be undefined instead of null\n          this.props.disabled ? undefined : this.onHandlerStateChange\n        }\n        onGestureEvent={this.onGestureEvent}\n        hitSlop={this.props.hitSlop}\n        shouldActivateOnStart={this.props.shouldActivateOnStart}\n        disallowInterruption={this.props.disallowInterruption}\n        testID={this.props.testID}\n        touchSoundDisabled={this.props.touchSoundDisabled ?? false}\n        enabled={!this.props.disabled}\n        {...this.props.extraButtonProps}>\n        <Animated.View {...coreProps} style={this.props.style}>\n          {this.props.children}\n        </Animated.View>\n      </BaseButton>\n    );\n  }\n}\n"]}