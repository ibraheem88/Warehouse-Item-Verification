d5d002420b702cc89aebf95382978b7d
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");
var _toConsumableArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/toConsumableArray"));
var _slicedToArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/slicedToArray"));
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toArray = toArray;
exports.withPrevAndCurrent = withPrevAndCurrent;
exports.hasProperty = hasProperty;
exports.isJestEnv = isJestEnv;
exports.tagMessage = tagMessage;
exports.isFabric = isFabric;
exports.shouldUseCodegenNativeComponent = shouldUseCodegenNativeComponent;
exports.isRemoteDebuggingEnabled = isRemoteDebuggingEnabled;
exports.REACT_NATIVE_VERSION = void 0;
var _package = _interopRequireDefault(require("react-native/package.json"));
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
var _package$default$vers = _package.default.version.split('.'),
  _package$default$vers2 = (0, _slicedToArray2.default)(_package$default$vers, 2),
  majorStr = _package$default$vers2[0],
  minorStr = _package$default$vers2[1];
var REACT_NATIVE_VERSION = {
  major: parseInt(majorStr, 10),
  minor: parseInt(minorStr, 10)
};
exports.REACT_NATIVE_VERSION = REACT_NATIVE_VERSION;
function toArray(object) {
  if (!Array.isArray(object)) {
    return [object];
  }
  return object;
}
function withPrevAndCurrent(array, mapFn) {
  var previousArr = [null];
  var currentArr = (0, _toConsumableArray2.default)(array);
  var transformedArr = [];
  currentArr.forEach(function (current, i) {
    var previous = previousArr[i];
    var transformed = mapFn(previous, current);
    previousArr.push(transformed);
    transformedArr.push(transformed);
  });
  return transformedArr;
}
function hasProperty(object, key) {
  return Object.prototype.hasOwnProperty.call(object, key);
}
function isJestEnv() {
  return hasProperty(global, 'process') && !!process.env.JEST_WORKER_ID;
}
function tagMessage(msg) {
  return "[react-native-gesture-handler] " + msg;
}
function isFabric() {
  var _global;
  return !!((_global = global) !== null && _global !== void 0 && _global.nativeFabricUIManager);
}
function shouldUseCodegenNativeComponent() {
  return REACT_NATIVE_VERSION.minor >= 68 || REACT_NATIVE_VERSION.major > 0;
}
function isRemoteDebuggingEnabled() {
  return !global.nativeCallSyncHook || global.__REMOTEDEV__;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7Ozs7O0FBRUEsNEJBQTZCQSxpQkFBS0MsT0FBTCxDQUFhQyxLQUFiLENBQW1CLEdBQW5CLENBQTdCO0VBQUE7RUFBT0MsUUFBRDtFQUFXQyxRQUFYO0FBQ0MsSUFBTUMsb0JBQW9CLEdBQUc7RUFDbENDLEtBQUssRUFBRUMsUUFBUSxDQUFDSixRQUFELEVBQVcsRUFBWCxDQURtQjtFQUVsQ0ssS0FBSyxFQUFFRCxRQUFRLENBQUNILFFBQUQsRUFBVyxFQUFYO0FBRm1CLENBQTdCOztBQUtBLFNBQVNLLE9BQVQsQ0FBb0JDLE1BQXBCLEVBQTBDO0VBQy9DLElBQUksQ0FBQ0MsS0FBSyxDQUFDQyxPQUFOLENBQWNGLE1BQWQsQ0FBTCxFQUE0QjtJQUMxQixPQUFPLENBQUNBLE1BQUQsQ0FBUDtFQUNEO0VBRUQsT0FBT0EsTUFBUDtBQUNEO0FBTU0sU0FBU0csa0JBQVQsQ0FDTEMsS0FESyxFQUVMQyxLQUZLLEVBR1U7RUFDZixJQUFNQyxXQUFtQyxHQUFHLENBQUMsSUFBRCxDQUE1QztFQUNBLElBQU1DLFVBQVUsb0NBQU9ILEtBQUosQ0FBbkI7RUFDQSxJQUFNSSxjQUE2QixHQUFHLEVBQXRDO0VBQ0FELFVBQVUsQ0FBQ0UsT0FBWCxDQUFtQixVQUFDQyxPQUFELEVBQVVDLENBQVYsRUFBZ0I7SUFDakMsSUFBTUMsUUFBUSxHQUFHTixXQUFXLENBQUNLLENBQUQsQ0FBNUI7SUFDQSxJQUFNRSxXQUFXLEdBQUdSLEtBQUssQ0FBQ08sUUFBRCxFQUFXRixPQUFYLENBQXpCO0lBQ0FKLFdBQVcsQ0FBQ1EsSUFBWixDQUFpQkQsV0FBakI7SUFDQUwsY0FBYyxDQUFDTSxJQUFmLENBQW9CRCxXQUFwQjtFQUNELENBTEQ7RUFNQSxPQUFPTCxjQUFQO0FBQ0Q7QUFHTSxTQUFTTyxXQUFULENBQXFCZixNQUFyQixFQUFxQ2dCLEdBQXJDLEVBQWtEO0VBQ3ZELE9BQU9DLE1BQU0sQ0FBQ0MsU0FBUCxDQUFpQkMsY0FBakIsQ0FBZ0NDLElBQWhDLENBQXFDcEIsTUFBckMsRUFBNkNnQixHQUE3QyxDQUFQO0FBQ0Q7QUFFTSxTQUFTSyxTQUFULEdBQThCO0VBRW5DLE9BQU9OLFdBQVcsQ0FBQ08sTUFBRCxFQUFTLFNBQVQsQ0FBWCxJQUFrQyxDQUFDLENBQUNDLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxjQUF2RDtBQUNEO0FBRU0sU0FBU0MsVUFBVCxDQUFvQkMsR0FBcEIsRUFBaUM7RUFDdEMsMkNBQXlDQSxHQUFJO0FBQzlDO0FBSU0sU0FBU0MsUUFBVCxHQUE2QjtFQUFBO0VBRWxDLE9BQU8sQ0FBQyxhQUFDTixNQUFELG9DQUFDTyxRQUFRQyxxQkFBVCxDQUFSO0FBQ0Q7QUFFTSxTQUFTQywrQkFBVCxHQUFvRDtFQUV6RCxPQUFPcEMsb0JBQW9CLENBQUNHLEtBQXJCLElBQThCLEVBQTlCLElBQW9DSCxvQkFBb0IsQ0FBQ0MsS0FBckIsR0FBNkIsQ0FBeEU7QUFDRDtBQUVNLFNBQVNvQyx3QkFBVCxHQUE2QztFQUdsRCxPQUFPLENBQUVWLE1BQUQsQ0FBZ0JXLGtCQUFqQixJQUF3Q1gsTUFBRCxDQUFnQlksYUFBOUQ7QUFDRCIsIm5hbWVzIjpbInBhY2siLCJ2ZXJzaW9uIiwic3BsaXQiLCJtYWpvclN0ciIsIm1pbm9yU3RyIiwiUkVBQ1RfTkFUSVZFX1ZFUlNJT04iLCJtYWpvciIsInBhcnNlSW50IiwibWlub3IiLCJ0b0FycmF5Iiwib2JqZWN0IiwiQXJyYXkiLCJpc0FycmF5Iiwid2l0aFByZXZBbmRDdXJyZW50IiwiYXJyYXkiLCJtYXBGbiIsInByZXZpb3VzQXJyIiwiY3VycmVudEFyciIsInRyYW5zZm9ybWVkQXJyIiwiZm9yRWFjaCIsImN1cnJlbnQiLCJpIiwicHJldmlvdXMiLCJ0cmFuc2Zvcm1lZCIsInB1c2giLCJoYXNQcm9wZXJ0eSIsImtleSIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImlzSmVzdEVudiIsImdsb2JhbCIsInByb2Nlc3MiLCJlbnYiLCJKRVNUX1dPUktFUl9JRCIsInRhZ01lc3NhZ2UiLCJtc2ciLCJpc0ZhYnJpYyIsIl9nbG9iYWwiLCJuYXRpdmVGYWJyaWNVSU1hbmFnZXIiLCJzaG91bGRVc2VDb2RlZ2VuTmF0aXZlQ29tcG9uZW50IiwiaXNSZW1vdGVEZWJ1Z2dpbmdFbmFibGVkIiwibmF0aXZlQ2FsbFN5bmNIb29rIiwiX19SRU1PVEVERVZfXyJdLCJzb3VyY2VzIjpbInV0aWxzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBwYWNrIGZyb20gJ3JlYWN0LW5hdGl2ZS9wYWNrYWdlLmpzb24nO1xuXG5jb25zdCBbbWFqb3JTdHIsIG1pbm9yU3RyXSA9IHBhY2sudmVyc2lvbi5zcGxpdCgnLicpO1xuZXhwb3J0IGNvbnN0IFJFQUNUX05BVElWRV9WRVJTSU9OID0ge1xuICBtYWpvcjogcGFyc2VJbnQobWFqb3JTdHIsIDEwKSxcbiAgbWlub3I6IHBhcnNlSW50KG1pbm9yU3RyLCAxMCksXG59O1xuXG5leHBvcnQgZnVuY3Rpb24gdG9BcnJheTxUPihvYmplY3Q6IFQgfCBUW10pOiBUW10ge1xuICBpZiAoIUFycmF5LmlzQXJyYXkob2JqZWN0KSkge1xuICAgIHJldHVybiBbb2JqZWN0XTtcbiAgfVxuXG4gIHJldHVybiBvYmplY3Q7XG59XG5cbmV4cG9ydCB0eXBlIHdpdGhQcmV2QW5kQ3VycmVudE1hcEZuPFQsIFRyYW5zZm9ybWVkPiA9IChcbiAgcHJldmlvdXM6IFRyYW5zZm9ybWVkIHwgbnVsbCxcbiAgY3VycmVudDogVFxuKSA9PiBUcmFuc2Zvcm1lZDtcbmV4cG9ydCBmdW5jdGlvbiB3aXRoUHJldkFuZEN1cnJlbnQ8VCwgVHJhbnNmb3JtZWQ+KFxuICBhcnJheTogVFtdLFxuICBtYXBGbjogd2l0aFByZXZBbmRDdXJyZW50TWFwRm48VCwgVHJhbnNmb3JtZWQ+XG4pOiBUcmFuc2Zvcm1lZFtdIHtcbiAgY29uc3QgcHJldmlvdXNBcnI6IChudWxsIHwgVHJhbnNmb3JtZWQpW10gPSBbbnVsbF07XG4gIGNvbnN0IGN1cnJlbnRBcnIgPSBbLi4uYXJyYXldO1xuICBjb25zdCB0cmFuc2Zvcm1lZEFycjogVHJhbnNmb3JtZWRbXSA9IFtdO1xuICBjdXJyZW50QXJyLmZvckVhY2goKGN1cnJlbnQsIGkpID0+IHtcbiAgICBjb25zdCBwcmV2aW91cyA9IHByZXZpb3VzQXJyW2ldO1xuICAgIGNvbnN0IHRyYW5zZm9ybWVkID0gbWFwRm4ocHJldmlvdXMsIGN1cnJlbnQpO1xuICAgIHByZXZpb3VzQXJyLnB1c2godHJhbnNmb3JtZWQpO1xuICAgIHRyYW5zZm9ybWVkQXJyLnB1c2godHJhbnNmb3JtZWQpO1xuICB9KTtcbiAgcmV0dXJuIHRyYW5zZm9ybWVkQXJyO1xufVxuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2Jhbi10eXBlc1xuZXhwb3J0IGZ1bmN0aW9uIGhhc1Byb3BlcnR5KG9iamVjdDogb2JqZWN0LCBrZXk6IHN0cmluZykge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzSmVzdEVudigpOiBib29sZWFuIHtcbiAgLy8gQHRzLWlnbm9yZSBEbyBub3QgdXNlIGBAdHlwZXMvbm9kZWAgYmVjYXVzZSBpdCB3aWxsIHByaW9yaXRpc2UgTm9kZSB0eXBlcyBvdmVyIFJOIHR5cGVzIHdoaWNoIGJyZWFrcyB0aGUgdHlwZXMgKGV4LiBzZXRUaW1lb3V0KSBpbiBSZWFjdCBOYXRpdmUgcHJvamVjdHMuXG4gIHJldHVybiBoYXNQcm9wZXJ0eShnbG9iYWwsICdwcm9jZXNzJykgJiYgISFwcm9jZXNzLmVudi5KRVNUX1dPUktFUl9JRDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRhZ01lc3NhZ2UobXNnOiBzdHJpbmcpIHtcbiAgcmV0dXJuIGBbcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlcl0gJHttc2d9YDtcbn1cblxuLy8gaGVscGVyIG1ldGhvZCB0byBjaGVjayB3aGV0aGVyIEZhYnJpYyBpcyBlbmFibGVkLCBob3dldmVyIGdsb2JhbC5uYXRpdmVGYWJyaWNVSU1hbmFnZXJcbi8vIG1heSBub3QgYmUgaW5pdGlhbGl6ZWQgYmVmb3JlIHRoZSBmaXJzdCByZW5kZXJcbmV4cG9ydCBmdW5jdGlvbiBpc0ZhYnJpYygpOiBib29sZWFuIHtcbiAgLy8gQHRzLWV4cGVjdC1lcnJvciBuYXRpdmVGYWJyaWNVSU1hbmFnZXIgaXMgbm90IHlldCBpbmNsdWRlZCBpbiB0aGUgUk4gdHlwZXNcbiAgcmV0dXJuICEhZ2xvYmFsPy5uYXRpdmVGYWJyaWNVSU1hbmFnZXI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaG91bGRVc2VDb2RlZ2VuTmF0aXZlQ29tcG9uZW50KCk6IGJvb2xlYW4ge1xuICAvLyB1c2UgY29kZWdlbk5hdGl2ZUNvbXBvbmVudCBzdGFydGluZyB3aXRoIFJOIDAuNjhcbiAgcmV0dXJuIFJFQUNUX05BVElWRV9WRVJTSU9OLm1pbm9yID49IDY4IHx8IFJFQUNUX05BVElWRV9WRVJTSU9OLm1ham9yID4gMDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzUmVtb3RlRGVidWdnaW5nRW5hYmxlZCgpOiBib29sZWFuIHtcbiAgLy8gcmVhY3QtbmF0aXZlLXJlYW5pbWF0ZWQgY2hlY2tzIGlmIGluIHJlbW90ZSBkZWJ1Z2dpbmcgaW4gdGhlIHNhbWUgd2F5XG4gIC8vIEB0cy1pZ25vcmUgZ2xvYmFsIGlzIGF2YWlsYWJsZSBidXQgbm9kZSB0eXBlcyBhcmUgbm90IGluY2x1ZGVkXG4gIHJldHVybiAhKGdsb2JhbCBhcyBhbnkpLm5hdGl2ZUNhbGxTeW5jSG9vayB8fCAoZ2xvYmFsIGFzIGFueSkuX19SRU1PVEVERVZfXztcbn1cbiJdfQ==