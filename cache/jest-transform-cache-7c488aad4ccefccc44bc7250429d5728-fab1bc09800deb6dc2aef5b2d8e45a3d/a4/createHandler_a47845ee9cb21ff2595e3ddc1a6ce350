8b3982cbc27d85f99876d3c816f5605d
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");
var _toConsumableArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/toConsumableArray"));
var _classCallCheck2 = _interopRequireDefault2(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault2(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault2(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault2(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault2(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault2(require("@babel/runtime/helpers/getPrototypeOf"));
var _defineProperty3 = _interopRequireDefault2(require("@babel/runtime/helpers/defineProperty"));
var _stateToPropMappings;
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createHandler;
var React = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _isEqual = _interopRequireDefault(require("lodash/isEqual"));
var _RNGestureHandlerModule = _interopRequireDefault(require("../RNGestureHandlerModule"));
var _State = require("../State");
var _handlersRegistry = require("./handlersRegistry");
var _gestureHandlerCommon = require("./gestureHandlerCommon");
var _utils = require("../utils");
var _ActionType = require("../ActionType");
var _PressabilityDebugView = require("./PressabilityDebugView");
var _UIManagerAny$getView, _UIManagerAny$getView2, _UIManagerAny$getCons;
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();
  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };
  return cache;
}
function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }
  var cache = _getRequireWildcardCache();
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
var UIManagerAny = _reactNative.UIManager;
var customGHEventsConfigFabricAndroid = {
  topOnGestureHandlerEvent: {
    registrationName: 'onGestureHandlerEvent'
  },
  topOnGestureHandlerStateChange: {
    registrationName: 'onGestureHandlerStateChange'
  }
};
var customGHEventsConfig = Object.assign({
  onGestureHandlerEvent: {
    registrationName: 'onGestureHandlerEvent'
  },
  onGestureHandlerStateChange: {
    registrationName: 'onGestureHandlerStateChange'
  }
}, (0, _utils.isFabric)() && _reactNative.Platform.OS === 'android' && customGHEventsConfigFabricAndroid);
UIManagerAny.genericDirectEventTypes = Object.assign({}, UIManagerAny.genericDirectEventTypes, customGHEventsConfig);
var UIManagerConstants = (_UIManagerAny$getView = (_UIManagerAny$getView2 = UIManagerAny.getViewManagerConfig) === null || _UIManagerAny$getView2 === void 0 ? void 0 : _UIManagerAny$getView2.call(UIManagerAny, 'getConstants')) !== null && _UIManagerAny$getView !== void 0 ? _UIManagerAny$getView : (_UIManagerAny$getCons = UIManagerAny.getConstants) === null || _UIManagerAny$getCons === void 0 ? void 0 : _UIManagerAny$getCons.call(UIManagerAny);
if (UIManagerConstants) {
  UIManagerConstants.genericDirectEventTypes = Object.assign({}, UIManagerConstants.genericDirectEventTypes, customGHEventsConfig);
}
var _UIManagerAny$setJSRe = UIManagerAny.setJSResponder,
  oldSetJSResponder = _UIManagerAny$setJSRe === void 0 ? function () {} : _UIManagerAny$setJSRe,
  _UIManagerAny$clearJS = UIManagerAny.clearJSResponder,
  oldClearJSResponder = _UIManagerAny$clearJS === void 0 ? function () {} : _UIManagerAny$clearJS;
UIManagerAny.setJSResponder = function (tag, blockNativeResponder) {
  _RNGestureHandlerModule.default.handleSetJSResponder(tag, blockNativeResponder);
  oldSetJSResponder(tag, blockNativeResponder);
};
UIManagerAny.clearJSResponder = function () {
  _RNGestureHandlerModule.default.handleClearJSResponder();
  oldClearJSResponder();
};
var allowTouches = true;
var DEV_ON_ANDROID = __DEV__ && _reactNative.Platform.OS === 'android';
if (DEV_ON_ANDROID) {
  _reactNative.DeviceEventEmitter.addListener('toggleElementInspector', function () {
    allowTouches = !allowTouches;
  });
}
function hasUnresolvedRefs(props) {
  var extract = function extract(refs) {
    if (!Array.isArray(refs)) {
      return refs && refs.current === null;
    }
    return refs.some(function (r) {
      return r && r.current === null;
    });
  };
  return extract(props['simultaneousHandlers']) || extract(props['waitFor']);
}
var stateToPropMappings = (_stateToPropMappings = {}, (0, _defineProperty3.default)(_stateToPropMappings, _State.State.UNDETERMINED, undefined), (0, _defineProperty3.default)(_stateToPropMappings, _State.State.BEGAN, 'onBegan'), (0, _defineProperty3.default)(_stateToPropMappings, _State.State.FAILED, 'onFailed'), (0, _defineProperty3.default)(_stateToPropMappings, _State.State.CANCELLED, 'onCancelled'), (0, _defineProperty3.default)(_stateToPropMappings, _State.State.ACTIVE, 'onActivated'), (0, _defineProperty3.default)(_stateToPropMappings, _State.State.END, 'onEnded'), _stateToPropMappings);
var UNRESOLVED_REFS_RETRY_LIMIT = 1;
function createHandler(_ref) {
  var name = _ref.name,
    _ref$allowedProps = _ref.allowedProps,
    allowedProps = _ref$allowedProps === void 0 ? [] : _ref$allowedProps,
    _ref$config = _ref.config,
    config = _ref$config === void 0 ? {} : _ref$config,
    transformProps = _ref.transformProps,
    _ref$customNativeProp = _ref.customNativeProps,
    customNativeProps = _ref$customNativeProp === void 0 ? [] : _ref$customNativeProp;
  var Handler = function (_React$Component) {
    (0, _inherits2.default)(Handler, _React$Component);
    var _super = _createSuper(Handler);
    function Handler(props) {
      var _this;
      (0, _classCallCheck2.default)(this, Handler);
      _this = _super.call(this, props);
      _defineProperty((0, _assertThisInitialized2.default)(_this), "handlerTag", void 0);
      _defineProperty((0, _assertThisInitialized2.default)(_this), "config", void 0);
      _defineProperty((0, _assertThisInitialized2.default)(_this), "propsRef", void 0);
      _defineProperty((0, _assertThisInitialized2.default)(_this), "viewNode", void 0);
      _defineProperty((0, _assertThisInitialized2.default)(_this), "viewTag", void 0);
      _defineProperty((0, _assertThisInitialized2.default)(_this), "updateEnqueued", null);
      _defineProperty((0, _assertThisInitialized2.default)(_this), "inspectorToggleListener", void 0);
      _defineProperty((0, _assertThisInitialized2.default)(_this), "onGestureHandlerEvent", function (event) {
        if (event.nativeEvent.handlerTag === _this.handlerTag) {
          if (typeof _this.props.onGestureEvent === 'function') {
            var _this$props$onGesture, _this$props;
            (_this$props$onGesture = (_this$props = _this.props).onGestureEvent) === null || _this$props$onGesture === void 0 ? void 0 : _this$props$onGesture.call(_this$props, event);
          }
        } else {
          var _this$props$onGesture2, _this$props2;
          (_this$props$onGesture2 = (_this$props2 = _this.props).onGestureHandlerEvent) === null || _this$props$onGesture2 === void 0 ? void 0 : _this$props$onGesture2.call(_this$props2, event);
        }
      });
      _defineProperty((0, _assertThisInitialized2.default)(_this), "onGestureHandlerStateChange", function (event) {
        if (event.nativeEvent.handlerTag === _this.handlerTag) {
          if (typeof _this.props.onHandlerStateChange === 'function') {
            var _this$props$onHandler, _this$props3;
            (_this$props$onHandler = (_this$props3 = _this.props).onHandlerStateChange) === null || _this$props$onHandler === void 0 ? void 0 : _this$props$onHandler.call(_this$props3, event);
          }
          var state = event.nativeEvent.state;
          var stateEventName = stateToPropMappings[state];
          var eventHandler = stateEventName && _this.props[stateEventName];
          if (eventHandler && typeof eventHandler === 'function') {
            eventHandler(event);
          }
        } else {
          var _this$props$onGesture3, _this$props4;
          (_this$props$onGesture3 = (_this$props4 = _this.props).onGestureHandlerStateChange) === null || _this$props$onGesture3 === void 0 ? void 0 : _this$props$onGesture3.call(_this$props4, event);
        }
      });
      _defineProperty((0, _assertThisInitialized2.default)(_this), "refHandler", function (node) {
        _this.viewNode = node;
        var child = React.Children.only(_this.props.children);
        var ref = child.ref;
        if (ref !== null) {
          if (typeof ref === 'function') {
            ref(node);
          } else {
            ref.current = node;
          }
        }
      });
      _defineProperty((0, _assertThisInitialized2.default)(_this), "createGestureHandler", function (newConfig) {
        _this.config = newConfig;
        _RNGestureHandlerModule.default.createGestureHandler(name, _this.handlerTag, newConfig);
      });
      _defineProperty((0, _assertThisInitialized2.default)(_this), "attachGestureHandler", function (newViewTag) {
        _this.viewTag = newViewTag;
        if (_reactNative.Platform.OS === 'web') {
          _RNGestureHandlerModule.default.attachGestureHandler(_this.handlerTag, newViewTag, _ActionType.ActionType.JS_FUNCTION_OLD_API, _this.propsRef);
        } else {
          (0, _handlersRegistry.registerOldGestureHandler)(_this.handlerTag, {
            onGestureEvent: _this.onGestureHandlerEvent,
            onGestureStateChange: _this.onGestureHandlerStateChange
          });
          var actionType = function () {
            var _this$props5, _this$props6;
            if ((_this$props5 = _this.props) !== null && _this$props5 !== void 0 && _this$props5.onGestureEvent && 'current' in _this.props.onGestureEvent) {
              return _ActionType.ActionType.REANIMATED_WORKLET;
            } else if ((_this$props6 = _this.props) !== null && _this$props6 !== void 0 && _this$props6.onGestureEvent && '__isNative' in _this.props.onGestureEvent) {
              return _ActionType.ActionType.NATIVE_ANIMATED_EVENT;
            } else {
              return _ActionType.ActionType.JS_FUNCTION_OLD_API;
            }
          }();
          _RNGestureHandlerModule.default.attachGestureHandler(_this.handlerTag, newViewTag, actionType);
        }
        (0, _gestureHandlerCommon.scheduleFlushOperations)();
      });
      _defineProperty((0, _assertThisInitialized2.default)(_this), "updateGestureHandler", function (newConfig) {
        _this.config = newConfig;
        _RNGestureHandlerModule.default.updateGestureHandler(_this.handlerTag, newConfig);
        (0, _gestureHandlerCommon.scheduleFlushOperations)();
      });
      _this.handlerTag = (0, _handlersRegistry.getNextHandlerTag)();
      _this.config = {};
      _this.propsRef = React.createRef();
      _this.state = {
        allowTouches: allowTouches
      };
      if (props.id) {
        if (_handlersRegistry.handlerIDToTag[props.id] !== undefined) {
          throw new Error("Handler with ID \"" + props.id + "\" already registered");
        }
        _handlersRegistry.handlerIDToTag[props.id] = _this.handlerTag;
      }
      return _this;
    }
    (0, _createClass2.default)(Handler, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this2 = this;
        var props = this.props;
        if (DEV_ON_ANDROID) {
          this.inspectorToggleListener = _reactNative.DeviceEventEmitter.addListener('toggleElementInspector', function () {
            _this2.setState(function (_) {
              return {
                allowTouches: allowTouches
              };
            });
            _this2.update(UNRESOLVED_REFS_RETRY_LIMIT);
          });
        }
        if (hasUnresolvedRefs(props)) {
          this.updateEnqueued = setImmediate(function () {
            _this2.updateEnqueued = null;
            _this2.update(UNRESOLVED_REFS_RETRY_LIMIT);
          });
        }
        this.createGestureHandler((0, _gestureHandlerCommon.filterConfig)(transformProps ? transformProps(this.props) : this.props, [].concat((0, _toConsumableArray2.default)(allowedProps), (0, _toConsumableArray2.default)(customNativeProps)), config));
        this.attachGestureHandler((0, _gestureHandlerCommon.findNodeHandle)(this.viewNode));
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate() {
        var viewTag = (0, _gestureHandlerCommon.findNodeHandle)(this.viewNode);
        if (this.viewTag !== viewTag) {
          this.attachGestureHandler(viewTag);
        }
        this.update(UNRESOLVED_REFS_RETRY_LIMIT);
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        var _this$inspectorToggle;
        (_this$inspectorToggle = this.inspectorToggleListener) === null || _this$inspectorToggle === void 0 ? void 0 : _this$inspectorToggle.remove();
        _RNGestureHandlerModule.default.dropGestureHandler(this.handlerTag);
        (0, _gestureHandlerCommon.scheduleFlushOperations)();
        if (this.updateEnqueued) {
          clearImmediate(this.updateEnqueued);
        }
        var handlerID = this.props.id;
        if (handlerID) {
          delete _handlersRegistry.handlerIDToTag[handlerID];
        }
      }
    }, {
      key: "update",
      value: function update(remainingTries) {
        var _this3 = this;
        var props = this.props;
        if (hasUnresolvedRefs(props) && remainingTries > 0) {
          this.updateEnqueued = setImmediate(function () {
            _this3.updateEnqueued = null;
            _this3.update(remainingTries - 1);
          });
        } else {
          var newConfig = (0, _gestureHandlerCommon.filterConfig)(transformProps ? transformProps(this.props) : this.props, [].concat((0, _toConsumableArray2.default)(allowedProps), (0, _toConsumableArray2.default)(customNativeProps)), config);
          if (!(0, _isEqual.default)(this.config, newConfig)) {
            this.updateGestureHandler(newConfig);
          }
        }
      }
    }, {
      key: "setNativeProps",
      value: function setNativeProps(updates) {
        var mergedProps = Object.assign({}, this.props, updates);
        var newConfig = (0, _gestureHandlerCommon.filterConfig)(transformProps ? transformProps(mergedProps) : mergedProps, [].concat((0, _toConsumableArray2.default)(allowedProps), (0, _toConsumableArray2.default)(customNativeProps)), config);
        this.updateGestureHandler(newConfig);
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props$testID;
        var gestureEventHandler = this.onGestureHandlerEvent;
        var _this$props7 = this.props,
          onGestureEvent = _this$props7.onGestureEvent,
          onGestureHandlerEvent = _this$props7.onGestureHandlerEvent;
        if (onGestureEvent && typeof onGestureEvent !== 'function') {
          if (onGestureHandlerEvent) {
            throw new Error('Nesting touch handlers with native animated driver is not supported yet');
          }
          gestureEventHandler = onGestureEvent;
        } else {
          if (onGestureHandlerEvent && typeof onGestureHandlerEvent !== 'function') {
            throw new Error('Nesting touch handlers with native animated driver is not supported yet');
          }
        }
        var gestureStateEventHandler = this.onGestureHandlerStateChange;
        var _this$props8 = this.props,
          onHandlerStateChange = _this$props8.onHandlerStateChange,
          onGestureHandlerStateChange = _this$props8.onGestureHandlerStateChange;
        if (onHandlerStateChange && typeof onHandlerStateChange !== 'function') {
          if (onGestureHandlerStateChange) {
            throw new Error('Nesting touch handlers with native animated driver is not supported yet');
          }
          gestureStateEventHandler = onHandlerStateChange;
        } else {
          if (onGestureHandlerStateChange && typeof onGestureHandlerStateChange !== 'function') {
            throw new Error('Nesting touch handlers with native animated driver is not supported yet');
          }
        }
        var events = {
          onGestureHandlerEvent: this.state.allowTouches ? gestureEventHandler : undefined,
          onGestureHandlerStateChange: this.state.allowTouches ? gestureStateEventHandler : undefined
        };
        this.propsRef.current = events;
        var child = null;
        try {
          child = React.Children.only(this.props.children);
        } catch (e) {
          throw new Error((0, _utils.tagMessage)(name + " got more than one view as a child. If you want the gesture to work on multiple views, wrap them with a common parent and attach the gesture to that view."));
        }
        var grandChildren = child.props.children;
        if (__DEV__ && child.type && (child.type === 'RNGestureHandlerButton' || child.type.name === 'View' || child.type.displayName === 'View')) {
          grandChildren = React.Children.toArray(grandChildren);
          grandChildren.push(React.createElement(_PressabilityDebugView.PressabilityDebugView, {
            key: "pressabilityDebugView",
            color: "mediumspringgreen",
            hitSlop: child.props.hitSlop
          }));
        }
        return React.cloneElement(child, Object.assign({
          ref: this.refHandler,
          collapsable: false
        }, (0, _utils.isJestEnv)() ? {
          handlerType: name,
          handlerTag: this.handlerTag
        } : {}, {
          testID: (_this$props$testID = this.props.testID) !== null && _this$props$testID !== void 0 ? _this$props$testID : child.props.testID
        }, events), grandChildren);
      }
    }]);
    return Handler;
  }(React.Component);
  _defineProperty(Handler, "displayName", name);
  return Handler;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,