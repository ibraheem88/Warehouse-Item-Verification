3bde2216185b077fdbb5bb96c05316c2
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _StyleSheet = _interopRequireDefault(require("../../StyleSheet/StyleSheet"));
var _Platform = _interopRequireDefault(require("../../Utilities/Platform"));
var _useMergeRefs = _interopRequireDefault(require("../../Utilities/useMergeRefs"));
var _AndroidSwitchNativeComponent = _interopRequireWildcard(require("./AndroidSwitchNativeComponent"));
var _SwitchNativeComponent = _interopRequireWildcard(require("./SwitchNativeComponent"));
var React = _interopRequireWildcard(require("react"));
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["disabled", "ios_backgroundColor", "onChange", "onValueChange", "style", "thumbColor", "trackColor", "value"];
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var returnsFalse = function returnsFalse() {
  return false;
};
var returnsTrue = function returnsTrue() {
  return true;
};
var SwitchWithForwardedRef = React.forwardRef(function Switch(props, forwardedRef) {
  var disabled = props.disabled,
    ios_backgroundColor = props.ios_backgroundColor,
    onChange = props.onChange,
    onValueChange = props.onValueChange,
    style = props.style,
    thumbColor = props.thumbColor,
    trackColor = props.trackColor,
    value = props.value,
    restProps = (0, _objectWithoutProperties2.default)(props, _excluded);
  var trackColorForFalse = trackColor == null ? void 0 : trackColor.false;
  var trackColorForTrue = trackColor == null ? void 0 : trackColor.true;
  var nativeSwitchRef = React.useRef(null);
  var ref = (0, _useMergeRefs.default)(nativeSwitchRef, forwardedRef);
  var _React$useState = React.useState({
      value: null
    }),
    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
    native = _React$useState2[0],
    setNative = _React$useState2[1];
  var handleChange = function handleChange(event) {
    onChange == null ? void 0 : onChange(event);
    onValueChange == null ? void 0 : onValueChange(event.nativeEvent.value);
    setNative({
      value: event.nativeEvent.value
    });
  };
  React.useLayoutEffect(function () {
    var _nativeSwitchRef$curr;
    var jsValue = value === true;
    var shouldUpdateNativeSwitch = native.value != null && native.value !== jsValue;
    if (shouldUpdateNativeSwitch && ((_nativeSwitchRef$curr = nativeSwitchRef.current) == null ? void 0 : _nativeSwitchRef$curr.setNativeProps) != null) {
      if (_Platform.default.OS === 'android') {
        _AndroidSwitchNativeComponent.Commands.setNativeValue(nativeSwitchRef.current, jsValue);
      } else {
        _SwitchNativeComponent.Commands.setValue(nativeSwitchRef.current, jsValue);
      }
    }
  }, [value, native]);
  if (_Platform.default.OS === 'android') {
    var _props$accessibilityR;
    var accessibilityState = restProps.accessibilityState;
    var _disabled = disabled != null ? disabled : accessibilityState == null ? void 0 : accessibilityState.disabled;
    var _accessibilityState = _disabled !== (accessibilityState == null ? void 0 : accessibilityState.disabled) ? Object.assign({}, accessibilityState, {
      disabled: _disabled
    }) : accessibilityState;
    var platformProps = {
      accessibilityState: _accessibilityState,
      enabled: _disabled !== true,
      on: value === true,
      style: style,
      thumbTintColor: thumbColor,
      trackColorForFalse: trackColorForFalse,
      trackColorForTrue: trackColorForTrue,
      trackTintColor: value === true ? trackColorForTrue : trackColorForFalse
    };
    return (0, _jsxRuntime.jsx)(_AndroidSwitchNativeComponent.default, Object.assign({}, restProps, platformProps, {
      accessibilityRole: (_props$accessibilityR = props.accessibilityRole) != null ? _props$accessibilityR : 'switch',
      onChange: handleChange,
      onResponderTerminationRequest: returnsFalse,
      onStartShouldSetResponder: returnsTrue,
      ref: ref
    }));
  } else {
    var _props$accessibilityR2;
    var _platformProps = {
      disabled: disabled,
      onTintColor: trackColorForTrue,
      style: _StyleSheet.default.compose({
        height: 31,
        width: 51
      }, _StyleSheet.default.compose(style, ios_backgroundColor == null ? null : {
        backgroundColor: ios_backgroundColor,
        borderRadius: 16
      })),
      thumbTintColor: thumbColor,
      tintColor: trackColorForFalse,
      value: value === true
    };
    return (0, _jsxRuntime.jsx)(_SwitchNativeComponent.default, Object.assign({}, restProps, _platformProps, {
      accessibilityRole: (_props$accessibilityR2 = props.accessibilityRole) != null ? _props$accessibilityR2 : 'switch',
      onChange: handleChange,
      onResponderTerminationRequest: returnsFalse,
      onStartShouldSetResponder: returnsTrue,
      ref: ref
    }));
  }
});
var _default = SwitchWithForwardedRef;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZXR1cm5zRmFsc2UiLCJyZXR1cm5zVHJ1ZSIsIlN3aXRjaFdpdGhGb3J3YXJkZWRSZWYiLCJSZWFjdCIsImZvcndhcmRSZWYiLCJTd2l0Y2giLCJwcm9wcyIsImZvcndhcmRlZFJlZiIsImRpc2FibGVkIiwiaW9zX2JhY2tncm91bmRDb2xvciIsIm9uQ2hhbmdlIiwib25WYWx1ZUNoYW5nZSIsInN0eWxlIiwidGh1bWJDb2xvciIsInRyYWNrQ29sb3IiLCJ2YWx1ZSIsInJlc3RQcm9wcyIsInRyYWNrQ29sb3JGb3JGYWxzZSIsImZhbHNlIiwidHJhY2tDb2xvckZvclRydWUiLCJ0cnVlIiwibmF0aXZlU3dpdGNoUmVmIiwidXNlUmVmIiwicmVmIiwidXNlTWVyZ2VSZWZzIiwidXNlU3RhdGUiLCJuYXRpdmUiLCJzZXROYXRpdmUiLCJoYW5kbGVDaGFuZ2UiLCJldmVudCIsIm5hdGl2ZUV2ZW50IiwidXNlTGF5b3V0RWZmZWN0IiwianNWYWx1ZSIsInNob3VsZFVwZGF0ZU5hdGl2ZVN3aXRjaCIsImN1cnJlbnQiLCJzZXROYXRpdmVQcm9wcyIsIlBsYXRmb3JtIiwiT1MiLCJBbmRyb2lkU3dpdGNoQ29tbWFuZHMiLCJzZXROYXRpdmVWYWx1ZSIsIlN3aXRjaENvbW1hbmRzIiwic2V0VmFsdWUiLCJhY2Nlc3NpYmlsaXR5U3RhdGUiLCJfZGlzYWJsZWQiLCJfYWNjZXNzaWJpbGl0eVN0YXRlIiwicGxhdGZvcm1Qcm9wcyIsImVuYWJsZWQiLCJvbiIsInRodW1iVGludENvbG9yIiwidHJhY2tUaW50Q29sb3IiLCJhY2Nlc3NpYmlsaXR5Um9sZSIsIm9uVGludENvbG9yIiwiU3R5bGVTaGVldCIsImNvbXBvc2UiLCJoZWlnaHQiLCJ3aWR0aCIsImJhY2tncm91bmRDb2xvciIsImJvcmRlclJhZGl1cyIsInRpbnRDb2xvciJdLCJzb3VyY2VzIjpbIlN3aXRjaC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3cgc3RyaWN0LWxvY2FsXG4gKiBAZm9ybWF0XG4gKiBAZ2VuZXJhdGUtZG9jc1xuICovXG5cbmltcG9ydCB0eXBlIHtDb2xvclZhbHVlfSBmcm9tICcuLi8uLi9TdHlsZVNoZWV0L1N0eWxlU2hlZXQnO1xuaW1wb3J0IHR5cGUge1N5bnRoZXRpY0V2ZW50fSBmcm9tICcuLi8uLi9UeXBlcy9Db3JlRXZlbnRUeXBlcyc7XG5pbXBvcnQgdHlwZSB7Vmlld1Byb3BzfSBmcm9tICcuLi9WaWV3L1ZpZXdQcm9wVHlwZXMnO1xuXG5pbXBvcnQgU3R5bGVTaGVldCBmcm9tICcuLi8uLi9TdHlsZVNoZWV0L1N0eWxlU2hlZXQnO1xuaW1wb3J0IFBsYXRmb3JtIGZyb20gJy4uLy4uL1V0aWxpdGllcy9QbGF0Zm9ybSc7XG5pbXBvcnQgdXNlTWVyZ2VSZWZzIGZyb20gJy4uLy4uL1V0aWxpdGllcy91c2VNZXJnZVJlZnMnO1xuaW1wb3J0IEFuZHJvaWRTd2l0Y2hOYXRpdmVDb21wb25lbnQsIHtcbiAgQ29tbWFuZHMgYXMgQW5kcm9pZFN3aXRjaENvbW1hbmRzLFxufSBmcm9tICcuL0FuZHJvaWRTd2l0Y2hOYXRpdmVDb21wb25lbnQnO1xuaW1wb3J0IFN3aXRjaE5hdGl2ZUNvbXBvbmVudCwge1xuICBDb21tYW5kcyBhcyBTd2l0Y2hDb21tYW5kcyxcbn0gZnJvbSAnLi9Td2l0Y2hOYXRpdmVDb21wb25lbnQnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG50eXBlIFN3aXRjaENoYW5nZUV2ZW50ID0gU3ludGhldGljRXZlbnQ8XG4gICRSZWFkT25seTx7fFxuICAgIHZhbHVlOiBib29sZWFuLFxuICAgIHRhcmdldDogbnVtYmVyLFxuICB8fT4sXG4+O1xuXG5leHBvcnQgdHlwZSBQcm9wcyA9ICRSZWFkT25seTx7fFxuICAuLi5WaWV3UHJvcHMsXG5cbiAgLyoqXG4gICAgSWYgdHJ1ZSB0aGUgdXNlciB3b24ndCBiZSBhYmxlIHRvIHRvZ2dsZSB0aGUgc3dpdGNoLlxuXG4gICAgQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVkPzogP2Jvb2xlYW4sXG5cbiAgLyoqXG4gICAgVGhlIHZhbHVlIG9mIHRoZSBzd2l0Y2guIElmIHRydWUgdGhlIHN3aXRjaCB3aWxsIGJlIHR1cm5lZCBvbi5cblxuICAgIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICB2YWx1ZT86ID9ib29sZWFuLFxuXG4gIC8qKlxuICAgIENvbG9yIG9mIHRoZSBmb3JlZ3JvdW5kIHN3aXRjaCBncmlwLiBJZiB0aGlzIGlzIHNldCBvbiBpT1MsIHRoZSBzd2l0Y2ggZ3JpcCB3aWxsIGxvc2UgaXRzIGRyb3Agc2hhZG93LlxuICAgKi9cbiAgdGh1bWJDb2xvcj86ID9Db2xvclZhbHVlLFxuXG4gIC8qKlxuICAgIEN1c3RvbSBjb2xvcnMgZm9yIHRoZSBzd2l0Y2ggdHJhY2suXG5cbiAgICBfaU9TXzogV2hlbiB0aGUgc3dpdGNoIHZhbHVlIGlzIGZhbHNlLCB0aGUgdHJhY2sgc2hyaW5rcyBpbnRvIHRoZSBib3JkZXIuIElmIHlvdSB3YW50IHRvIGNoYW5nZSB0aGVcbiAgICBjb2xvciBvZiB0aGUgYmFja2dyb3VuZCBleHBvc2VkIGJ5IHRoZSBzaHJ1bmtlbiB0cmFjaywgdXNlXG4gICAgIFtgaW9zX2JhY2tncm91bmRDb2xvcmBdKGh0dHBzOi8vcmVhY3RuYXRpdmUuZGV2L2RvY3Mvc3dpdGNoI2lvc19iYWNrZ3JvdW5kQ29sb3IpLlxuICAgKi9cbiAgdHJhY2tDb2xvcj86ID8kUmVhZE9ubHk8e3xcbiAgICBmYWxzZT86ID9Db2xvclZhbHVlLFxuICAgIHRydWU/OiA/Q29sb3JWYWx1ZSxcbiAgfH0+LFxuXG4gIC8qKlxuICAgIE9uIGlPUywgY3VzdG9tIGNvbG9yIGZvciB0aGUgYmFja2dyb3VuZC4gVGhpcyBiYWNrZ3JvdW5kIGNvbG9yIGNhbiBiZVxuICAgIHNlZW4gZWl0aGVyIHdoZW4gdGhlIHN3aXRjaCB2YWx1ZSBpcyBmYWxzZSBvciB3aGVuIHRoZSBzd2l0Y2ggaXNcbiAgICBkaXNhYmxlZCAoYW5kIHRoZSBzd2l0Y2ggaXMgdHJhbnNsdWNlbnQpLlxuICAgKi9cbiAgaW9zX2JhY2tncm91bmRDb2xvcj86ID9Db2xvclZhbHVlLFxuXG4gIC8qKlxuICAgIEludm9rZWQgd2hlbiB0aGUgdXNlciB0cmllcyB0byBjaGFuZ2UgdGhlIHZhbHVlIG9mIHRoZSBzd2l0Y2guIFJlY2VpdmVzXG4gICAgdGhlIGNoYW5nZSBldmVudCBhcyBhbiBhcmd1bWVudC4gSWYgeW91IHdhbnQgdG8gb25seSByZWNlaXZlIHRoZSBuZXdcbiAgICB2YWx1ZSwgdXNlIGBvblZhbHVlQ2hhbmdlYCBpbnN0ZWFkLlxuICAgKi9cbiAgb25DaGFuZ2U/OiA/KGV2ZW50OiBTd2l0Y2hDaGFuZ2VFdmVudCkgPT4gUHJvbWlzZTx2b2lkPiB8IHZvaWQsXG5cbiAgLyoqXG4gICAgSW52b2tlZCB3aGVuIHRoZSB1c2VyIHRyaWVzIHRvIGNoYW5nZSB0aGUgdmFsdWUgb2YgdGhlIHN3aXRjaC4gUmVjZWl2ZXNcbiAgICB0aGUgbmV3IHZhbHVlIGFzIGFuIGFyZ3VtZW50LiBJZiB5b3Ugd2FudCB0byBpbnN0ZWFkIHJlY2VpdmUgYW4gZXZlbnQsXG4gICAgdXNlIGBvbkNoYW5nZWAuXG4gICAqL1xuICBvblZhbHVlQ2hhbmdlPzogPyh2YWx1ZTogYm9vbGVhbikgPT4gUHJvbWlzZTx2b2lkPiB8IHZvaWQsXG58fT47XG5jb25zdCByZXR1cm5zRmFsc2UgPSAoKSA9PiBmYWxzZTtcbmNvbnN0IHJldHVybnNUcnVlID0gKCkgPT4gdHJ1ZTtcblxuLyoqXG4gIFJlbmRlcnMgYSBib29sZWFuIGlucHV0LlxuXG4gIFRoaXMgaXMgYSBjb250cm9sbGVkIGNvbXBvbmVudCB0aGF0IHJlcXVpcmVzIGFuIGBvblZhbHVlQ2hhbmdlYFxuICBjYWxsYmFjayB0aGF0IHVwZGF0ZXMgdGhlIGB2YWx1ZWAgcHJvcCBpbiBvcmRlciBmb3IgdGhlIGNvbXBvbmVudCB0b1xuICByZWZsZWN0IHVzZXIgYWN0aW9ucy4gSWYgdGhlIGB2YWx1ZWAgcHJvcCBpcyBub3QgdXBkYXRlZCwgdGhlXG4gIGNvbXBvbmVudCB3aWxsIGNvbnRpbnVlIHRvIHJlbmRlciB0aGUgc3VwcGxpZWQgYHZhbHVlYCBwcm9wIGluc3RlYWQgb2ZcbiAgdGhlIGV4cGVjdGVkIHJlc3VsdCBvZiBhbnkgdXNlciBhY3Rpb25zLlxuXG4gIGBgYFNuYWNrUGxheWVyIG5hbWU9U3dpdGNoXG4gIGltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuICBpbXBvcnQgeyBWaWV3LCBTd2l0Y2gsIFN0eWxlU2hlZXQgfSBmcm9tIFwicmVhY3QtbmF0aXZlXCI7XG5cbiAgY29uc3QgQXBwID0gKCkgPT4ge1xuICAgIGNvbnN0IFtpc0VuYWJsZWQsIHNldElzRW5hYmxlZF0gPSB1c2VTdGF0ZShmYWxzZSk7XG4gICAgY29uc3QgdG9nZ2xlU3dpdGNoID0gKCkgPT4gc2V0SXNFbmFibGVkKHByZXZpb3VzU3RhdGUgPT4gIXByZXZpb3VzU3RhdGUpO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxWaWV3IHN0eWxlPXtzdHlsZXMuY29udGFpbmVyfT5cbiAgICAgICAgPFN3aXRjaFxuICAgICAgICAgIHRyYWNrQ29sb3I9e3sgZmFsc2U6IFwiIzc2NzU3N1wiLCB0cnVlOiBcIiM4MWIwZmZcIiB9fVxuICAgICAgICAgIHRodW1iQ29sb3I9e2lzRW5hYmxlZCA/IFwiI2Y1ZGQ0YlwiIDogXCIjZjRmM2Y0XCJ9XG4gICAgICAgICAgaW9zX2JhY2tncm91bmRDb2xvcj1cIiMzZTNlM2VcIlxuICAgICAgICAgIG9uVmFsdWVDaGFuZ2U9e3RvZ2dsZVN3aXRjaH1cbiAgICAgICAgICB2YWx1ZT17aXNFbmFibGVkfVxuICAgICAgICAvPlxuICAgICAgPC9WaWV3PlxuICAgICk7XG4gIH1cblxuICBjb25zdCBzdHlsZXMgPSBTdHlsZVNoZWV0LmNyZWF0ZSh7XG4gICAgY29udGFpbmVyOiB7XG4gICAgICBmbGV4OiAxLFxuICAgICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgICAgIGp1c3RpZnlDb250ZW50OiBcImNlbnRlclwiXG4gICAgfVxuICB9KTtcblxuICBleHBvcnQgZGVmYXVsdCBBcHA7XG4gIGBgYFxuICovXG5cbmNvbnN0IFN3aXRjaFdpdGhGb3J3YXJkZWRSZWY6IFJlYWN0LkFic3RyYWN0Q29tcG9uZW50PFxuICBQcm9wcyxcbiAgUmVhY3QuRWxlbWVudFJlZjxcbiAgICB0eXBlb2YgU3dpdGNoTmF0aXZlQ29tcG9uZW50IHwgdHlwZW9mIEFuZHJvaWRTd2l0Y2hOYXRpdmVDb21wb25lbnQsXG4gID4sXG4+ID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBTd2l0Y2gocHJvcHMsIGZvcndhcmRlZFJlZik6IFJlYWN0Lk5vZGUge1xuICBjb25zdCB7XG4gICAgZGlzYWJsZWQsXG4gICAgaW9zX2JhY2tncm91bmRDb2xvcixcbiAgICBvbkNoYW5nZSxcbiAgICBvblZhbHVlQ2hhbmdlLFxuICAgIHN0eWxlLFxuICAgIHRodW1iQ29sb3IsXG4gICAgdHJhY2tDb2xvcixcbiAgICB2YWx1ZSxcbiAgICAuLi5yZXN0UHJvcHNcbiAgfSA9IHByb3BzO1xuICBjb25zdCB0cmFja0NvbG9yRm9yRmFsc2UgPSB0cmFja0NvbG9yPy5mYWxzZTtcbiAgY29uc3QgdHJhY2tDb2xvckZvclRydWUgPSB0cmFja0NvbG9yPy50cnVlO1xuXG4gIGNvbnN0IG5hdGl2ZVN3aXRjaFJlZiA9IFJlYWN0LnVzZVJlZjxSZWFjdC5FbGVtZW50UmVmPFxuICAgIHR5cGVvZiBTd2l0Y2hOYXRpdmVDb21wb25lbnQgfCB0eXBlb2YgQW5kcm9pZFN3aXRjaE5hdGl2ZUNvbXBvbmVudCxcbiAgPiB8IG51bGw+KG51bGwpO1xuXG4gIGNvbnN0IHJlZiA9IHVzZU1lcmdlUmVmcyhuYXRpdmVTd2l0Y2hSZWYsIGZvcndhcmRlZFJlZik7XG5cbiAgY29uc3QgW25hdGl2ZSwgc2V0TmF0aXZlXSA9IFJlYWN0LnVzZVN0YXRlKHt2YWx1ZTogbnVsbH0pO1xuXG4gIGNvbnN0IGhhbmRsZUNoYW5nZSA9IChldmVudDogU3dpdGNoQ2hhbmdlRXZlbnQpID0+IHtcbiAgICBvbkNoYW5nZT8uKGV2ZW50KTtcbiAgICBvblZhbHVlQ2hhbmdlPy4oZXZlbnQubmF0aXZlRXZlbnQudmFsdWUpO1xuICAgIHNldE5hdGl2ZSh7dmFsdWU6IGV2ZW50Lm5hdGl2ZUV2ZW50LnZhbHVlfSk7XG4gIH07XG5cbiAgUmVhY3QudXNlTGF5b3V0RWZmZWN0KCgpID0+IHtcbiAgICAvLyBUaGlzIGlzIG5lY2Vzc2FyeSBpbiBjYXNlIG5hdGl2ZSB1cGRhdGVzIHRoZSBzd2l0Y2ggYW5kIEpTIGRlY2lkZXNcbiAgICAvLyB0aGF0IHRoZSB1cGRhdGUgc2hvdWxkIGJlIGlnbm9yZWQgYW5kIHdlIHNob3VsZCBzdGljayB3aXRoIHRoZSB2YWx1ZVxuICAgIC8vIHRoYXQgd2UgaGF2ZSBpbiBKUy5cbiAgICBjb25zdCBqc1ZhbHVlID0gdmFsdWUgPT09IHRydWU7XG4gICAgY29uc3Qgc2hvdWxkVXBkYXRlTmF0aXZlU3dpdGNoID1cbiAgICAgIG5hdGl2ZS52YWx1ZSAhPSBudWxsICYmIG5hdGl2ZS52YWx1ZSAhPT0ganNWYWx1ZTtcbiAgICBpZiAoXG4gICAgICBzaG91bGRVcGRhdGVOYXRpdmVTd2l0Y2ggJiZcbiAgICAgIG5hdGl2ZVN3aXRjaFJlZi5jdXJyZW50Py5zZXROYXRpdmVQcm9wcyAhPSBudWxsXG4gICAgKSB7XG4gICAgICBpZiAoUGxhdGZvcm0uT1MgPT09ICdhbmRyb2lkJykge1xuICAgICAgICBBbmRyb2lkU3dpdGNoQ29tbWFuZHMuc2V0TmF0aXZlVmFsdWUobmF0aXZlU3dpdGNoUmVmLmN1cnJlbnQsIGpzVmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgU3dpdGNoQ29tbWFuZHMuc2V0VmFsdWUobmF0aXZlU3dpdGNoUmVmLmN1cnJlbnQsIGpzVmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfSwgW3ZhbHVlLCBuYXRpdmVdKTtcblxuICBpZiAoUGxhdGZvcm0uT1MgPT09ICdhbmRyb2lkJykge1xuICAgIGNvbnN0IHthY2Nlc3NpYmlsaXR5U3RhdGV9ID0gcmVzdFByb3BzO1xuICAgIGNvbnN0IF9kaXNhYmxlZCA9XG4gICAgICBkaXNhYmxlZCAhPSBudWxsID8gZGlzYWJsZWQgOiBhY2Nlc3NpYmlsaXR5U3RhdGU/LmRpc2FibGVkO1xuXG4gICAgY29uc3QgX2FjY2Vzc2liaWxpdHlTdGF0ZSA9XG4gICAgICBfZGlzYWJsZWQgIT09IGFjY2Vzc2liaWxpdHlTdGF0ZT8uZGlzYWJsZWRcbiAgICAgICAgPyB7Li4uYWNjZXNzaWJpbGl0eVN0YXRlLCBkaXNhYmxlZDogX2Rpc2FibGVkfVxuICAgICAgICA6IGFjY2Vzc2liaWxpdHlTdGF0ZTtcblxuICAgIGNvbnN0IHBsYXRmb3JtUHJvcHMgPSB7XG4gICAgICBhY2Nlc3NpYmlsaXR5U3RhdGU6IF9hY2Nlc3NpYmlsaXR5U3RhdGUsXG4gICAgICBlbmFibGVkOiBfZGlzYWJsZWQgIT09IHRydWUsXG4gICAgICBvbjogdmFsdWUgPT09IHRydWUsXG4gICAgICBzdHlsZSxcbiAgICAgIHRodW1iVGludENvbG9yOiB0aHVtYkNvbG9yLFxuICAgICAgdHJhY2tDb2xvckZvckZhbHNlOiB0cmFja0NvbG9yRm9yRmFsc2UsXG4gICAgICB0cmFja0NvbG9yRm9yVHJ1ZTogdHJhY2tDb2xvckZvclRydWUsXG4gICAgICB0cmFja1RpbnRDb2xvcjogdmFsdWUgPT09IHRydWUgPyB0cmFja0NvbG9yRm9yVHJ1ZSA6IHRyYWNrQ29sb3JGb3JGYWxzZSxcbiAgICB9O1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxBbmRyb2lkU3dpdGNoTmF0aXZlQ29tcG9uZW50XG4gICAgICAgIHsuLi5yZXN0UHJvcHN9XG4gICAgICAgIHsuLi5wbGF0Zm9ybVByb3BzfVxuICAgICAgICBhY2Nlc3NpYmlsaXR5Um9sZT17cHJvcHMuYWNjZXNzaWJpbGl0eVJvbGUgPz8gJ3N3aXRjaCd9XG4gICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2V9XG4gICAgICAgIG9uUmVzcG9uZGVyVGVybWluYXRpb25SZXF1ZXN0PXtyZXR1cm5zRmFsc2V9XG4gICAgICAgIG9uU3RhcnRTaG91bGRTZXRSZXNwb25kZXI9e3JldHVybnNUcnVlfVxuICAgICAgICByZWY9e3JlZn1cbiAgICAgIC8+XG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBwbGF0Zm9ybVByb3BzID0ge1xuICAgICAgZGlzYWJsZWQsXG4gICAgICBvblRpbnRDb2xvcjogdHJhY2tDb2xvckZvclRydWUsXG4gICAgICBzdHlsZTogU3R5bGVTaGVldC5jb21wb3NlKFxuICAgICAgICB7aGVpZ2h0OiAzMSwgd2lkdGg6IDUxfSxcbiAgICAgICAgU3R5bGVTaGVldC5jb21wb3NlKFxuICAgICAgICAgIHN0eWxlLFxuICAgICAgICAgIGlvc19iYWNrZ3JvdW5kQ29sb3IgPT0gbnVsbFxuICAgICAgICAgICAgPyBudWxsXG4gICAgICAgICAgICA6IHtcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGlvc19iYWNrZ3JvdW5kQ29sb3IsXG4gICAgICAgICAgICAgICAgYm9yZGVyUmFkaXVzOiAxNixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgKSxcbiAgICAgICksXG4gICAgICB0aHVtYlRpbnRDb2xvcjogdGh1bWJDb2xvcixcbiAgICAgIHRpbnRDb2xvcjogdHJhY2tDb2xvckZvckZhbHNlLFxuICAgICAgdmFsdWU6IHZhbHVlID09PSB0cnVlLFxuICAgIH07XG5cbiAgICByZXR1cm4gKFxuICAgICAgPFN3aXRjaE5hdGl2ZUNvbXBvbmVudFxuICAgICAgICB7Li4ucmVzdFByb3BzfVxuICAgICAgICB7Li4ucGxhdGZvcm1Qcm9wc31cbiAgICAgICAgYWNjZXNzaWJpbGl0eVJvbGU9e3Byb3BzLmFjY2Vzc2liaWxpdHlSb2xlID8/ICdzd2l0Y2gnfVxuICAgICAgICBvbkNoYW5nZT17aGFuZGxlQ2hhbmdlfVxuICAgICAgICBvblJlc3BvbmRlclRlcm1pbmF0aW9uUmVxdWVzdD17cmV0dXJuc0ZhbHNlfVxuICAgICAgICBvblN0YXJ0U2hvdWxkU2V0UmVzcG9uZGVyPXtyZXR1cm5zVHJ1ZX1cbiAgICAgICAgcmVmPXtyZWZ9XG4gICAgICAvPlxuICAgICk7XG4gIH1cbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBTd2l0Y2hXaXRoRm9yd2FyZGVkUmVmO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBZUE7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUdBO0FBQStCO0FBQUE7QUFBQTtBQUFBO0FBZ0UvQixJQUFNQSxZQUFZLEdBQUcsU0FBZkEsWUFBWTtFQUFBLE9BQVMsS0FBSztBQUFBO0FBQ2hDLElBQU1DLFdBQVcsR0FBRyxTQUFkQSxXQUFXO0VBQUEsT0FBUyxJQUFJO0FBQUE7QUE0QzlCLElBQU1DLHNCQUtMLEdBQUdDLEtBQUssQ0FBQ0MsVUFBVSxDQUFDLFNBQVNDLE1BQU0sQ0FBQ0MsS0FBSyxFQUFFQyxZQUFZLEVBQWM7RUFDcEUsSUFDRUMsUUFBUSxHQVNORixLQUFLLENBVFBFLFFBQVE7SUFDUkMsbUJBQW1CLEdBUWpCSCxLQUFLLENBUlBHLG1CQUFtQjtJQUNuQkMsUUFBUSxHQU9OSixLQUFLLENBUFBJLFFBQVE7SUFDUkMsYUFBYSxHQU1YTCxLQUFLLENBTlBLLGFBQWE7SUFDYkMsS0FBSyxHQUtITixLQUFLLENBTFBNLEtBQUs7SUFDTEMsVUFBVSxHQUlSUCxLQUFLLENBSlBPLFVBQVU7SUFDVkMsVUFBVSxHQUdSUixLQUFLLENBSFBRLFVBQVU7SUFDVkMsS0FBSyxHQUVIVCxLQUFLLENBRlBTLEtBQUs7SUFDRkMsU0FBUywwQ0FDVlYsS0FBSztFQUNULElBQU1XLGtCQUFrQixHQUFHSCxVQUFVLG9CQUFWQSxVQUFVLENBQUVJLEtBQUs7RUFDNUMsSUFBTUMsaUJBQWlCLEdBQUdMLFVBQVUsb0JBQVZBLFVBQVUsQ0FBRU0sSUFBSTtFQUUxQyxJQUFNQyxlQUFlLEdBQUdsQixLQUFLLENBQUNtQixNQUFNLENBRTFCLElBQUksQ0FBQztFQUVmLElBQU1DLEdBQUcsR0FBRyxJQUFBQyxxQkFBWSxFQUFDSCxlQUFlLEVBQUVkLFlBQVksQ0FBQztFQUV2RCxzQkFBNEJKLEtBQUssQ0FBQ3NCLFFBQVEsQ0FBQztNQUFDVixLQUFLLEVBQUU7SUFBSSxDQUFDLENBQUM7SUFBQTtJQUFsRFcsTUFBTTtJQUFFQyxTQUFTO0VBRXhCLElBQU1DLFlBQVksR0FBRyxTQUFmQSxZQUFZLENBQUlDLEtBQXdCLEVBQUs7SUFDakRuQixRQUFRLG9CQUFSQSxRQUFRLENBQUdtQixLQUFLLENBQUM7SUFDakJsQixhQUFhLG9CQUFiQSxhQUFhLENBQUdrQixLQUFLLENBQUNDLFdBQVcsQ0FBQ2YsS0FBSyxDQUFDO0lBQ3hDWSxTQUFTLENBQUM7TUFBQ1osS0FBSyxFQUFFYyxLQUFLLENBQUNDLFdBQVcsQ0FBQ2Y7SUFBSyxDQUFDLENBQUM7RUFDN0MsQ0FBQztFQUVEWixLQUFLLENBQUM0QixlQUFlLENBQUMsWUFBTTtJQUFBO0lBSTFCLElBQU1DLE9BQU8sR0FBR2pCLEtBQUssS0FBSyxJQUFJO0lBQzlCLElBQU1rQix3QkFBd0IsR0FDNUJQLE1BQU0sQ0FBQ1gsS0FBSyxJQUFJLElBQUksSUFBSVcsTUFBTSxDQUFDWCxLQUFLLEtBQUtpQixPQUFPO0lBQ2xELElBQ0VDLHdCQUF3QixJQUN4QiwwQkFBQVosZUFBZSxDQUFDYSxPQUFPLHFCQUF2QixzQkFBeUJDLGNBQWMsS0FBSSxJQUFJLEVBQy9DO01BQ0EsSUFBSUMsaUJBQVEsQ0FBQ0MsRUFBRSxLQUFLLFNBQVMsRUFBRTtRQUM3QkMsc0NBQXFCLENBQUNDLGNBQWMsQ0FBQ2xCLGVBQWUsQ0FBQ2EsT0FBTyxFQUFFRixPQUFPLENBQUM7TUFDeEUsQ0FBQyxNQUFNO1FBQ0xRLCtCQUFjLENBQUNDLFFBQVEsQ0FBQ3BCLGVBQWUsQ0FBQ2EsT0FBTyxFQUFFRixPQUFPLENBQUM7TUFDM0Q7SUFDRjtFQUNGLENBQUMsRUFBRSxDQUFDakIsS0FBSyxFQUFFVyxNQUFNLENBQUMsQ0FBQztFQUVuQixJQUFJVSxpQkFBUSxDQUFDQyxFQUFFLEtBQUssU0FBUyxFQUFFO0lBQUE7SUFDN0IsSUFBT0ssa0JBQWtCLEdBQUkxQixTQUFTLENBQS9CMEIsa0JBQWtCO0lBQ3pCLElBQU1DLFNBQVMsR0FDYm5DLFFBQVEsSUFBSSxJQUFJLEdBQUdBLFFBQVEsR0FBR2tDLGtCQUFrQixvQkFBbEJBLGtCQUFrQixDQUFFbEMsUUFBUTtJQUU1RCxJQUFNb0MsbUJBQW1CLEdBQ3ZCRCxTQUFTLE1BQUtELGtCQUFrQixvQkFBbEJBLGtCQUFrQixDQUFFbEMsUUFBUSxzQkFDbENrQyxrQkFBa0I7TUFBRWxDLFFBQVEsRUFBRW1DO0lBQVMsS0FDM0NELGtCQUFrQjtJQUV4QixJQUFNRyxhQUFhLEdBQUc7TUFDcEJILGtCQUFrQixFQUFFRSxtQkFBbUI7TUFDdkNFLE9BQU8sRUFBRUgsU0FBUyxLQUFLLElBQUk7TUFDM0JJLEVBQUUsRUFBRWhDLEtBQUssS0FBSyxJQUFJO01BQ2xCSCxLQUFLLEVBQUxBLEtBQUs7TUFDTG9DLGNBQWMsRUFBRW5DLFVBQVU7TUFDMUJJLGtCQUFrQixFQUFFQSxrQkFBa0I7TUFDdENFLGlCQUFpQixFQUFFQSxpQkFBaUI7TUFDcEM4QixjQUFjLEVBQUVsQyxLQUFLLEtBQUssSUFBSSxHQUFHSSxpQkFBaUIsR0FBR0Y7SUFDdkQsQ0FBQztJQUVELE9BQ0UscUJBQUMscUNBQTRCLG9CQUN2QkQsU0FBUyxFQUNUNkIsYUFBYTtNQUNqQixpQkFBaUIsMkJBQUV2QyxLQUFLLENBQUM0QyxpQkFBaUIsb0NBQUksUUFBUztNQUN2RCxRQUFRLEVBQUV0QixZQUFhO01BQ3ZCLDZCQUE2QixFQUFFNUIsWUFBYTtNQUM1Qyx5QkFBeUIsRUFBRUMsV0FBWTtNQUN2QyxHQUFHLEVBQUVzQjtJQUFJLEdBQ1Q7RUFFTixDQUFDLE1BQU07SUFBQTtJQUNMLElBQU1zQixjQUFhLEdBQUc7TUFDcEJyQyxRQUFRLEVBQVJBLFFBQVE7TUFDUjJDLFdBQVcsRUFBRWhDLGlCQUFpQjtNQUM5QlAsS0FBSyxFQUFFd0MsbUJBQVUsQ0FBQ0MsT0FBTyxDQUN2QjtRQUFDQyxNQUFNLEVBQUUsRUFBRTtRQUFFQyxLQUFLLEVBQUU7TUFBRSxDQUFDLEVBQ3ZCSCxtQkFBVSxDQUFDQyxPQUFPLENBQ2hCekMsS0FBSyxFQUNMSCxtQkFBbUIsSUFBSSxJQUFJLEdBQ3ZCLElBQUksR0FDSjtRQUNFK0MsZUFBZSxFQUFFL0MsbUJBQW1CO1FBQ3BDZ0QsWUFBWSxFQUFFO01BQ2hCLENBQUMsQ0FDTixDQUNGO01BQ0RULGNBQWMsRUFBRW5DLFVBQVU7TUFDMUI2QyxTQUFTLEVBQUV6QyxrQkFBa0I7TUFDN0JGLEtBQUssRUFBRUEsS0FBSyxLQUFLO0lBQ25CLENBQUM7SUFFRCxPQUNFLHFCQUFDLDhCQUFxQixvQkFDaEJDLFNBQVMsRUFDVDZCLGNBQWE7TUFDakIsaUJBQWlCLDRCQUFFdkMsS0FBSyxDQUFDNEMsaUJBQWlCLHFDQUFJLFFBQVM7TUFDdkQsUUFBUSxFQUFFdEIsWUFBYTtNQUN2Qiw2QkFBNkIsRUFBRTVCLFlBQWE7TUFDNUMseUJBQXlCLEVBQUVDLFdBQVk7TUFDdkMsR0FBRyxFQUFFc0I7SUFBSSxHQUNUO0VBRU47QUFDRixDQUFDLENBQUM7QUFBQyxlQUVZckIsc0JBQXNCO0FBQUEifQ==