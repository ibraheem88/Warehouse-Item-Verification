{"version":3,"mappings":"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","names":["DRAG_TOSS","IDLE","DRAGGING","SETTLING","DrawerLayout","constructor","props","_defineProperty","React","createRef","state","drawerPosition","drawerWidth","drawerType","dragXValue","dragX","touchXValue","touchX","drawerTranslation","containerWidth","Animated","multiply","Value","add","setValue","translationX","startPositionX","dragOffsetFromOnStartPosition","interpolate","inputRange","outputRange","openValue","extrapolate","gestureOptions","useNativeDriver","useNativeAnimations","onDrawerSlide","listener","ev","Math","floor","abs","nativeEvent","position","onGestureEvent","event","x","setState","layout","width","newState","drawerWillShow","onDrawerStateChanged","oldState","State","ACTIVE","handleRelease","emitStateChanged","drawerState","keyboardDismissMode","Keyboard","dismiss","hideStatusBar","StatusBar","setHidden","statusBarAnimation","drawerShown","drawerLockMode","closeDrawer","velocityX","gestureStartX","dragOffsetBasedOnStart","startOffsetX","projOffsetX","shouldOpen","animateDrawer","showing","accessibilityIsModalView","current","setNativeProps","accessibilityViewIsModal","pointerEventsView","pointerEvents","minSwipeDistance","edgeWidth","fromLeft","gestureOrientation","hitSlop","left","undefined","right","panGestureHandler","activeOffsetX","fromValue","toValue","velocity","speed","nextFramePosition","min","max","willShow","updateShowing","spring","bounciness","start","finished","drawerOpened","onDrawerOpen","onDrawerClose","options","forceUpdate","overlayOpacity","dynamicOverlayStyles","opacity","backgroundColor","overlayColor","_TapGestureHandler","onHandlerStateChange","onTapHandlerStateChange","_reactNative","View","ref","style","styles","overlay","drawerBackgroundColor","drawerContainerStyle","contentContainerStyle","drawerSlide","containerSlide","reverseContentDirection","I18nManager","isRTL","dynamicDrawerStyles","containerStyles","containerTranslateX","transform","translateX","drawerTranslateX","closedDrawerOffset","drawerStyles","flexDirection","main","onLayout","handleContainerLayout","containerOnBack","containerInFront","importantForAccessibility","children","renderOverlay","drawerContainer","renderNavigationView","onGestureRef","updateAnimatedEvent","shouldComponentUpdate","render","_PanGestureHandler","userSelect","setPanGestureRef","failOffsetY","openingHandlerStateChange","enableTrackpadTwoFingerGesture","enabled","renderDrawer","Component","Left","Right","StyleSheet","create","absoluteFillObject","zIndex","flex","overflow"],"sources":["DrawerLayout.tsx"],"sourcesContent":["// This component is based on RN's DrawerLayoutAndroid API\n//\n// It perhaps deserves to be put in a separate repo, but since it relies on\n// react-native-gesture-handler library which isn't very popular at the moment I\n// decided to keep it here for the time being. It will allow us to move faster\n// and fix issues that may arise in gesture handler library that could be found\n// when using the drawer component\n\nimport * as React from 'react';\nimport { Component } from 'react';\nimport invariant from 'invariant';\nimport {\n  Animated,\n  StyleSheet,\n  View,\n  Keyboard,\n  StatusBar,\n  I18nManager,\n  StatusBarAnimation,\n  StyleProp,\n  ViewStyle,\n  LayoutChangeEvent,\n  NativeSyntheticEvent,\n} from 'react-native';\n\nimport {\n  GestureEvent,\n  HandlerStateChangeEvent,\n  UserSelect,\n} from '../handlers/gestureHandlerCommon';\nimport {\n  PanGestureHandler,\n  PanGestureHandlerEventPayload,\n} from '../handlers/PanGestureHandler';\nimport {\n  TapGestureHandler,\n  TapGestureHandlerEventPayload,\n} from '../handlers/TapGestureHandler';\nimport { State } from '../State';\n\nconst DRAG_TOSS = 0.05;\n\nconst IDLE: DrawerState = 'Idle';\nconst DRAGGING: DrawerState = 'Dragging';\nconst SETTLING: DrawerState = 'Settling';\n\nexport type DrawerPosition = 'left' | 'right';\n\nexport type DrawerState = 'Idle' | 'Dragging' | 'Settling';\n\nexport type DrawerType = 'front' | 'back' | 'slide';\n\nexport type DrawerLockMode = 'unlocked' | 'locked-closed' | 'locked-open';\n\nexport type DrawerKeyboardDismissMode = 'none' | 'on-drag';\n\n// Animated.AnimatedInterpolation has been converted to a generic type\n// in @types/react-native 0.70. This way we can maintain compatibility\n// with all versions of @types/react-native`\ntype AnimatedInterpolation = ReturnType<Animated.Value['interpolate']>;\nexport interface DrawerLayoutProps {\n  /**\n   * This attribute is present in the standard implementation already and is one\n   * of the required params. Gesture handler version of DrawerLayout make it\n   * possible for the function passed as `renderNavigationView` to take an\n   * Animated value as a parameter that indicates the progress of drawer\n   * opening/closing animation (progress value is 0 when closed and 1 when\n   * opened). This can be used by the drawer component to animated its children\n   * while the drawer is opening or closing.\n   */\n  renderNavigationView: (\n    progressAnimatedValue: Animated.Value\n  ) => React.ReactNode;\n\n  drawerPosition?: DrawerPosition;\n\n  drawerWidth?: number;\n\n  drawerBackgroundColor?: string;\n\n  drawerLockMode?: DrawerLockMode;\n\n  keyboardDismissMode?: DrawerKeyboardDismissMode;\n\n  /**\n   * Called when the drawer is closed.\n   */\n  onDrawerClose?: () => void;\n\n  /**\n   * Called when the drawer is opened.\n   */\n  onDrawerOpen?: () => void;\n\n  /**\n   * Called when the status of the drawer changes.\n   */\n  onDrawerStateChanged?: (\n    newState: DrawerState,\n    drawerWillShow: boolean\n  ) => void;\n  useNativeAnimations?: boolean;\n\n  drawerType?: DrawerType;\n\n  /**\n   * Defines how far from the edge of the content view the gesture should\n   * activate.\n   */\n  edgeWidth?: number;\n\n  minSwipeDistance?: number;\n\n  /**\n   * When set to true Drawer component will use\n   * {@link https://reactnative.dev/docs/statusbar StatusBar} API to hide the OS\n   * status bar whenever the drawer is pulled or when its in an \"open\" state.\n   */\n  hideStatusBar?: boolean;\n\n  /**\n   * @default 'slide'\n   *\n   * Can be used when hideStatusBar is set to true and will select the animation\n   * used for hiding/showing the status bar. See\n   * {@link https://reactnative.dev/docs/statusbar StatusBar} documentation for\n   * more details\n   */\n  statusBarAnimation?: StatusBarAnimation;\n\n  /**\n   * @default black\n   *\n   * Color of a semi-transparent overlay to be displayed on top of the content\n   * view when drawer gets open. A solid color should be used as the opacity is\n   * added by the Drawer itself and the opacity of the overlay is animated (from\n   * 0% to 70%).\n   */\n  overlayColor?: string;\n\n  contentContainerStyle?: StyleProp<ViewStyle>;\n\n  drawerContainerStyle?: StyleProp<ViewStyle>;\n\n  /**\n   * Enables two-finger gestures on supported devices, for example iPads with\n   * trackpads. If not enabled the gesture will require click + drag, with\n   * `enableTrackpadTwoFingerGesture` swiping with two fingers will also trigger\n   * the gesture.\n   */\n  enableTrackpadTwoFingerGesture?: boolean;\n\n  onDrawerSlide?: (position: number) => void;\n\n  onGestureRef?: (ref: PanGestureHandler) => void;\n\n  // implicit `children` prop has been removed in @types/react^18.0.0\n  children?:\n    | React.ReactNode\n    | ((openValue?: AnimatedInterpolation) => React.ReactNode);\n\n  /**\n   * @default 'none'\n   * Defines which userSelect property should be used.\n   * Values: 'none'|'text'|'auto'\n   */\n  userSelect?: UserSelect;\n}\n\nexport type DrawerLayoutState = {\n  dragX: Animated.Value;\n  touchX: Animated.Value;\n  drawerTranslation: Animated.Value;\n  containerWidth: number;\n  drawerState: DrawerState;\n  drawerOpened: boolean;\n};\n\nexport type DrawerMovementOption = {\n  velocity?: number;\n  speed?: number;\n};\nexport default class DrawerLayout extends Component<\n  DrawerLayoutProps,\n  DrawerLayoutState\n> {\n  static defaultProps = {\n    drawerWidth: 200,\n    drawerPosition: 'left',\n    useNativeAnimations: true,\n    drawerType: 'front',\n    edgeWidth: 20,\n    minSwipeDistance: 3,\n    overlayColor: 'rgba(0, 0, 0, 0.7)',\n    drawerLockMode: 'unlocked',\n    enableTrackpadTwoFingerGesture: false,\n  };\n\n  constructor(props: DrawerLayoutProps) {\n    super(props);\n\n    const dragX = new Animated.Value(0);\n    const touchX = new Animated.Value(0);\n    const drawerTranslation = new Animated.Value(0);\n\n    this.state = {\n      dragX,\n      touchX,\n      drawerTranslation,\n      containerWidth: 0,\n      drawerState: IDLE,\n      drawerOpened: false,\n    };\n\n    this.updateAnimatedEvent(props, this.state);\n  }\n\n  shouldComponentUpdate(props: DrawerLayoutProps, state: DrawerLayoutState) {\n    if (\n      this.props.drawerPosition !== props.drawerPosition ||\n      this.props.drawerWidth !== props.drawerWidth ||\n      this.props.drawerType !== props.drawerType ||\n      this.state.containerWidth !== state.containerWidth\n    ) {\n      this.updateAnimatedEvent(props, state);\n    }\n\n    return true;\n  }\n\n  private openValue?: AnimatedInterpolation;\n  private onGestureEvent?: (\n    event: GestureEvent<PanGestureHandlerEventPayload>\n  ) => void;\n  private accessibilityIsModalView = React.createRef<View>();\n  private pointerEventsView = React.createRef<View>();\n  private panGestureHandler = React.createRef<PanGestureHandler | null>();\n  private drawerShown = false;\n\n  static positions = {\n    Left: 'left',\n    Right: 'right',\n  };\n\n  private updateAnimatedEvent = (\n    props: DrawerLayoutProps,\n    state: DrawerLayoutState\n  ) => {\n    // Event definition is based on\n    const { drawerPosition, drawerWidth, drawerType } = props;\n    const {\n      dragX: dragXValue,\n      touchX: touchXValue,\n      drawerTranslation,\n      containerWidth,\n    } = state;\n\n    let dragX = dragXValue;\n    let touchX = touchXValue;\n\n    if (drawerPosition !== 'left') {\n      // Most of the code is written in a way to handle left-side drawer. In\n      // order to handle right-side drawer the only thing we need to do is to\n      // reverse events coming from gesture handler in a way they emulate\n      // left-side drawer gestures. E.g. dragX is simply -dragX, and touchX is\n      // calulcated by subtracing real touchX from the width of the container\n      // (such that when touch happens at the right edge the value is simply 0)\n      dragX = Animated.multiply(\n        new Animated.Value(-1),\n        dragXValue\n      ) as Animated.Value; // TODO(TS): (for all \"as\" in this file) make sure we can map this\n      touchX = Animated.add(\n        new Animated.Value(containerWidth),\n        Animated.multiply(new Animated.Value(-1), touchXValue)\n      ) as Animated.Value; // TODO(TS): make sure we can map this;\n      touchXValue.setValue(containerWidth);\n    } else {\n      touchXValue.setValue(0);\n    }\n\n    // While closing the drawer when user starts gesture outside of its area (in greyed\n    // out part of the window), we want the drawer to follow only once finger reaches the\n    // edge of the drawer.\n    // E.g. on the diagram below drawer is illustrate by X signs and the greyed out area by\n    // dots. The touch gesture starts at '*' and moves left, touch path is indicated by\n    // an arrow pointing left\n    // 1) +---------------+ 2) +---------------+ 3) +---------------+ 4) +---------------+\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|.<-*..|    |XXXXXXXX|<--*..|    |XXXXX|<-----*..|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    +---------------+    +---------------+    +---------------+    +---------------+\n    //\n    // For the above to work properly we define animated value that will keep\n    // start position of the gesture. Then we use that value to calculate how\n    // much we need to subtract from the dragX. If the gesture started on the\n    // greyed out area we take the distance from the edge of the drawer to the\n    // start position. Otherwise we don't subtract at all and the drawer be\n    // pulled back as soon as you start the pan.\n    //\n    // This is used only when drawerType is \"front\"\n    //\n    let translationX = dragX;\n    if (drawerType === 'front') {\n      const startPositionX = Animated.add(\n        touchX,\n        Animated.multiply(new Animated.Value(-1), dragX)\n      );\n\n      const dragOffsetFromOnStartPosition = startPositionX.interpolate({\n        inputRange: [drawerWidth! - 1, drawerWidth!, drawerWidth! + 1],\n        outputRange: [0, 0, 1],\n      });\n      translationX = Animated.add(\n        dragX,\n        dragOffsetFromOnStartPosition\n      ) as Animated.Value; // TODO: as above\n    }\n\n    this.openValue = Animated.add(translationX, drawerTranslation).interpolate({\n      inputRange: [0, drawerWidth!],\n      outputRange: [0, 1],\n      extrapolate: 'clamp',\n    });\n\n    const gestureOptions: {\n      useNativeDriver: boolean;\n      // TODO: make sure it is correct\n      listener?: (\n        ev: NativeSyntheticEvent<PanGestureHandlerEventPayload>\n      ) => void;\n    } = {\n      useNativeDriver: props.useNativeAnimations!,\n    };\n\n    if (this.props.onDrawerSlide) {\n      gestureOptions.listener = (ev) => {\n        const translationX = Math.floor(Math.abs(ev.nativeEvent.translationX));\n        const position = translationX / this.state.containerWidth;\n\n        this.props.onDrawerSlide?.(position);\n      };\n    }\n\n    this.onGestureEvent = Animated.event(\n      [{ nativeEvent: { translationX: dragXValue, x: touchXValue } }],\n      gestureOptions\n    );\n  };\n\n  private handleContainerLayout = ({ nativeEvent }: LayoutChangeEvent) => {\n    this.setState({ containerWidth: nativeEvent.layout.width });\n  };\n\n  private emitStateChanged = (\n    newState: DrawerState,\n    drawerWillShow: boolean\n  ) => {\n    this.props.onDrawerStateChanged?.(newState, drawerWillShow);\n  };\n\n  private openingHandlerStateChange = ({\n    nativeEvent,\n  }: HandlerStateChangeEvent<PanGestureHandlerEventPayload>) => {\n    if (nativeEvent.oldState === State.ACTIVE) {\n      this.handleRelease({ nativeEvent });\n    } else if (nativeEvent.state === State.ACTIVE) {\n      this.emitStateChanged(DRAGGING, false);\n      this.setState({ drawerState: DRAGGING });\n      if (this.props.keyboardDismissMode === 'on-drag') {\n        Keyboard.dismiss();\n      }\n      if (this.props.hideStatusBar) {\n        StatusBar.setHidden(true, this.props.statusBarAnimation || 'slide');\n      }\n    }\n  };\n\n  private onTapHandlerStateChange = ({\n    nativeEvent,\n  }: HandlerStateChangeEvent<TapGestureHandlerEventPayload>) => {\n    if (\n      this.drawerShown &&\n      nativeEvent.oldState === State.ACTIVE &&\n      this.props.drawerLockMode !== 'locked-open'\n    ) {\n      this.closeDrawer();\n    }\n  };\n\n  private handleRelease = ({\n    nativeEvent,\n  }: HandlerStateChangeEvent<PanGestureHandlerEventPayload>) => {\n    const { drawerWidth, drawerPosition, drawerType } = this.props;\n    const { containerWidth } = this.state;\n    let { translationX: dragX, velocityX, x: touchX } = nativeEvent;\n\n    if (drawerPosition !== 'left') {\n      // See description in _updateAnimatedEvent about why events are flipped\n      // for right-side drawer\n      dragX = -dragX;\n      touchX = containerWidth - touchX;\n      velocityX = -velocityX;\n    }\n\n    const gestureStartX = touchX - dragX;\n    let dragOffsetBasedOnStart = 0;\n\n    if (drawerType === 'front') {\n      dragOffsetBasedOnStart =\n        gestureStartX > drawerWidth! ? gestureStartX - drawerWidth! : 0;\n    }\n\n    const startOffsetX =\n      dragX + dragOffsetBasedOnStart + (this.drawerShown ? drawerWidth! : 0);\n    const projOffsetX = startOffsetX + DRAG_TOSS * velocityX;\n\n    const shouldOpen = projOffsetX > drawerWidth! / 2;\n\n    if (shouldOpen) {\n      this.animateDrawer(startOffsetX, drawerWidth!, velocityX);\n    } else {\n      this.animateDrawer(startOffsetX, 0, velocityX);\n    }\n  };\n\n  private updateShowing = (showing: boolean) => {\n    this.drawerShown = showing;\n    this.accessibilityIsModalView.current?.setNativeProps({\n      accessibilityViewIsModal: showing,\n    });\n    this.pointerEventsView.current?.setNativeProps({\n      pointerEvents: showing ? 'auto' : 'none',\n    });\n    const { drawerPosition, minSwipeDistance, edgeWidth } = this.props;\n    const fromLeft = drawerPosition === 'left';\n    // gestureOrientation is 1 if the expected gesture is from left to right and\n    // -1 otherwise e.g. when drawer is on the left and is closed we expect left\n    // to right gesture, thus orientation will be 1.\n    const gestureOrientation =\n      (fromLeft ? 1 : -1) * (this.drawerShown ? -1 : 1);\n    // When drawer is closed we want the hitSlop to be horizontally shorter than\n    // the container size by the value of SLOP. This will make it only activate\n    // when gesture happens not further than SLOP away from the edge\n    const hitSlop = fromLeft\n      ? { left: 0, width: showing ? undefined : edgeWidth }\n      : { right: 0, width: showing ? undefined : edgeWidth };\n    // @ts-ignore internal API, maybe could be fixed in handler types\n    this.panGestureHandler.current?.setNativeProps({\n      hitSlop,\n      activeOffsetX: gestureOrientation * minSwipeDistance!,\n    });\n  };\n\n  private animateDrawer = (\n    fromValue: number | null | undefined,\n    toValue: number,\n    velocity: number,\n    speed?: number\n  ) => {\n    this.state.dragX.setValue(0);\n    this.state.touchX.setValue(\n      this.props.drawerPosition === 'left' ? 0 : this.state.containerWidth\n    );\n\n    if (fromValue != null) {\n      let nextFramePosition = fromValue;\n      if (this.props.useNativeAnimations) {\n        // When using native driver, we predict the next position of the\n        // animation because it takes one frame of a roundtrip to pass RELEASE\n        // event from native driver to JS before we can start animating. Without\n        // it, it is more noticable that the frame is dropped.\n        if (fromValue < toValue && velocity > 0) {\n          nextFramePosition = Math.min(fromValue + velocity / 60.0, toValue);\n        } else if (fromValue > toValue && velocity < 0) {\n          nextFramePosition = Math.max(fromValue + velocity / 60.0, toValue);\n        }\n      }\n      this.state.drawerTranslation.setValue(nextFramePosition);\n    }\n\n    const willShow = toValue !== 0;\n    this.updateShowing(willShow);\n    this.emitStateChanged(SETTLING, willShow);\n    this.setState({ drawerState: SETTLING });\n    if (this.props.hideStatusBar) {\n      StatusBar.setHidden(willShow, this.props.statusBarAnimation || 'slide');\n    }\n    Animated.spring(this.state.drawerTranslation, {\n      velocity,\n      bounciness: 0,\n      toValue,\n      useNativeDriver: this.props.useNativeAnimations!,\n      speed: speed ?? undefined,\n    }).start(({ finished }) => {\n      if (finished) {\n        this.emitStateChanged(IDLE, willShow);\n        this.setState({ drawerOpened: willShow });\n        if (this.state.drawerState !== DRAGGING) {\n          // it's possilbe that user started drag while the drawer\n          // was settling, don't override state in this case\n          this.setState({ drawerState: IDLE });\n        }\n        if (willShow) {\n          this.props.onDrawerOpen?.();\n        } else {\n          this.props.onDrawerClose?.();\n        }\n      }\n    });\n  };\n\n  openDrawer = (options: DrawerMovementOption = {}) => {\n    this.animateDrawer(\n      // TODO: decide if it should be null or undefined is the proper value\n      undefined,\n      this.props.drawerWidth!,\n      options.velocity ? options.velocity : 0,\n      options.speed\n    );\n\n    // We need to force the update, otherwise the overlay is not rerendered and\n    // it would not be clickable\n    this.forceUpdate();\n  };\n\n  closeDrawer = (options: DrawerMovementOption = {}) => {\n    // TODO: decide if it should be null or undefined is the proper value\n    this.animateDrawer(\n      undefined,\n      0,\n      options.velocity ? options.velocity : 0,\n      options.speed\n    );\n\n    // We need to force the update, otherwise the overlay is not rerendered and\n    // it would be still clickable\n    this.forceUpdate();\n  };\n\n  private renderOverlay = () => {\n    /* Overlay styles */\n    invariant(this.openValue, 'should be set');\n    let overlayOpacity;\n\n    if (this.state.drawerState !== IDLE) {\n      overlayOpacity = this.openValue;\n    } else {\n      overlayOpacity = this.state.drawerOpened ? 1 : 0;\n    }\n\n    const dynamicOverlayStyles = {\n      opacity: overlayOpacity,\n      backgroundColor: this.props.overlayColor,\n    };\n\n    return (\n      <TapGestureHandler onHandlerStateChange={this.onTapHandlerStateChange}>\n        <Animated.View\n          pointerEvents={this.drawerShown ? 'auto' : 'none'}\n          ref={this.pointerEventsView}\n          style={[styles.overlay, dynamicOverlayStyles]}\n        />\n      </TapGestureHandler>\n    );\n  };\n\n  private renderDrawer = () => {\n    const {\n      drawerBackgroundColor,\n      drawerWidth,\n      drawerPosition,\n      drawerType,\n      drawerContainerStyle,\n      contentContainerStyle,\n    } = this.props;\n\n    const fromLeft = drawerPosition === 'left';\n    const drawerSlide = drawerType !== 'back';\n    const containerSlide = drawerType !== 'front';\n\n    // we rely on row and row-reverse flex directions to position the drawer\n    // properly. Apparently for RTL these are flipped which requires us to use\n    // the opposite setting for the drawer to appear from left or right\n    // according to the drawerPosition prop\n    const reverseContentDirection = I18nManager.isRTL ? fromLeft : !fromLeft;\n\n    const dynamicDrawerStyles = {\n      backgroundColor: drawerBackgroundColor,\n      width: drawerWidth,\n    };\n    const openValue = this.openValue;\n    invariant(openValue, 'should be set');\n\n    let containerStyles;\n    if (containerSlide) {\n      const containerTranslateX = openValue.interpolate({\n        inputRange: [0, 1],\n        outputRange: fromLeft ? [0, drawerWidth!] : [0, -drawerWidth!],\n        extrapolate: 'clamp',\n      });\n      containerStyles = {\n        transform: [{ translateX: containerTranslateX }],\n      };\n    }\n\n    let drawerTranslateX: number | AnimatedInterpolation = 0;\n    if (drawerSlide) {\n      const closedDrawerOffset = fromLeft ? -drawerWidth! : drawerWidth!;\n      if (this.state.drawerState !== IDLE) {\n        drawerTranslateX = openValue.interpolate({\n          inputRange: [0, 1],\n          outputRange: [closedDrawerOffset, 0],\n          extrapolate: 'clamp',\n        });\n      } else {\n        drawerTranslateX = this.state.drawerOpened ? 0 : closedDrawerOffset;\n      }\n    }\n    const drawerStyles: {\n      transform: { translateX: number | AnimatedInterpolation }[];\n      flexDirection: 'row-reverse' | 'row';\n    } = {\n      transform: [{ translateX: drawerTranslateX }],\n      flexDirection: reverseContentDirection ? 'row-reverse' : 'row',\n    };\n\n    return (\n      <Animated.View style={styles.main} onLayout={this.handleContainerLayout}>\n        <Animated.View\n          style={[\n            drawerType === 'front'\n              ? styles.containerOnBack\n              : styles.containerInFront,\n            containerStyles,\n            contentContainerStyle,\n          ]}\n          importantForAccessibility={\n            this.drawerShown ? 'no-hide-descendants' : 'yes'\n          }>\n          {typeof this.props.children === 'function'\n            ? this.props.children(this.openValue)\n            : this.props.children}\n          {this.renderOverlay()}\n        </Animated.View>\n        <Animated.View\n          pointerEvents=\"box-none\"\n          ref={this.accessibilityIsModalView}\n          accessibilityViewIsModal={this.drawerShown}\n          style={[styles.drawerContainer, drawerStyles, drawerContainerStyle]}>\n          <View style={dynamicDrawerStyles}>\n            {this.props.renderNavigationView(this.openValue as Animated.Value)}\n          </View>\n        </Animated.View>\n      </Animated.View>\n    );\n  };\n\n  private setPanGestureRef = (ref: PanGestureHandler) => {\n    // TODO(TS): make sure it is OK taken from\n    // https://github.com/DefinitelyTyped/DefinitelyTyped/issues/31065#issuecomment-596081842\n    (\n      this.panGestureHandler as React.MutableRefObject<PanGestureHandler>\n    ).current = ref;\n    this.props.onGestureRef?.(ref);\n  };\n\n  render() {\n    const { drawerPosition, drawerLockMode, edgeWidth, minSwipeDistance } =\n      this.props;\n\n    const fromLeft = drawerPosition === 'left';\n\n    // gestureOrientation is 1 if the expected gesture is from left to right and\n    // -1 otherwise e.g. when drawer is on the left and is closed we expect left\n    // to right gesture, thus orientation will be 1.\n    const gestureOrientation =\n      (fromLeft ? 1 : -1) * (this.drawerShown ? -1 : 1);\n\n    // When drawer is closed we want the hitSlop to be horizontally shorter than\n    // the container size by the value of SLOP. This will make it only activate\n    // when gesture happens not further than SLOP away from the edge\n    const hitSlop = fromLeft\n      ? { left: 0, width: this.drawerShown ? undefined : edgeWidth }\n      : { right: 0, width: this.drawerShown ? undefined : edgeWidth };\n\n    return (\n      <PanGestureHandler\n        // @ts-ignore could be fixed in handler types\n        userSelect={this.props.userSelect}\n        ref={this.setPanGestureRef}\n        hitSlop={hitSlop}\n        activeOffsetX={gestureOrientation * minSwipeDistance!}\n        failOffsetY={[-15, 15]}\n        onGestureEvent={this.onGestureEvent}\n        onHandlerStateChange={this.openingHandlerStateChange}\n        enableTrackpadTwoFingerGesture={\n          this.props.enableTrackpadTwoFingerGesture\n        }\n        enabled={\n          drawerLockMode !== 'locked-closed' && drawerLockMode !== 'locked-open'\n        }>\n        {this.renderDrawer()}\n      </PanGestureHandler>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  drawerContainer: {\n    ...StyleSheet.absoluteFillObject,\n    zIndex: 1001,\n    flexDirection: 'row',\n  },\n  containerInFront: {\n    ...StyleSheet.absoluteFillObject,\n    zIndex: 1002,\n  },\n  containerOnBack: {\n    ...StyleSheet.absoluteFillObject,\n  },\n  main: {\n    flex: 1,\n    zIndex: 0,\n    overflow: 'hidden',\n  },\n  overlay: {\n    ...StyleSheet.absoluteFillObject,\n    zIndex: 1000,\n  },\n});\n"]}