{"version":3,"mappings":";;;;;;;;;;;;;;;;;AAAA;AAOA;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAUqBA,gBAAN;EAAA;EAAA;EAEb;IAAA;IAAA;IAAA;MAAAC;IAAA;IAAA;IAAAC,gGAOkC,YAAM;MACtC,IAAMC,UAAU,GAAGC,wBAAWC,OAAX,CAAmB,MAAKC,KAAL,CAAWC,KAA9B,KAAwC,EAA3D;MACA,OAAOJ,UAAU,CAACK,OAAX,IAAsB,IAAtB,GAA6B,CAA7B,GAAiCL,UAAU,CAACK,OAAnD;IACD,CAVD;IAAAN,wEAYU,IAAIO,sBAASC,KAAb,CAAmB,MAAKC,+BAAL,EAAnB,CAZV;IAAAT,6EAce,UAACU,KAAD,EAAgBC,QAAhB,EAAqC;MAAA;MAClDJ,sBAASK,MAAT,CAAgB,MAAKN,OAArB,EAA8B;QAC5BO,OAAO,EAAEH,KADmB;QAE5BC,QAAQ,EAAEA,QAFkB;QAG5BG,MAAM,EAAEC,oBAAOC,KAAP,CAAaD,oBAAOE,IAApB,CAHoB;QAI5BC,eAAe,2BAAE,MAAKd,KAAL,CAAWe,mBAAb,yEAAoC;MAJvB,CAA9B,EAKGC,KALH;IAMD,CArBD;IAAApB,8EAuBgB,UAACqB,KAAD,EAAgBC,EAAhB,EAA+B;MAC7C,IAAIA,EAAE,KAAKC,kCAAgBC,KAA3B,EAAkC;QAChC,MAAKC,YAAL,CAAkB,MAAKrB,KAAL,CAAWsB,aAA7B,EAA6C,CAA7C;MACD,CAFD,MAEO,IACLJ,EAAE,KAAKC,kCAAgBI,YAAvB,IACAL,EAAE,KAAKC,kCAAgBK,aAFlB,EAGL;QACA,MAAKH,YAAL,CAAkB,MAAKhB,+BAAL,EAAlB,EAA0D,GAA1D;MACD;IACF,CAhCD;IAAA;EAAA;EAAA;IAAA;IAAA,OAkCAoB,kBAAS;MACP,kBAAgC,KAAKzB,KAArC;QAAA,gCAAQC,KAAK;QAALA,KAAK,kCAAG,EAAV;QAAiByB;MACvB,OACEC,oBAACC,yBAAD,eACMF,IADN;QAEEzB,KAAK,EAAE,CACLA,KADK,EAEL;UACEC,OAAO,EAAE,KAAKA;QADhB,CAFK,CAFT;QAQE2B,aAAa,EAAE,KAAKA;MARtB,IASG,KAAK7B,KAAL,CAAW8B,QAAX,GAAsB,KAAK9B,KAAL,CAAW8B,QAAjC,GAA4CH,oBAACI,iBAAD,OAT/C,CADF;IAaD;EAAA;EAAA;AAAA,EAnD2CC,eAA/B;;gBAAMtC,gB,oCAIduC,0BAAiBC,YADA;EAEpBZ,aAAa,EAAE;AAAA,G","names":["TouchableOpacity","args","_defineProperty","childStyle","StyleSheet","flatten","props","style","opacity","Animated","Value","getChildStyleOpacityWithDefault","value","duration","timing","toValue","easing","Easing","inOut","quad","useNativeDriver","useNativeAnimations","start","_from","to","TOUCHABLE_STATE","BEGAN","setOpacityTo","activeOpacity","UNDETERMINED","MOVED_OUTSIDE","render","rest","React","_GenericTouchable","onStateChange","children","_reactNative","Component","GenericTouchable","defaultProps"],"sources":["TouchableOpacity.tsx"],"sourcesContent":["import {\n  Animated,\n  Easing,\n  StyleSheet,\n  View,\n  TouchableOpacityProps,\n} from 'react-native';\nimport GenericTouchable, {\n  TOUCHABLE_STATE,\n  GenericTouchableProps,\n} from './GenericTouchable';\nimport * as React from 'react';\nimport { Component } from 'react';\n\ninterface GHTouchableOpacityProps {\n  useNativeAnimations?: boolean;\n}\n\n/**\n * TouchableOpacity bases on timing animation which has been used in RN's core\n */\nexport default class TouchableOpacity extends Component<\n  TouchableOpacityProps & GenericTouchableProps & GHTouchableOpacityProps\n> {\n  static defaultProps = {\n    ...GenericTouchable.defaultProps,\n    activeOpacity: 0.2,\n  };\n\n  // opacity is 1 one by default but could be overwritten\n  getChildStyleOpacityWithDefault = () => {\n    const childStyle = StyleSheet.flatten(this.props.style) || {};\n    return childStyle.opacity == null ? 1 : childStyle.opacity;\n  };\n\n  opacity = new Animated.Value(this.getChildStyleOpacityWithDefault());\n\n  setOpacityTo = (value: number, duration: number) => {\n    Animated.timing(this.opacity, {\n      toValue: value,\n      duration: duration,\n      easing: Easing.inOut(Easing.quad),\n      useNativeDriver: this.props.useNativeAnimations ?? true,\n    }).start();\n  };\n\n  onStateChange = (_from: number, to: number) => {\n    if (to === TOUCHABLE_STATE.BEGAN) {\n      this.setOpacityTo(this.props.activeOpacity!, 0);\n    } else if (\n      to === TOUCHABLE_STATE.UNDETERMINED ||\n      to === TOUCHABLE_STATE.MOVED_OUTSIDE\n    ) {\n      this.setOpacityTo(this.getChildStyleOpacityWithDefault(), 150);\n    }\n  };\n\n  render() {\n    const { style = {}, ...rest } = this.props;\n    return (\n      <GenericTouchable\n        {...rest}\n        style={[\n          style,\n          {\n            opacity: this.opacity as unknown as number, // TODO: fix this\n          },\n        ]}\n        onStateChange={this.onStateChange}>\n        {this.props.children ? this.props.children : <View />}\n      </GenericTouchable>\n    );\n  }\n}\n"]}