d3b185ea18280b48fc55c665cc3ea4a7
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Commands = void 0;
var _codegenNativeCommands = _interopRequireDefault(require("../../Utilities/codegenNativeCommands"));
var _codegenNativeComponent = _interopRequireDefault(require("../../Utilities/codegenNativeComponent"));
var React = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var Commands = (0, _codegenNativeCommands.default)({
  supportedCommands: ['setValue']
});
exports.Commands = Commands;
var _default = (0, _codegenNativeComponent.default)('Switch', {
  paperComponentName: 'RCTSwitch',
  excludedPlatforms: ['android']
});
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJDb21tYW5kcyIsImNvZGVnZW5OYXRpdmVDb21tYW5kcyIsInN1cHBvcnRlZENvbW1hbmRzIiwiY29kZWdlbk5hdGl2ZUNvbXBvbmVudCIsInBhcGVyQ29tcG9uZW50TmFtZSIsImV4Y2x1ZGVkUGxhdGZvcm1zIl0sInNvdXJjZXMiOlsiU3dpdGNoTmF0aXZlQ29tcG9uZW50LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvdyBzdHJpY3QtbG9jYWxcbiAqIEBmb3JtYXRcbiAqL1xuXG5pbXBvcnQgdHlwZSB7SG9zdENvbXBvbmVudH0gZnJvbSAnLi4vLi4vUmVuZGVyZXIvc2hpbXMvUmVhY3ROYXRpdmVUeXBlcyc7XG5pbXBvcnQgdHlwZSB7Q29sb3JWYWx1ZX0gZnJvbSAnLi4vLi4vU3R5bGVTaGVldC9TdHlsZVNoZWV0JztcbmltcG9ydCB0eXBlIHtcbiAgQnViYmxpbmdFdmVudEhhbmRsZXIsXG4gIEludDMyLFxuICBXaXRoRGVmYXVsdCxcbn0gZnJvbSAnLi4vLi4vVHlwZXMvQ29kZWdlblR5cGVzJztcbmltcG9ydCB0eXBlIHtWaWV3UHJvcHN9IGZyb20gJy4uL1ZpZXcvVmlld1Byb3BUeXBlcyc7XG5cbmltcG9ydCBjb2RlZ2VuTmF0aXZlQ29tbWFuZHMgZnJvbSAnLi4vLi4vVXRpbGl0aWVzL2NvZGVnZW5OYXRpdmVDb21tYW5kcyc7XG5pbXBvcnQgY29kZWdlbk5hdGl2ZUNvbXBvbmVudCBmcm9tICcuLi8uLi9VdGlsaXRpZXMvY29kZWdlbk5hdGl2ZUNvbXBvbmVudCc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbnR5cGUgU3dpdGNoQ2hhbmdlRXZlbnQgPSAkUmVhZE9ubHk8e3xcbiAgdmFsdWU6IGJvb2xlYW4sXG4gIHRhcmdldDogSW50MzIsXG58fT47XG5cbnR5cGUgTmF0aXZlUHJvcHMgPSAkUmVhZE9ubHk8e3xcbiAgLi4uVmlld1Byb3BzLFxuXG4gIC8vIFByb3BzXG4gIGRpc2FibGVkPzogV2l0aERlZmF1bHQ8Ym9vbGVhbiwgZmFsc2U+LFxuICB2YWx1ZT86IFdpdGhEZWZhdWx0PGJvb2xlYW4sIGZhbHNlPixcbiAgdGludENvbG9yPzogP0NvbG9yVmFsdWUsXG4gIG9uVGludENvbG9yPzogP0NvbG9yVmFsdWUsXG4gIHRodW1iVGludENvbG9yPzogP0NvbG9yVmFsdWUsXG5cbiAgLy8gRGVwcmVjYXRlZCBwcm9wc1xuICB0aHVtYkNvbG9yPzogP0NvbG9yVmFsdWUsXG4gIHRyYWNrQ29sb3JGb3JGYWxzZT86ID9Db2xvclZhbHVlLFxuICB0cmFja0NvbG9yRm9yVHJ1ZT86ID9Db2xvclZhbHVlLFxuXG4gIC8vIEV2ZW50c1xuICBvbkNoYW5nZT86ID9CdWJibGluZ0V2ZW50SGFuZGxlcjxTd2l0Y2hDaGFuZ2VFdmVudD4sXG58fT47XG5cbnR5cGUgQ29tcG9uZW50VHlwZSA9IEhvc3RDb21wb25lbnQ8TmF0aXZlUHJvcHM+O1xuXG5pbnRlcmZhY2UgTmF0aXZlQ29tbWFuZHMge1xuICArc2V0VmFsdWU6ICh2aWV3UmVmOiBSZWFjdC5FbGVtZW50UmVmPENvbXBvbmVudFR5cGU+LCB2YWx1ZTogYm9vbGVhbikgPT4gdm9pZDtcbn1cblxuZXhwb3J0IGNvbnN0IENvbW1hbmRzOiBOYXRpdmVDb21tYW5kcyA9IGNvZGVnZW5OYXRpdmVDb21tYW5kczxOYXRpdmVDb21tYW5kcz4oe1xuICBzdXBwb3J0ZWRDb21tYW5kczogWydzZXRWYWx1ZSddLFxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IChjb2RlZ2VuTmF0aXZlQ29tcG9uZW50PE5hdGl2ZVByb3BzPignU3dpdGNoJywge1xuICBwYXBlckNvbXBvbmVudE5hbWU6ICdSQ1RTd2l0Y2gnLFxuICBleGNsdWRlZFBsYXRmb3JtczogWydhbmRyb2lkJ10sXG59KTogQ29tcG9uZW50VHlwZSk7XG4iXSwibWFwcGluZ3MiOiI7Ozs7O0FBbUJBO0FBQ0E7QUFDQTtBQUErQjtBQUFBO0FBZ0N4QixJQUFNQSxRQUF3QixHQUFHLElBQUFDLDhCQUFxQixFQUFpQjtFQUM1RUMsaUJBQWlCLEVBQUUsQ0FBQyxVQUFVO0FBQ2hDLENBQUMsQ0FBQztBQUFDO0FBQUEsZUFFYSxJQUFBQywrQkFBc0IsRUFBYyxRQUFRLEVBQUU7RUFDNURDLGtCQUFrQixFQUFFLFdBQVc7RUFDL0JDLGlCQUFpQixFQUFFLENBQUMsU0FBUztBQUMvQixDQUFDLENBQUM7QUFBQSJ9