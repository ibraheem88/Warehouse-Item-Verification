78c42f7eeaeba66a3a23e1c787fa9446
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.filterConfig = filterConfig;
exports.findNodeHandle = findNodeHandle;
exports.scheduleFlushOperations = scheduleFlushOperations;
exports.baseGestureHandlerWithMonitorProps = exports.baseGestureHandlerProps = void 0;
var _reactNative = require("react-native");
var _handlersRegistry = require("./handlersRegistry");
var _utils = require("../utils");
var _RNGestureHandlerModule = _interopRequireDefault(require("../RNGestureHandlerModule"));
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
var commonProps = ['id', 'enabled', 'shouldCancelWhenOutside', 'hitSlop', 'cancelsTouchesInView', 'userSelect'];
var componentInteractionProps = ['waitFor', 'simultaneousHandlers'];
var baseGestureHandlerProps = [].concat(commonProps, componentInteractionProps, ['onBegan', 'onFailed', 'onCancelled', 'onActivated', 'onEnded', 'onGestureEvent', 'onHandlerStateChange']);
exports.baseGestureHandlerProps = baseGestureHandlerProps;
var baseGestureHandlerWithMonitorProps = [].concat(commonProps, ['needsPointerData', 'manualActivation']);
exports.baseGestureHandlerWithMonitorProps = baseGestureHandlerWithMonitorProps;
function isConfigParam(param, name) {
  return param !== undefined && (param !== Object(param) || !('__isNative' in param)) && name !== 'onHandlerStateChange' && name !== 'onGestureEvent';
}
function filterConfig(props, validProps) {
  var defaults = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var filteredConfig = Object.assign({}, defaults);
  for (var key of validProps) {
    var value = props[key];
    if (isConfigParam(value, key)) {
      if (key === 'simultaneousHandlers' || key === 'waitFor') {
        value = transformIntoHandlerTags(props[key]);
      } else if (key === 'hitSlop' && typeof value !== 'object') {
        value = {
          top: value,
          left: value,
          bottom: value,
          right: value
        };
      }
      filteredConfig[key] = value;
    }
  }
  return filteredConfig;
}
function transformIntoHandlerTags(handlerIDs) {
  handlerIDs = (0, _utils.toArray)(handlerIDs);
  if (_reactNative.Platform.OS === 'web') {
    return handlerIDs.map(function (_ref) {
      var current = _ref.current;
      return current;
    }).filter(function (handle) {
      return handle;
    });
  }
  return handlerIDs.map(function (handlerID) {
    var _handlerID$current;
    return _handlersRegistry.handlerIDToTag[handlerID] || ((_handlerID$current = handlerID.current) === null || _handlerID$current === void 0 ? void 0 : _handlerID$current.handlerTag) || -1;
  }).filter(function (handlerTag) {
    return handlerTag > 0;
  });
}
function findNodeHandle(node) {
  if (_reactNative.Platform.OS === 'web') {
    return node;
  }
  return (0, _reactNative.findNodeHandle)(node);
}
var scheduledFlushOperationsId = null;
function scheduleFlushOperations() {
  if (scheduledFlushOperationsId === null) {
    scheduledFlushOperationsId = requestAnimationFrame(function () {
      _RNGestureHandlerModule.default.flushOperations();
      scheduledFlushOperationsId = null;
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,