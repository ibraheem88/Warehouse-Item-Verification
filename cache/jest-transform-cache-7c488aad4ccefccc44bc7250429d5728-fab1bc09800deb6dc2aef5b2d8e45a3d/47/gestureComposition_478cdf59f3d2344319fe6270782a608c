0fa2dd447c3789c4776d6b199905f9c6
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ExclusiveGesture = exports.SimultaneousGesture = exports.ComposedGesture = void 0;
var _gesture = require("./gesture");
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function extendRelation(currentRelation, extendWith) {
  if (currentRelation === undefined) {
    return (0, _toConsumableArray2.default)(extendWith);
  } else {
    return [].concat((0, _toConsumableArray2.default)(currentRelation), (0, _toConsumableArray2.default)(extendWith));
  }
}
var ComposedGesture = function (_gesture$Gesture) {
  (0, _inherits2.default)(ComposedGesture, _gesture$Gesture);
  var _super = _createSuper(ComposedGesture);
  function ComposedGesture() {
    var _this;
    (0, _classCallCheck2.default)(this, ComposedGesture);
    _this = _super.call(this);
    _defineProperty((0, _assertThisInitialized2.default)(_this), "gestures", []);
    _defineProperty((0, _assertThisInitialized2.default)(_this), "simultaneousGestures", []);
    _defineProperty((0, _assertThisInitialized2.default)(_this), "requireGesturesToFail", []);
    for (var _len = arguments.length, gestures = new Array(_len), _key = 0; _key < _len; _key++) {
      gestures[_key] = arguments[_key];
    }
    _this.gestures = gestures;
    return _this;
  }
  (0, _createClass2.default)(ComposedGesture, [{
    key: "prepareSingleGesture",
    value: function prepareSingleGesture(gesture, simultaneousGestures, requireGesturesToFail) {
      if (gesture instanceof _gesture.BaseGesture) {
        var newConfig = Object.assign({}, gesture.config);
        newConfig.simultaneousWith = extendRelation(newConfig.simultaneousWith, simultaneousGestures);
        newConfig.requireToFail = extendRelation(newConfig.requireToFail, requireGesturesToFail);
        gesture.config = newConfig;
      } else if (gesture instanceof ComposedGesture) {
        gesture.simultaneousGestures = simultaneousGestures;
        gesture.requireGesturesToFail = requireGesturesToFail;
        gesture.prepare();
      }
    }
  }, {
    key: "prepare",
    value: function prepare() {
      for (var gesture of this.gestures) {
        this.prepareSingleGesture(gesture, this.simultaneousGestures, this.requireGesturesToFail);
      }
    }
  }, {
    key: "initialize",
    value: function initialize() {
      for (var gesture of this.gestures) {
        gesture.initialize();
      }
    }
  }, {
    key: "toGestureArray",
    value: function toGestureArray() {
      return this.gestures.flatMap(function (gesture) {
        return gesture.toGestureArray();
      });
    }
  }]);
  return ComposedGesture;
}(_gesture.Gesture);
exports.ComposedGesture = ComposedGesture;
var SimultaneousGesture = function (_ComposedGesture) {
  (0, _inherits2.default)(SimultaneousGesture, _ComposedGesture);
  var _super2 = _createSuper(SimultaneousGesture);
  function SimultaneousGesture() {
    (0, _classCallCheck2.default)(this, SimultaneousGesture);
    return _super2.apply(this, arguments);
  }
  (0, _createClass2.default)(SimultaneousGesture, [{
    key: "prepare",
    value: function prepare() {
      var _this2 = this;
      var simultaneousArrays = this.gestures.map(function (gesture) {
        return _this2.gestures.filter(function (x) {
          return x !== gesture;
        }).flatMap(function (x) {
          return x.toGestureArray();
        });
      });
      for (var i = 0; i < this.gestures.length; i++) {
        this.prepareSingleGesture(this.gestures[i], simultaneousArrays[i], this.requireGesturesToFail);
      }
    }
  }]);
  return SimultaneousGesture;
}(ComposedGesture);
exports.SimultaneousGesture = SimultaneousGesture;
var ExclusiveGesture = function (_ComposedGesture2) {
  (0, _inherits2.default)(ExclusiveGesture, _ComposedGesture2);
  var _super3 = _createSuper(ExclusiveGesture);
  function ExclusiveGesture() {
    (0, _classCallCheck2.default)(this, ExclusiveGesture);
    return _super3.apply(this, arguments);
  }
  (0, _createClass2.default)(ExclusiveGesture, [{
    key: "prepare",
    value: function prepare() {
      var gestureArrays = this.gestures.map(function (gesture) {
        return gesture.toGestureArray();
      });
      var requireToFail = [];
      for (var i = 0; i < this.gestures.length; i++) {
        this.prepareSingleGesture(this.gestures[i], this.simultaneousGestures, this.requireGesturesToFail.concat(requireToFail));
        requireToFail = requireToFail.concat(gestureArrays[i]);
      }
    }
  }]);
  return ExclusiveGesture;
}(ComposedGesture);
exports.ExclusiveGesture = ExclusiveGesture;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,