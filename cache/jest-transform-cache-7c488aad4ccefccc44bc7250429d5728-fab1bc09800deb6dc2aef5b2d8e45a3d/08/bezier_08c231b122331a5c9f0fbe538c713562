583548580af6ad7d8b9314f37f88a59d
'use strict';
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = bezier;
var NEWTON_ITERATIONS = 4;
var NEWTON_MIN_SLOPE = 0.001;
var SUBDIVISION_PRECISION = 0.0000001;
var SUBDIVISION_MAX_ITERATIONS = 10;
var kSplineTableSize = 11;
var kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);
var float32ArraySupported = typeof Float32Array === 'function';
function A(aA1, aA2) {
  return 1.0 - 3.0 * aA2 + 3.0 * aA1;
}
function B(aA1, aA2) {
  return 3.0 * aA2 - 6.0 * aA1;
}
function C(aA1) {
  return 3.0 * aA1;
}
function calcBezier(aT, aA1, aA2) {
  return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;
}
function getSlope(aT, aA1, aA2) {
  return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);
}
function binarySubdivide(aX, _aA, _aB, mX1, mX2) {
  var currentX,
    currentT,
    i = 0,
    aA = _aA,
    aB = _aB;
  do {
    currentT = aA + (aB - aA) / 2.0;
    currentX = calcBezier(currentT, mX1, mX2) - aX;
    if (currentX > 0.0) {
      aB = currentT;
    } else {
      aA = currentT;
    }
  } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);
  return currentT;
}
function newtonRaphsonIterate(aX, _aGuessT, mX1, mX2) {
  var aGuessT = _aGuessT;
  for (var i = 0; i < NEWTON_ITERATIONS; ++i) {
    var currentSlope = getSlope(aGuessT, mX1, mX2);
    if (currentSlope === 0.0) {
      return aGuessT;
    }
    var currentX = calcBezier(aGuessT, mX1, mX2) - aX;
    aGuessT -= currentX / currentSlope;
  }
  return aGuessT;
}
function bezier(mX1, mY1, mX2, mY2) {
  if (!(mX1 >= 0 && mX1 <= 1 && mX2 >= 0 && mX2 <= 1)) {
    throw new Error('bezier x values must be in [0, 1] range');
  }
  var sampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);
  if (mX1 !== mY1 || mX2 !== mY2) {
    for (var i = 0; i < kSplineTableSize; ++i) {
      sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);
    }
  }
  function getTForX(aX) {
    var intervalStart = 0.0;
    var currentSample = 1;
    var lastSample = kSplineTableSize - 1;
    for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {
      intervalStart += kSampleStepSize;
    }
    --currentSample;
    var dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);
    var guessForT = intervalStart + dist * kSampleStepSize;
    var initialSlope = getSlope(guessForT, mX1, mX2);
    if (initialSlope >= NEWTON_MIN_SLOPE) {
      return newtonRaphsonIterate(aX, guessForT, mX1, mX2);
    } else if (initialSlope === 0.0) {
      return guessForT;
    } else {
      return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);
    }
  }
  return function BezierEasing(x) {
    if (mX1 === mY1 && mX2 === mY2) {
      return x;
    }
    if (x === 0) {
      return 0;
    }
    if (x === 1) {
      return 1;
    }
    return calcBezier(getTForX(x), mY1, mY2);
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJORVdUT05fSVRFUkFUSU9OUyIsIk5FV1RPTl9NSU5fU0xPUEUiLCJTVUJESVZJU0lPTl9QUkVDSVNJT04iLCJTVUJESVZJU0lPTl9NQVhfSVRFUkFUSU9OUyIsImtTcGxpbmVUYWJsZVNpemUiLCJrU2FtcGxlU3RlcFNpemUiLCJmbG9hdDMyQXJyYXlTdXBwb3J0ZWQiLCJGbG9hdDMyQXJyYXkiLCJBIiwiYUExIiwiYUEyIiwiQiIsIkMiLCJjYWxjQmV6aWVyIiwiYVQiLCJnZXRTbG9wZSIsImJpbmFyeVN1YmRpdmlkZSIsImFYIiwiX2FBIiwiX2FCIiwibVgxIiwibVgyIiwiY3VycmVudFgiLCJjdXJyZW50VCIsImkiLCJhQSIsImFCIiwiTWF0aCIsImFicyIsIm5ld3RvblJhcGhzb25JdGVyYXRlIiwiX2FHdWVzc1QiLCJhR3Vlc3NUIiwiY3VycmVudFNsb3BlIiwiYmV6aWVyIiwibVkxIiwibVkyIiwiRXJyb3IiLCJzYW1wbGVWYWx1ZXMiLCJBcnJheSIsImdldFRGb3JYIiwiaW50ZXJ2YWxTdGFydCIsImN1cnJlbnRTYW1wbGUiLCJsYXN0U2FtcGxlIiwiZGlzdCIsImd1ZXNzRm9yVCIsImluaXRpYWxTbG9wZSIsIkJlemllckVhc2luZyIsIngiXSwic291cmNlcyI6WyJiZXppZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBQb3J0aW9ucyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93IHN0cmljdFxuICogQGZvcm1hdFxuICovXG5cbi8qKlxuICogQmV6aWVyRWFzaW5nIC0gdXNlIGJlemllciBjdXJ2ZSBmb3IgdHJhbnNpdGlvbiBlYXNpbmcgZnVuY3Rpb25cbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9ncmUvYmV6aWVyLWVhc2luZ1xuICogQGNvcHlyaWdodCAyMDE0LTIwMTUgR2HDq3RhbiBSZW5hdWRlYXUuIE1JVCBMaWNlbnNlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLy8gVGhlc2UgdmFsdWVzIGFyZSBlc3RhYmxpc2hlZCBieSBlbXBpcmljaXNtIHdpdGggdGVzdHMgKHRyYWRlb2ZmOiBwZXJmb3JtYW5jZSBWUyBwcmVjaXNpb24pXG5jb25zdCBORVdUT05fSVRFUkFUSU9OUyA9IDQ7XG5jb25zdCBORVdUT05fTUlOX1NMT1BFID0gMC4wMDE7XG5jb25zdCBTVUJESVZJU0lPTl9QUkVDSVNJT04gPSAwLjAwMDAwMDE7XG5jb25zdCBTVUJESVZJU0lPTl9NQVhfSVRFUkFUSU9OUyA9IDEwO1xuXG5jb25zdCBrU3BsaW5lVGFibGVTaXplID0gMTE7XG5jb25zdCBrU2FtcGxlU3RlcFNpemUgPSAxLjAgLyAoa1NwbGluZVRhYmxlU2l6ZSAtIDEuMCk7XG5cbmNvbnN0IGZsb2F0MzJBcnJheVN1cHBvcnRlZCA9IHR5cGVvZiBGbG9hdDMyQXJyYXkgPT09ICdmdW5jdGlvbic7XG5cbmZ1bmN0aW9uIEEoYUExOiBudW1iZXIsIGFBMjogbnVtYmVyKSB7XG4gIHJldHVybiAxLjAgLSAzLjAgKiBhQTIgKyAzLjAgKiBhQTE7XG59XG5mdW5jdGlvbiBCKGFBMTogbnVtYmVyLCBhQTI6IG51bWJlcikge1xuICByZXR1cm4gMy4wICogYUEyIC0gNi4wICogYUExO1xufVxuZnVuY3Rpb24gQyhhQTE6IG51bWJlcikge1xuICByZXR1cm4gMy4wICogYUExO1xufVxuXG4vLyBSZXR1cm5zIHgodCkgZ2l2ZW4gdCwgeDEsIGFuZCB4Miwgb3IgeSh0KSBnaXZlbiB0LCB5MSwgYW5kIHkyLlxuZnVuY3Rpb24gY2FsY0JlemllcihhVDogbnVtYmVyLCBhQTE6IG51bWJlciwgYUEyOiBudW1iZXIpIHtcbiAgcmV0dXJuICgoQShhQTEsIGFBMikgKiBhVCArIEIoYUExLCBhQTIpKSAqIGFUICsgQyhhQTEpKSAqIGFUO1xufVxuXG4vLyBSZXR1cm5zIGR4L2R0IGdpdmVuIHQsIHgxLCBhbmQgeDIsIG9yIGR5L2R0IGdpdmVuIHQsIHkxLCBhbmQgeTIuXG5mdW5jdGlvbiBnZXRTbG9wZShhVDogbnVtYmVyLCBhQTE6IG51bWJlciwgYUEyOiBudW1iZXIpIHtcbiAgcmV0dXJuIDMuMCAqIEEoYUExLCBhQTIpICogYVQgKiBhVCArIDIuMCAqIEIoYUExLCBhQTIpICogYVQgKyBDKGFBMSk7XG59XG5cbmZ1bmN0aW9uIGJpbmFyeVN1YmRpdmlkZShcbiAgYVg6IG51bWJlcixcbiAgX2FBOiBudW1iZXIsXG4gIF9hQjogbnVtYmVyLFxuICBtWDE6IG51bWJlcixcbiAgbVgyOiBudW1iZXIsXG4pIHtcbiAgbGV0IGN1cnJlbnRYLFxuICAgIGN1cnJlbnRULFxuICAgIGkgPSAwLFxuICAgIGFBID0gX2FBLFxuICAgIGFCID0gX2FCO1xuICBkbyB7XG4gICAgY3VycmVudFQgPSBhQSArIChhQiAtIGFBKSAvIDIuMDtcbiAgICBjdXJyZW50WCA9IGNhbGNCZXppZXIoY3VycmVudFQsIG1YMSwgbVgyKSAtIGFYO1xuICAgIGlmIChjdXJyZW50WCA+IDAuMCkge1xuICAgICAgYUIgPSBjdXJyZW50VDtcbiAgICB9IGVsc2Uge1xuICAgICAgYUEgPSBjdXJyZW50VDtcbiAgICB9XG4gIH0gd2hpbGUgKFxuICAgIE1hdGguYWJzKGN1cnJlbnRYKSA+IFNVQkRJVklTSU9OX1BSRUNJU0lPTiAmJlxuICAgICsraSA8IFNVQkRJVklTSU9OX01BWF9JVEVSQVRJT05TXG4gICk7XG4gIHJldHVybiBjdXJyZW50VDtcbn1cblxuZnVuY3Rpb24gbmV3dG9uUmFwaHNvbkl0ZXJhdGUoXG4gIGFYOiBudW1iZXIsXG4gIF9hR3Vlc3NUOiBudW1iZXIsXG4gIG1YMTogbnVtYmVyLFxuICBtWDI6IG51bWJlcixcbikge1xuICBsZXQgYUd1ZXNzVCA9IF9hR3Vlc3NUO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IE5FV1RPTl9JVEVSQVRJT05TOyArK2kpIHtcbiAgICBjb25zdCBjdXJyZW50U2xvcGUgPSBnZXRTbG9wZShhR3Vlc3NULCBtWDEsIG1YMik7XG4gICAgaWYgKGN1cnJlbnRTbG9wZSA9PT0gMC4wKSB7XG4gICAgICByZXR1cm4gYUd1ZXNzVDtcbiAgICB9XG4gICAgY29uc3QgY3VycmVudFggPSBjYWxjQmV6aWVyKGFHdWVzc1QsIG1YMSwgbVgyKSAtIGFYO1xuICAgIGFHdWVzc1QgLT0gY3VycmVudFggLyBjdXJyZW50U2xvcGU7XG4gIH1cbiAgcmV0dXJuIGFHdWVzc1Q7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJlemllcihcbiAgbVgxOiBudW1iZXIsXG4gIG1ZMTogbnVtYmVyLFxuICBtWDI6IG51bWJlcixcbiAgbVkyOiBudW1iZXIsXG4pOiAoeDogbnVtYmVyKSA9PiBudW1iZXIge1xuICBpZiAoIShtWDEgPj0gMCAmJiBtWDEgPD0gMSAmJiBtWDIgPj0gMCAmJiBtWDIgPD0gMSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2JlemllciB4IHZhbHVlcyBtdXN0IGJlIGluIFswLCAxXSByYW5nZScpO1xuICB9XG5cbiAgLy8gUHJlY29tcHV0ZSBzYW1wbGVzIHRhYmxlXG4gIGNvbnN0IHNhbXBsZVZhbHVlcyA9IGZsb2F0MzJBcnJheVN1cHBvcnRlZFxuICAgID8gbmV3IEZsb2F0MzJBcnJheShrU3BsaW5lVGFibGVTaXplKVxuICAgIDogbmV3IEFycmF5KGtTcGxpbmVUYWJsZVNpemUpO1xuICBpZiAobVgxICE9PSBtWTEgfHwgbVgyICE9PSBtWTIpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGtTcGxpbmVUYWJsZVNpemU7ICsraSkge1xuICAgICAgc2FtcGxlVmFsdWVzW2ldID0gY2FsY0JlemllcihpICoga1NhbXBsZVN0ZXBTaXplLCBtWDEsIG1YMik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZ2V0VEZvclgoYVg6IG51bWJlcikge1xuICAgIGxldCBpbnRlcnZhbFN0YXJ0ID0gMC4wO1xuICAgIGxldCBjdXJyZW50U2FtcGxlID0gMTtcbiAgICBjb25zdCBsYXN0U2FtcGxlID0ga1NwbGluZVRhYmxlU2l6ZSAtIDE7XG5cbiAgICBmb3IgKFxuICAgICAgO1xuICAgICAgY3VycmVudFNhbXBsZSAhPT0gbGFzdFNhbXBsZSAmJiBzYW1wbGVWYWx1ZXNbY3VycmVudFNhbXBsZV0gPD0gYVg7XG4gICAgICArK2N1cnJlbnRTYW1wbGVcbiAgICApIHtcbiAgICAgIGludGVydmFsU3RhcnQgKz0ga1NhbXBsZVN0ZXBTaXplO1xuICAgIH1cbiAgICAtLWN1cnJlbnRTYW1wbGU7XG5cbiAgICAvLyBJbnRlcnBvbGF0ZSB0byBwcm92aWRlIGFuIGluaXRpYWwgZ3Vlc3MgZm9yIHRcbiAgICBjb25zdCBkaXN0ID1cbiAgICAgIChhWCAtIHNhbXBsZVZhbHVlc1tjdXJyZW50U2FtcGxlXSkgL1xuICAgICAgKHNhbXBsZVZhbHVlc1tjdXJyZW50U2FtcGxlICsgMV0gLSBzYW1wbGVWYWx1ZXNbY3VycmVudFNhbXBsZV0pO1xuICAgIGNvbnN0IGd1ZXNzRm9yVCA9IGludGVydmFsU3RhcnQgKyBkaXN0ICoga1NhbXBsZVN0ZXBTaXplO1xuXG4gICAgY29uc3QgaW5pdGlhbFNsb3BlID0gZ2V0U2xvcGUoZ3Vlc3NGb3JULCBtWDEsIG1YMik7XG4gICAgaWYgKGluaXRpYWxTbG9wZSA+PSBORVdUT05fTUlOX1NMT1BFKSB7XG4gICAgICByZXR1cm4gbmV3dG9uUmFwaHNvbkl0ZXJhdGUoYVgsIGd1ZXNzRm9yVCwgbVgxLCBtWDIpO1xuICAgIH0gZWxzZSBpZiAoaW5pdGlhbFNsb3BlID09PSAwLjApIHtcbiAgICAgIHJldHVybiBndWVzc0ZvclQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBiaW5hcnlTdWJkaXZpZGUoXG4gICAgICAgIGFYLFxuICAgICAgICBpbnRlcnZhbFN0YXJ0LFxuICAgICAgICBpbnRlcnZhbFN0YXJ0ICsga1NhbXBsZVN0ZXBTaXplLFxuICAgICAgICBtWDEsXG4gICAgICAgIG1YMixcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIEJlemllckVhc2luZyh4OiBudW1iZXIpOiBudW1iZXIge1xuICAgIGlmIChtWDEgPT09IG1ZMSAmJiBtWDIgPT09IG1ZMikge1xuICAgICAgcmV0dXJuIHg7IC8vIGxpbmVhclxuICAgIH1cbiAgICAvLyBCZWNhdXNlIEphdmFTY3JpcHQgbnVtYmVyIGFyZSBpbXByZWNpc2UsIHdlIHNob3VsZCBndWFyYW50ZWUgdGhlIGV4dHJlbWVzIGFyZSByaWdodC5cbiAgICBpZiAoeCA9PT0gMCkge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIGlmICh4ID09PSAxKSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9XG4gICAgcmV0dXJuIGNhbGNCZXppZXIoZ2V0VEZvclgoeCksIG1ZMSwgbVkyKTtcbiAgfTtcbn1cbiJdLCJtYXBwaW5ncyI6IkFBZ0JBLFlBQVk7QUFBQztFQUFBO0FBQUE7QUFBQTtBQUdiLElBQU1BLGlCQUFpQixHQUFHLENBQUM7QUFDM0IsSUFBTUMsZ0JBQWdCLEdBQUcsS0FBSztBQUM5QixJQUFNQyxxQkFBcUIsR0FBRyxTQUFTO0FBQ3ZDLElBQU1DLDBCQUEwQixHQUFHLEVBQUU7QUFFckMsSUFBTUMsZ0JBQWdCLEdBQUcsRUFBRTtBQUMzQixJQUFNQyxlQUFlLEdBQUcsR0FBRyxJQUFJRCxnQkFBZ0IsR0FBRyxHQUFHLENBQUM7QUFFdEQsSUFBTUUscUJBQXFCLEdBQUcsT0FBT0MsWUFBWSxLQUFLLFVBQVU7QUFFaEUsU0FBU0MsQ0FBQyxDQUFDQyxHQUFXLEVBQUVDLEdBQVcsRUFBRTtFQUNuQyxPQUFPLEdBQUcsR0FBRyxHQUFHLEdBQUdBLEdBQUcsR0FBRyxHQUFHLEdBQUdELEdBQUc7QUFDcEM7QUFDQSxTQUFTRSxDQUFDLENBQUNGLEdBQVcsRUFBRUMsR0FBVyxFQUFFO0VBQ25DLE9BQU8sR0FBRyxHQUFHQSxHQUFHLEdBQUcsR0FBRyxHQUFHRCxHQUFHO0FBQzlCO0FBQ0EsU0FBU0csQ0FBQyxDQUFDSCxHQUFXLEVBQUU7RUFDdEIsT0FBTyxHQUFHLEdBQUdBLEdBQUc7QUFDbEI7QUFHQSxTQUFTSSxVQUFVLENBQUNDLEVBQVUsRUFBRUwsR0FBVyxFQUFFQyxHQUFXLEVBQUU7RUFDeEQsT0FBTyxDQUFDLENBQUNGLENBQUMsQ0FBQ0MsR0FBRyxFQUFFQyxHQUFHLENBQUMsR0FBR0ksRUFBRSxHQUFHSCxDQUFDLENBQUNGLEdBQUcsRUFBRUMsR0FBRyxDQUFDLElBQUlJLEVBQUUsR0FBR0YsQ0FBQyxDQUFDSCxHQUFHLENBQUMsSUFBSUssRUFBRTtBQUM5RDtBQUdBLFNBQVNDLFFBQVEsQ0FBQ0QsRUFBVSxFQUFFTCxHQUFXLEVBQUVDLEdBQVcsRUFBRTtFQUN0RCxPQUFPLEdBQUcsR0FBR0YsQ0FBQyxDQUFDQyxHQUFHLEVBQUVDLEdBQUcsQ0FBQyxHQUFHSSxFQUFFLEdBQUdBLEVBQUUsR0FBRyxHQUFHLEdBQUdILENBQUMsQ0FBQ0YsR0FBRyxFQUFFQyxHQUFHLENBQUMsR0FBR0ksRUFBRSxHQUFHRixDQUFDLENBQUNILEdBQUcsQ0FBQztBQUN0RTtBQUVBLFNBQVNPLGVBQWUsQ0FDdEJDLEVBQVUsRUFDVkMsR0FBVyxFQUNYQyxHQUFXLEVBQ1hDLEdBQVcsRUFDWEMsR0FBVyxFQUNYO0VBQ0EsSUFBSUMsUUFBUTtJQUNWQyxRQUFRO0lBQ1JDLENBQUMsR0FBRyxDQUFDO0lBQ0xDLEVBQUUsR0FBR1AsR0FBRztJQUNSUSxFQUFFLEdBQUdQLEdBQUc7RUFDVixHQUFHO0lBQ0RJLFFBQVEsR0FBR0UsRUFBRSxHQUFHLENBQUNDLEVBQUUsR0FBR0QsRUFBRSxJQUFJLEdBQUc7SUFDL0JILFFBQVEsR0FBR1QsVUFBVSxDQUFDVSxRQUFRLEVBQUVILEdBQUcsRUFBRUMsR0FBRyxDQUFDLEdBQUdKLEVBQUU7SUFDOUMsSUFBSUssUUFBUSxHQUFHLEdBQUcsRUFBRTtNQUNsQkksRUFBRSxHQUFHSCxRQUFRO0lBQ2YsQ0FBQyxNQUFNO01BQ0xFLEVBQUUsR0FBR0YsUUFBUTtJQUNmO0VBQ0YsQ0FBQyxRQUNDSSxJQUFJLENBQUNDLEdBQUcsQ0FBQ04sUUFBUSxDQUFDLEdBQUdwQixxQkFBcUIsSUFDMUMsRUFBRXNCLENBQUMsR0FBR3JCLDBCQUEwQjtFQUVsQyxPQUFPb0IsUUFBUTtBQUNqQjtBQUVBLFNBQVNNLG9CQUFvQixDQUMzQlosRUFBVSxFQUNWYSxRQUFnQixFQUNoQlYsR0FBVyxFQUNYQyxHQUFXLEVBQ1g7RUFDQSxJQUFJVSxPQUFPLEdBQUdELFFBQVE7RUFDdEIsS0FBSyxJQUFJTixDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUd4QixpQkFBaUIsRUFBRSxFQUFFd0IsQ0FBQyxFQUFFO0lBQzFDLElBQU1RLFlBQVksR0FBR2pCLFFBQVEsQ0FBQ2dCLE9BQU8sRUFBRVgsR0FBRyxFQUFFQyxHQUFHLENBQUM7SUFDaEQsSUFBSVcsWUFBWSxLQUFLLEdBQUcsRUFBRTtNQUN4QixPQUFPRCxPQUFPO0lBQ2hCO0lBQ0EsSUFBTVQsUUFBUSxHQUFHVCxVQUFVLENBQUNrQixPQUFPLEVBQUVYLEdBQUcsRUFBRUMsR0FBRyxDQUFDLEdBQUdKLEVBQUU7SUFDbkRjLE9BQU8sSUFBSVQsUUFBUSxHQUFHVSxZQUFZO0VBQ3BDO0VBQ0EsT0FBT0QsT0FBTztBQUNoQjtBQUVlLFNBQVNFLE1BQU0sQ0FDNUJiLEdBQVcsRUFDWGMsR0FBVyxFQUNYYixHQUFXLEVBQ1hjLEdBQVcsRUFDWTtFQUN2QixJQUFJLEVBQUVmLEdBQUcsSUFBSSxDQUFDLElBQUlBLEdBQUcsSUFBSSxDQUFDLElBQUlDLEdBQUcsSUFBSSxDQUFDLElBQUlBLEdBQUcsSUFBSSxDQUFDLENBQUMsRUFBRTtJQUNuRCxNQUFNLElBQUllLEtBQUssQ0FBQyx5Q0FBeUMsQ0FBQztFQUM1RDtFQUdBLElBQU1DLFlBQVksR0FBRy9CLHFCQUFxQixHQUN0QyxJQUFJQyxZQUFZLENBQUNILGdCQUFnQixDQUFDLEdBQ2xDLElBQUlrQyxLQUFLLENBQUNsQyxnQkFBZ0IsQ0FBQztFQUMvQixJQUFJZ0IsR0FBRyxLQUFLYyxHQUFHLElBQUliLEdBQUcsS0FBS2MsR0FBRyxFQUFFO0lBQzlCLEtBQUssSUFBSVgsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHcEIsZ0JBQWdCLEVBQUUsRUFBRW9CLENBQUMsRUFBRTtNQUN6Q2EsWUFBWSxDQUFDYixDQUFDLENBQUMsR0FBR1gsVUFBVSxDQUFDVyxDQUFDLEdBQUduQixlQUFlLEVBQUVlLEdBQUcsRUFBRUMsR0FBRyxDQUFDO0lBQzdEO0VBQ0Y7RUFFQSxTQUFTa0IsUUFBUSxDQUFDdEIsRUFBVSxFQUFFO0lBQzVCLElBQUl1QixhQUFhLEdBQUcsR0FBRztJQUN2QixJQUFJQyxhQUFhLEdBQUcsQ0FBQztJQUNyQixJQUFNQyxVQUFVLEdBQUd0QyxnQkFBZ0IsR0FBRyxDQUFDO0lBRXZDLE9BRUVxQyxhQUFhLEtBQUtDLFVBQVUsSUFBSUwsWUFBWSxDQUFDSSxhQUFhLENBQUMsSUFBSXhCLEVBQUUsRUFDakUsRUFBRXdCLGFBQWEsRUFDZjtNQUNBRCxhQUFhLElBQUluQyxlQUFlO0lBQ2xDO0lBQ0EsRUFBRW9DLGFBQWE7SUFHZixJQUFNRSxJQUFJLEdBQ1IsQ0FBQzFCLEVBQUUsR0FBR29CLFlBQVksQ0FBQ0ksYUFBYSxDQUFDLEtBQ2hDSixZQUFZLENBQUNJLGFBQWEsR0FBRyxDQUFDLENBQUMsR0FBR0osWUFBWSxDQUFDSSxhQUFhLENBQUMsQ0FBQztJQUNqRSxJQUFNRyxTQUFTLEdBQUdKLGFBQWEsR0FBR0csSUFBSSxHQUFHdEMsZUFBZTtJQUV4RCxJQUFNd0MsWUFBWSxHQUFHOUIsUUFBUSxDQUFDNkIsU0FBUyxFQUFFeEIsR0FBRyxFQUFFQyxHQUFHLENBQUM7SUFDbEQsSUFBSXdCLFlBQVksSUFBSTVDLGdCQUFnQixFQUFFO01BQ3BDLE9BQU80QixvQkFBb0IsQ0FBQ1osRUFBRSxFQUFFMkIsU0FBUyxFQUFFeEIsR0FBRyxFQUFFQyxHQUFHLENBQUM7SUFDdEQsQ0FBQyxNQUFNLElBQUl3QixZQUFZLEtBQUssR0FBRyxFQUFFO01BQy9CLE9BQU9ELFNBQVM7SUFDbEIsQ0FBQyxNQUFNO01BQ0wsT0FBTzVCLGVBQWUsQ0FDcEJDLEVBQUUsRUFDRnVCLGFBQWEsRUFDYkEsYUFBYSxHQUFHbkMsZUFBZSxFQUMvQmUsR0FBRyxFQUNIQyxHQUFHLENBQ0o7SUFDSDtFQUNGO0VBRUEsT0FBTyxTQUFTeUIsWUFBWSxDQUFDQyxDQUFTLEVBQVU7SUFDOUMsSUFBSTNCLEdBQUcsS0FBS2MsR0FBRyxJQUFJYixHQUFHLEtBQUtjLEdBQUcsRUFBRTtNQUM5QixPQUFPWSxDQUFDO0lBQ1Y7SUFFQSxJQUFJQSxDQUFDLEtBQUssQ0FBQyxFQUFFO01BQ1gsT0FBTyxDQUFDO0lBQ1Y7SUFDQSxJQUFJQSxDQUFDLEtBQUssQ0FBQyxFQUFFO01BQ1gsT0FBTyxDQUFDO0lBQ1Y7SUFDQSxPQUFPbEMsVUFBVSxDQUFDMEIsUUFBUSxDQUFDUSxDQUFDLENBQUMsRUFBRWIsR0FBRyxFQUFFQyxHQUFHLENBQUM7RUFDMUMsQ0FBQztBQUNIIn0=