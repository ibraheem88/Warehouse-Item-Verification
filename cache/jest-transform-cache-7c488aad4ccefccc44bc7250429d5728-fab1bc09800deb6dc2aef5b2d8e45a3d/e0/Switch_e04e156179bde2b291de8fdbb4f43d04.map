{"version":3,"names":["returnsFalse","returnsTrue","SwitchWithForwardedRef","React","forwardRef","Switch","props","forwardedRef","disabled","ios_backgroundColor","onChange","onValueChange","style","thumbColor","trackColor","value","restProps","trackColorForFalse","false","trackColorForTrue","true","nativeSwitchRef","useRef","ref","useMergeRefs","useState","native","setNative","handleChange","event","nativeEvent","useLayoutEffect","jsValue","shouldUpdateNativeSwitch","current","setNativeProps","Platform","OS","AndroidSwitchCommands","setNativeValue","SwitchCommands","setValue","accessibilityState","_disabled","_accessibilityState","platformProps","enabled","on","thumbTintColor","trackTintColor","accessibilityRole","onTintColor","StyleSheet","compose","height","width","backgroundColor","borderRadius","tintColor"],"sources":["Switch.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n * @generate-docs\n */\n\nimport type {ColorValue} from '../../StyleSheet/StyleSheet';\nimport type {SyntheticEvent} from '../../Types/CoreEventTypes';\nimport type {ViewProps} from '../View/ViewPropTypes';\n\nimport StyleSheet from '../../StyleSheet/StyleSheet';\nimport Platform from '../../Utilities/Platform';\nimport useMergeRefs from '../../Utilities/useMergeRefs';\nimport AndroidSwitchNativeComponent, {\n  Commands as AndroidSwitchCommands,\n} from './AndroidSwitchNativeComponent';\nimport SwitchNativeComponent, {\n  Commands as SwitchCommands,\n} from './SwitchNativeComponent';\nimport * as React from 'react';\n\ntype SwitchChangeEvent = SyntheticEvent<\n  $ReadOnly<{|\n    value: boolean,\n    target: number,\n  |}>,\n>;\n\nexport type Props = $ReadOnly<{|\n  ...ViewProps,\n\n  /**\n    If true the user won't be able to toggle the switch.\n\n    @default false\n   */\n  disabled?: ?boolean,\n\n  /**\n    The value of the switch. If true the switch will be turned on.\n\n    @default false\n   */\n  value?: ?boolean,\n\n  /**\n    Color of the foreground switch grip. If this is set on iOS, the switch grip will lose its drop shadow.\n   */\n  thumbColor?: ?ColorValue,\n\n  /**\n    Custom colors for the switch track.\n\n    _iOS_: When the switch value is false, the track shrinks into the border. If you want to change the\n    color of the background exposed by the shrunken track, use\n     [`ios_backgroundColor`](https://reactnative.dev/docs/switch#ios_backgroundColor).\n   */\n  trackColor?: ?$ReadOnly<{|\n    false?: ?ColorValue,\n    true?: ?ColorValue,\n  |}>,\n\n  /**\n    On iOS, custom color for the background. This background color can be\n    seen either when the switch value is false or when the switch is\n    disabled (and the switch is translucent).\n   */\n  ios_backgroundColor?: ?ColorValue,\n\n  /**\n    Invoked when the user tries to change the value of the switch. Receives\n    the change event as an argument. If you want to only receive the new\n    value, use `onValueChange` instead.\n   */\n  onChange?: ?(event: SwitchChangeEvent) => Promise<void> | void,\n\n  /**\n    Invoked when the user tries to change the value of the switch. Receives\n    the new value as an argument. If you want to instead receive an event,\n    use `onChange`.\n   */\n  onValueChange?: ?(value: boolean) => Promise<void> | void,\n|}>;\nconst returnsFalse = () => false;\nconst returnsTrue = () => true;\n\n/**\n  Renders a boolean input.\n\n  This is a controlled component that requires an `onValueChange`\n  callback that updates the `value` prop in order for the component to\n  reflect user actions. If the `value` prop is not updated, the\n  component will continue to render the supplied `value` prop instead of\n  the expected result of any user actions.\n\n  ```SnackPlayer name=Switch\n  import React, { useState } from \"react\";\n  import { View, Switch, StyleSheet } from \"react-native\";\n\n  const App = () => {\n    const [isEnabled, setIsEnabled] = useState(false);\n    const toggleSwitch = () => setIsEnabled(previousState => !previousState);\n\n    return (\n      <View style={styles.container}>\n        <Switch\n          trackColor={{ false: \"#767577\", true: \"#81b0ff\" }}\n          thumbColor={isEnabled ? \"#f5dd4b\" : \"#f4f3f4\"}\n          ios_backgroundColor=\"#3e3e3e\"\n          onValueChange={toggleSwitch}\n          value={isEnabled}\n        />\n      </View>\n    );\n  }\n\n  const styles = StyleSheet.create({\n    container: {\n      flex: 1,\n      alignItems: \"center\",\n      justifyContent: \"center\"\n    }\n  });\n\n  export default App;\n  ```\n */\n\nconst SwitchWithForwardedRef: React.AbstractComponent<\n  Props,\n  React.ElementRef<\n    typeof SwitchNativeComponent | typeof AndroidSwitchNativeComponent,\n  >,\n> = React.forwardRef(function Switch(props, forwardedRef): React.Node {\n  const {\n    disabled,\n    ios_backgroundColor,\n    onChange,\n    onValueChange,\n    style,\n    thumbColor,\n    trackColor,\n    value,\n    ...restProps\n  } = props;\n  const trackColorForFalse = trackColor?.false;\n  const trackColorForTrue = trackColor?.true;\n\n  const nativeSwitchRef = React.useRef<React.ElementRef<\n    typeof SwitchNativeComponent | typeof AndroidSwitchNativeComponent,\n  > | null>(null);\n\n  const ref = useMergeRefs(nativeSwitchRef, forwardedRef);\n\n  const [native, setNative] = React.useState({value: null});\n\n  const handleChange = (event: SwitchChangeEvent) => {\n    onChange?.(event);\n    onValueChange?.(event.nativeEvent.value);\n    setNative({value: event.nativeEvent.value});\n  };\n\n  React.useLayoutEffect(() => {\n    // This is necessary in case native updates the switch and JS decides\n    // that the update should be ignored and we should stick with the value\n    // that we have in JS.\n    const jsValue = value === true;\n    const shouldUpdateNativeSwitch =\n      native.value != null && native.value !== jsValue;\n    if (\n      shouldUpdateNativeSwitch &&\n      nativeSwitchRef.current?.setNativeProps != null\n    ) {\n      if (Platform.OS === 'android') {\n        AndroidSwitchCommands.setNativeValue(nativeSwitchRef.current, jsValue);\n      } else {\n        SwitchCommands.setValue(nativeSwitchRef.current, jsValue);\n      }\n    }\n  }, [value, native]);\n\n  if (Platform.OS === 'android') {\n    const {accessibilityState} = restProps;\n    const _disabled =\n      disabled != null ? disabled : accessibilityState?.disabled;\n\n    const _accessibilityState =\n      _disabled !== accessibilityState?.disabled\n        ? {...accessibilityState, disabled: _disabled}\n        : accessibilityState;\n\n    const platformProps = {\n      accessibilityState: _accessibilityState,\n      enabled: _disabled !== true,\n      on: value === true,\n      style,\n      thumbTintColor: thumbColor,\n      trackColorForFalse: trackColorForFalse,\n      trackColorForTrue: trackColorForTrue,\n      trackTintColor: value === true ? trackColorForTrue : trackColorForFalse,\n    };\n\n    return (\n      <AndroidSwitchNativeComponent\n        {...restProps}\n        {...platformProps}\n        accessibilityRole={props.accessibilityRole ?? 'switch'}\n        onChange={handleChange}\n        onResponderTerminationRequest={returnsFalse}\n        onStartShouldSetResponder={returnsTrue}\n        ref={ref}\n      />\n    );\n  } else {\n    const platformProps = {\n      disabled,\n      onTintColor: trackColorForTrue,\n      style: StyleSheet.compose(\n        {height: 31, width: 51},\n        StyleSheet.compose(\n          style,\n          ios_backgroundColor == null\n            ? null\n            : {\n                backgroundColor: ios_backgroundColor,\n                borderRadius: 16,\n              },\n        ),\n      ),\n      thumbTintColor: thumbColor,\n      tintColor: trackColorForFalse,\n      value: value === true,\n    };\n\n    return (\n      <SwitchNativeComponent\n        {...restProps}\n        {...platformProps}\n        accessibilityRole={props.accessibilityRole ?? 'switch'}\n        onChange={handleChange}\n        onResponderTerminationRequest={returnsFalse}\n        onStartShouldSetResponder={returnsTrue}\n        ref={ref}\n      />\n    );\n  }\n});\n\nexport default SwitchWithForwardedRef;\n"],"mappings":"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"}