{"version":3,"mappings":";;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;AAWA,SAASA,qBAAT,CACEC,OADF,EAEEC,QAFF,EAGE;EACA;;EACA,IAAIC,aAAJ;EACA,IAAID,QAAQ,KAAKE,SAAjB,EAA4B;IAC1BD,aAAa,GAAG;MACdE,WAAW,EAAEJ,OAAO,CAACK;IADP,CAAhB;EAGD,CAJD,MAIO;IACLH,aAAa,GAAG;MACdE,WAAW,EAAEJ,OAAO,CAACK,KAAR,GAAgBJ,QAAQ,CAACI;IADxB,CAAhB;EAGD;EAED,yBAAYL,OAAL,EAAiBE;AACzB;AAAA,IAEYI,iBAAN;EAAA;EAAA;EAMLC,6BAAc;IAAA;IAAA;IACZ;IADYC,uEAF+C,EAE/C;IAGZ,MAAKC,WAAL,GAAmB,0BAAnB;IAAA;EACD;EAAA;IAAA;IAAA,OAEDC,kBAASL,KAAD,EAAgB;MACtB,KAAKM,MAAL,CAAYD,QAAZ,GAAuBL,KAAvB;MACA,OAAO,IAAP;IACD;EAAA;IAAA;IAAA,OAEDO,kBAASP,KAAD,EAAgB;MACtB,KAAKM,MAAL,CAAYC,QAAZ,GAAuBP,KAAvB;MACA,OAAO,IAAP;IACD;EAAA;IAAA;IAAA,OAEDQ,8BAAqBC,KAAD,EAAiB;MACnC,KAAKH,MAAL,CAAYE,oBAAZ,GAAmCC,KAAnC;MACA,OAAO,IAAP;IACD;EAAA;IAAA;IAAA,OAEDC,kBACEC,QADM,EASN;MAEA,KAAKC,QAAL,CAAclB,qBAAd,GAAsCA,qBAAtC;MACA,mHAAsBiB,QAAf;IACR;EAAA;EAAA;AAAA,EAxCoCE,6BAAhC","names":["changeEventCalculator","current","previous","changePayload","undefined","forceChange","force","ForceTouchGesture","constructor","_defineProperty","handlerName","minForce","config","maxForce","feedbackOnActivation","value","onChange","callback","handlers","ContinousBaseGesture"],"sources":["forceTouchGesture.ts"],"sourcesContent":["import { BaseGestureConfig, ContinousBaseGesture } from './gesture';\nimport {\n  ForceTouchGestureConfig,\n  ForceTouchGestureHandlerEventPayload,\n} from '../ForceTouchGestureHandler';\nimport { GestureUpdateEvent } from '../gestureHandlerCommon';\n\nexport type ForceTouchGestureChangeEventPayload = {\n  forceChange: number;\n};\n\nfunction changeEventCalculator(\n  current: GestureUpdateEvent<ForceTouchGestureHandlerEventPayload>,\n  previous?: GestureUpdateEvent<ForceTouchGestureHandlerEventPayload>\n) {\n  'worklet';\n  let changePayload: ForceTouchGestureChangeEventPayload;\n  if (previous === undefined) {\n    changePayload = {\n      forceChange: current.force,\n    };\n  } else {\n    changePayload = {\n      forceChange: current.force - previous.force,\n    };\n  }\n\n  return { ...current, ...changePayload };\n}\n\nexport class ForceTouchGesture extends ContinousBaseGesture<\n  ForceTouchGestureHandlerEventPayload,\n  ForceTouchGestureChangeEventPayload\n> {\n  public config: BaseGestureConfig & ForceTouchGestureConfig = {};\n\n  constructor() {\n    super();\n\n    this.handlerName = 'ForceTouchGestureHandler';\n  }\n\n  minForce(force: number) {\n    this.config.minForce = force;\n    return this;\n  }\n\n  maxForce(force: number) {\n    this.config.maxForce = force;\n    return this;\n  }\n\n  feedbackOnActivation(value: boolean) {\n    this.config.feedbackOnActivation = value;\n    return this;\n  }\n\n  onChange(\n    callback: (\n      event: GestureUpdateEvent<\n        GestureUpdateEvent<\n          ForceTouchGestureHandlerEventPayload &\n            ForceTouchGestureChangeEventPayload\n        >\n      >\n    ) => void\n  ) {\n    // @ts-ignore TS being overprotective, ForceTouchGestureHandlerEventPayload is Record\n    this.handlers.changeEventCalculator = changeEventCalculator;\n    return super.onChange(callback);\n  }\n}\n\nexport type ForceTouchGestureType = InstanceType<typeof ForceTouchGesture>;\n"]}