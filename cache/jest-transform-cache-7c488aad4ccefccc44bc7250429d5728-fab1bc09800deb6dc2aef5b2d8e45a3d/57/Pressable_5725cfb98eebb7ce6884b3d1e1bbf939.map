{"version":3,"names":["Pressable","props","forwardedRef","accessible","accessibilityState","ariaLive","android_disableSound","android_ripple","ariaBusy","ariaChecked","ariaDisabled","ariaExpanded","ariaLabel","ariaSelected","cancelable","children","delayHoverIn","delayHoverOut","delayLongPress","disabled","focusable","hitSlop","onHoverIn","onHoverOut","onLongPress","onPress","onPressIn","onPressOut","pressRetentionOffset","style","testOnly_pressed","unstable_pressDelay","restProps","viewRef","useRef","useImperativeHandle","current","android_rippleConfig","useAndroidRippleForView","usePressState","pressed","setPressed","_accessibilityState","busy","checked","expanded","selected","accessibilityValue","max","min","now","text","accessibilityLiveRegion","accessibilityLabel","restPropsWithDefaults","viewProps","accessibilityViewIsModal","config","useMemo","pressRectOffset","delayPressIn","event","onPressMove","eventHandlers","usePressability","__DEV__","forcePressed","useState","MemoedPressable","React","memo","forwardRef","displayName"],"sources":["Pressable.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport type {\n  LayoutEvent,\n  MouseEvent,\n  PressEvent,\n} from '../../Types/CoreEventTypes';\nimport type {\n  AccessibilityActionEvent,\n  AccessibilityActionInfo,\n  AccessibilityRole,\n  AccessibilityState,\n  AccessibilityValue,\n} from '../View/ViewAccessibility';\n\nimport {PressabilityDebugView} from '../../Pressability/PressabilityDebug';\nimport usePressability from '../../Pressability/usePressability';\nimport {type RectOrSize} from '../../StyleSheet/Rect';\nimport View from '../View/View';\nimport useAndroidRippleForView, {\n  type RippleConfig,\n} from './useAndroidRippleForView';\nimport * as React from 'react';\nimport {useImperativeHandle, useMemo, useRef, useState} from 'react';\n\ntype ViewStyleProp = $ElementType<React.ElementConfig<typeof View>, 'style'>;\n\nexport type StateCallbackType = $ReadOnly<{|\n  pressed: boolean,\n|}>;\n\ntype Props = $ReadOnly<{|\n  /**\n   * Accessibility.\n   */\n  accessibilityActions?: ?$ReadOnlyArray<AccessibilityActionInfo>,\n  accessibilityElementsHidden?: ?boolean,\n  accessibilityHint?: ?Stringish,\n  accessibilityLanguage?: ?Stringish,\n  accessibilityIgnoresInvertColors?: ?boolean,\n  accessibilityLabel?: ?Stringish,\n  accessibilityLiveRegion?: ?('none' | 'polite' | 'assertive'),\n  accessibilityRole?: ?AccessibilityRole,\n  accessibilityState?: ?AccessibilityState,\n  accessibilityValue?: ?AccessibilityValue,\n  'aria-valuemax'?: AccessibilityValue['max'],\n  'aria-valuemin'?: AccessibilityValue['min'],\n  'aria-valuenow'?: AccessibilityValue['now'],\n  'aria-valuetext'?: AccessibilityValue['text'],\n  accessibilityViewIsModal?: ?boolean,\n  'aria-modal'?: ?boolean,\n  accessible?: ?boolean,\n\n  /**\n   * alias for accessibilityState\n   *\n   * see https://reactnative.dev/docs/accessibility#accessibilitystate\n   */\n  'aria-busy'?: ?boolean,\n  'aria-checked'?: ?boolean | 'mixed',\n  'aria-disabled'?: ?boolean,\n  'aria-expanded'?: ?boolean,\n  'aria-selected'?: ?boolean,\n  /**\n   * A value indicating whether the accessibility elements contained within\n   * this accessibility element are hidden.\n   */\n  'aria-hidden'?: ?boolean,\n  'aria-live'?: ?('polite' | 'assertive' | 'off'),\n  focusable?: ?boolean,\n  importantForAccessibility?: ?('auto' | 'yes' | 'no' | 'no-hide-descendants'),\n  onAccessibilityAction?: ?(event: AccessibilityActionEvent) => mixed,\n\n  /**\n   * Whether a press gesture can be interrupted by a parent gesture such as a\n   * scroll event. Defaults to true.\n   */\n  cancelable?: ?boolean,\n\n  /**\n   * Either children or a render prop that receives a boolean reflecting whether\n   * the component is currently pressed.\n   */\n  children: React.Node | ((state: StateCallbackType) => React.Node),\n\n  /**\n   * Duration to wait after hover in before calling `onHoverIn`.\n   */\n  delayHoverIn?: ?number,\n\n  /**\n   * Duration to wait after hover out before calling `onHoverOut`.\n   */\n  delayHoverOut?: ?number,\n\n  /**\n   * Duration (in milliseconds) from `onPressIn` before `onLongPress` is called.\n   */\n  delayLongPress?: ?number,\n\n  /**\n   * Whether the press behavior is disabled.\n   */\n  disabled?: ?boolean,\n\n  /**\n   * Additional distance outside of this view in which a press is detected.\n   */\n  hitSlop?: ?RectOrSize,\n\n  /**\n   * Additional distance outside of this view in which a touch is considered a\n   * press before `onPressOut` is triggered.\n   */\n  pressRetentionOffset?: ?RectOrSize,\n\n  /**\n   * Called when this view's layout changes.\n   */\n  onLayout?: ?(event: LayoutEvent) => mixed,\n\n  /**\n   * Called when the hover is activated to provide visual feedback.\n   */\n  onHoverIn?: ?(event: MouseEvent) => mixed,\n\n  /**\n   * Called when the hover is deactivated to undo visual feedback.\n   */\n  onHoverOut?: ?(event: MouseEvent) => mixed,\n\n  /**\n   * Called when a long-tap gesture is detected.\n   */\n  onLongPress?: ?(event: PressEvent) => mixed,\n\n  /**\n   * Called when a single tap gesture is detected.\n   */\n  onPress?: ?(event: PressEvent) => mixed,\n\n  /**\n   * Called when a touch is engaged before `onPress`.\n   */\n  onPressIn?: ?(event: PressEvent) => mixed,\n\n  /**\n   * Called when a touch is released before `onPress`.\n   */\n  onPressOut?: ?(event: PressEvent) => mixed,\n\n  /**\n   * Either view styles or a function that receives a boolean reflecting whether\n   * the component is currently pressed and returns view styles.\n   */\n  style?: ViewStyleProp | ((state: StateCallbackType) => ViewStyleProp),\n\n  /**\n   * Identifier used to find this view in tests.\n   */\n  testID?: ?string,\n\n  /**\n   * If true, doesn't play system sound on touch.\n   */\n  android_disableSound?: ?boolean,\n\n  /**\n   * Enables the Android ripple effect and configures its color.\n   */\n  android_ripple?: ?RippleConfig,\n\n  /**\n   * Used only for documentation or testing (e.g. snapshot testing).\n   */\n  testOnly_pressed?: ?boolean,\n\n  /**\n   * Duration to wait after press down before calling `onPressIn`.\n   */\n  unstable_pressDelay?: ?number,\n  /**\n   * Web to Native Accessibilty props\n   * https://github.com/facebook/react-native/issues/34424\n   */\n  'aria-label'?: ?string,\n|}>;\n\n/**\n * Component used to build display components that should respond to whether the\n * component is currently pressed or not.\n */\n/* $FlowFixMe[missing-local-annot] The type annotation(s) required by Flow's\n * LTI update could not be added via codemod */\nfunction Pressable(props: Props, forwardedRef): React.Node {\n  const {\n    accessible,\n    accessibilityState,\n    'aria-live': ariaLive,\n    android_disableSound,\n    android_ripple,\n    'aria-busy': ariaBusy,\n    'aria-checked': ariaChecked,\n    'aria-disabled': ariaDisabled,\n    'aria-expanded': ariaExpanded,\n    'aria-label': ariaLabel,\n    'aria-selected': ariaSelected,\n    cancelable,\n    children,\n    delayHoverIn,\n    delayHoverOut,\n    delayLongPress,\n    disabled,\n    focusable,\n    hitSlop,\n    onHoverIn,\n    onHoverOut,\n    onLongPress,\n    onPress,\n    onPressIn,\n    onPressOut,\n    pressRetentionOffset,\n    style,\n    testOnly_pressed,\n    unstable_pressDelay,\n    ...restProps\n  } = props;\n\n  const viewRef = useRef<React.ElementRef<typeof View> | null>(null);\n  useImperativeHandle(forwardedRef, () => viewRef.current);\n\n  const android_rippleConfig = useAndroidRippleForView(android_ripple, viewRef);\n\n  const [pressed, setPressed] = usePressState(testOnly_pressed === true);\n\n  let _accessibilityState = {\n    busy: ariaBusy ?? accessibilityState?.busy,\n    checked: ariaChecked ?? accessibilityState?.checked,\n    disabled: ariaDisabled ?? accessibilityState?.disabled,\n    expanded: ariaExpanded ?? accessibilityState?.expanded,\n    selected: ariaSelected ?? accessibilityState?.selected,\n  };\n\n  _accessibilityState =\n    disabled != null ? {..._accessibilityState, disabled} : _accessibilityState;\n\n  const accessibilityValue = {\n    max: props['aria-valuemax'] ?? props.accessibilityValue?.max,\n    min: props['aria-valuemin'] ?? props.accessibilityValue?.min,\n    now: props['aria-valuenow'] ?? props.accessibilityValue?.now,\n    text: props['aria-valuetext'] ?? props.accessibilityValue?.text,\n  };\n\n  const accessibilityLiveRegion =\n    ariaLive === 'off' ? 'none' : ariaLive ?? props.accessibilityLiveRegion;\n\n  const accessibilityLabel = ariaLabel ?? props.accessibilityLabel;\n  const restPropsWithDefaults: React.ElementConfig<typeof View> = {\n    ...restProps,\n    ...android_rippleConfig?.viewProps,\n    accessible: accessible !== false,\n    accessibilityViewIsModal:\n      restProps['aria-modal'] ?? restProps.accessibilityViewIsModal,\n    accessibilityLiveRegion,\n    accessibilityLabel,\n    accessibilityState: _accessibilityState,\n    focusable: focusable !== false,\n    accessibilityValue,\n    hitSlop,\n  };\n\n  const config = useMemo(\n    () => ({\n      cancelable,\n      disabled,\n      hitSlop,\n      pressRectOffset: pressRetentionOffset,\n      android_disableSound,\n      delayHoverIn,\n      delayHoverOut,\n      delayLongPress,\n      delayPressIn: unstable_pressDelay,\n      onHoverIn,\n      onHoverOut,\n      onLongPress,\n      onPress,\n      onPressIn(event: PressEvent): void {\n        if (android_rippleConfig != null) {\n          android_rippleConfig.onPressIn(event);\n        }\n        setPressed(true);\n        if (onPressIn != null) {\n          onPressIn(event);\n        }\n      },\n      onPressMove: android_rippleConfig?.onPressMove,\n      onPressOut(event: PressEvent): void {\n        if (android_rippleConfig != null) {\n          android_rippleConfig.onPressOut(event);\n        }\n        setPressed(false);\n        if (onPressOut != null) {\n          onPressOut(event);\n        }\n      },\n    }),\n    [\n      android_disableSound,\n      android_rippleConfig,\n      cancelable,\n      delayHoverIn,\n      delayHoverOut,\n      delayLongPress,\n      disabled,\n      hitSlop,\n      onHoverIn,\n      onHoverOut,\n      onLongPress,\n      onPress,\n      onPressIn,\n      onPressOut,\n      pressRetentionOffset,\n      setPressed,\n      unstable_pressDelay,\n    ],\n  );\n  const eventHandlers = usePressability(config);\n\n  return (\n    <View\n      {...restPropsWithDefaults}\n      {...eventHandlers}\n      ref={viewRef}\n      style={typeof style === 'function' ? style({pressed}) : style}\n      collapsable={false}>\n      {typeof children === 'function' ? children({pressed}) : children}\n      {__DEV__ ? <PressabilityDebugView color=\"red\" hitSlop={hitSlop} /> : null}\n    </View>\n  );\n}\n\nfunction usePressState(forcePressed: boolean): [boolean, (boolean) => void] {\n  const [pressed, setPressed] = useState(false);\n  return [pressed || forcePressed, setPressed];\n}\n\nconst MemoedPressable = React.memo(React.forwardRef(Pressable));\nMemoedPressable.displayName = 'Pressable';\n\nexport default (MemoedPressable: React.AbstractComponent<\n  Props,\n  React.ElementRef<typeof View>,\n>);\n"],"mappings":"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"}