{"version":3,"mappings":"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","names":["DRAG_TOSS","Swipeable","constructor","props","_defineProperty","state","friction","overshootFriction","dragX","rowTranslation","leftWidth","rowWidth","rightOffset","rightWidth","Math","max","overshootLeft","overshootRight","transX","Animated","add","interpolate","inputRange","outputRange","showLeftAction","Value","leftActionTranslate","Number","MIN_VALUE","extrapolate","showRightAction","rightActionTranslate","nativeEvent","oldState","State","ACTIVE","close","ev","handleRelease","velocityX","translationX","rowState","leftThreshold","rightThreshold","startOffsetX","currentOffset","toValue","animateRow","fromValue","setValue","setState","sign","spring","restSpeedThreshold","restDisplacementThreshold","velocity","bounciness","useNativeDriver","useNativeAnimations","animationOptions","start","finished","onSwipeableLeftOpen","onSwipeableOpen","onSwipeableRightOpen","closingDirection","onSwipeableClose","onSwipeableLeftWillOpen","onSwipeableWillOpen","onSwipeableRightWillOpen","onSwipeableWillClose","layout","width","undefined","updateAnimatedEvent","onGestureEvent","event","shouldComponentUpdate","render","children","renderLeftActions","renderRightActions","left","React","_reactNative","View","style","styles","leftActions","transform","translateX","onLayout","x","right","rightActions","_PanGestureHandler","activeOffsetX","onHandlerStateChange","onRowLayout","container","containerStyle","_TapGestureHandler","enabled","onTapHandlerStateChange","pointerEvents","childrenContainerStyle","Component","StyleSheet","create","overflow","absoluteFillObject","flexDirection","I18nManager","isRTL"],"sources":["Swipeable.tsx"],"sourcesContent":["// Similarily to the DrawerLayout component this deserves to be put in a\n// separate repo. Although, keeping it here for the time being will allow us to\n// move faster and fix possible issues quicker\n\nimport * as React from 'react';\nimport { Component } from 'react';\nimport {\n  Animated,\n  StyleSheet,\n  View,\n  I18nManager,\n  LayoutChangeEvent,\n  StyleProp,\n  ViewStyle,\n} from 'react-native';\n\nimport {\n  GestureEvent,\n  HandlerStateChangeEvent,\n} from '../handlers/gestureHandlerCommon';\nimport {\n  PanGestureHandler,\n  PanGestureHandlerEventPayload,\n  PanGestureHandlerProps,\n} from '../handlers/PanGestureHandler';\nimport {\n  TapGestureHandler,\n  TapGestureHandlerEventPayload,\n} from '../handlers/TapGestureHandler';\nimport { State } from '../State';\n\nconst DRAG_TOSS = 0.05;\n\ntype SwipeableExcludes = Exclude<\n  keyof PanGestureHandlerProps,\n  'onGestureEvent' | 'onHandlerStateChange'\n>;\n\n// Animated.AnimatedInterpolation has been converted to a generic type\n// in @types/react-native 0.70. This way we can maintain compatibility\n// with all versions of @types/react-native\ntype AnimatedInterpolation = ReturnType<Animated.Value['interpolate']>;\n\nexport interface SwipeableProps\n  extends Pick<PanGestureHandlerProps, SwipeableExcludes> {\n  /**\n   * Enables two-finger gestures on supported devices, for example iPads with\n   * trackpads. If not enabled the gesture will require click + drag, with\n   * `enableTrackpadTwoFingerGesture` swiping with two fingers will also trigger\n   * the gesture.\n   */\n  enableTrackpadTwoFingerGesture?: boolean;\n\n  /**\n   * Specifies how much the visual interaction will be delayed compared to the\n   * gesture distance. e.g. value of 1 will indicate that the swipeable panel\n   * should exactly follow the gesture, 2 means it is going to be two times\n   * \"slower\".\n   */\n  friction?: number;\n\n  /**\n   * Distance from the left edge at which released panel will animate to the\n   * open state (or the open panel will animate into the closed state). By\n   * default it's a half of the panel's width.\n   */\n  leftThreshold?: number;\n\n  /**\n   * Distance from the right edge at which released panel will animate to the\n   * open state (or the open panel will animate into the closed state). By\n   * default it's a half of the panel's width.\n   */\n  rightThreshold?: number;\n\n  /**\n   * Value indicating if the swipeable panel can be pulled further than the left\n   * actions panel's width. It is set to true by default as long as the left\n   * panel render method is present.\n   */\n  overshootLeft?: boolean;\n\n  /**\n   * Value indicating if the swipeable panel can be pulled further than the\n   * right actions panel's width. It is set to true by default as long as the\n   * right panel render method is present.\n   */\n  overshootRight?: boolean;\n\n  /**\n   * Specifies how much the visual interaction will be delayed compared to the\n   * gesture distance at overshoot. Default value is 1, it mean no friction, for\n   * a native feel, try 8 or above.\n   */\n  overshootFriction?: number;\n\n  /**\n   * @deprecated Use `direction` argument of onSwipeableOpen()\n   *\n   * Called when left action panel gets open.\n   */\n  onSwipeableLeftOpen?: () => void;\n\n  /**\n   * @deprecated Use `direction` argument of onSwipeableOpen()\n   *\n   * Called when right action panel gets open.\n   */\n  onSwipeableRightOpen?: () => void;\n\n  /**\n   * Called when action panel gets open (either right or left).\n   */\n  onSwipeableOpen?: (direction: 'left' | 'right', swipeable: Swipeable) => void;\n\n  /**\n   * Called when action panel is closed.\n   */\n  onSwipeableClose?: (\n    direction: 'left' | 'right',\n    swipeable: Swipeable\n  ) => void;\n\n  /**\n   * @deprecated Use `direction` argument of onSwipeableWillOpen()\n   *\n   * Called when left action panel starts animating on open.\n   */\n  onSwipeableLeftWillOpen?: () => void;\n\n  /**\n   * @deprecated Use `direction` argument of onSwipeableWillOpen()\n   *\n   * Called when right action panel starts animating on open.\n   */\n  onSwipeableRightWillOpen?: () => void;\n\n  /**\n   * Called when action panel starts animating on open (either right or left).\n   */\n  onSwipeableWillOpen?: (direction: 'left' | 'right') => void;\n\n  /**\n   * Called when action panel starts animating on close.\n   */\n  onSwipeableWillClose?: (direction: 'left' | 'right') => void;\n\n  /**\n   *\n   * This map describes the values to use as inputRange for extra interpolation:\n   * AnimatedValue: [startValue, endValue]\n   *\n   * progressAnimatedValue: [0, 1] dragAnimatedValue: [0, +]\n   *\n   * To support `rtl` flexbox layouts use `flexDirection` styling.\n   * */\n  renderLeftActions?: (\n    progressAnimatedValue: AnimatedInterpolation,\n    dragAnimatedValue: AnimatedInterpolation\n  ) => React.ReactNode;\n  /**\n   *\n   * This map describes the values to use as inputRange for extra interpolation:\n   * AnimatedValue: [startValue, endValue]\n   *\n   * progressAnimatedValue: [0, 1] dragAnimatedValue: [0, -]\n   *\n   * To support `rtl` flexbox layouts use `flexDirection` styling.\n   * */\n  renderRightActions?: (\n    progressAnimatedValue: AnimatedInterpolation,\n    dragAnimatedValue: AnimatedInterpolation,\n    swipeable: Swipeable\n  ) => React.ReactNode;\n\n  useNativeAnimations?: boolean;\n\n  animationOptions?: Record<string, unknown>;\n\n  /**\n   * Style object for the container (`Animated.View`), for example to override\n   * `overflow: 'hidden'`.\n   */\n  containerStyle?: StyleProp<ViewStyle>;\n\n  /**\n   * Style object for the children container (`Animated.View`), for example to\n   * apply `flex: 1`\n   */\n  childrenContainerStyle?: StyleProp<ViewStyle>;\n}\n\ntype SwipeableState = {\n  dragX: Animated.Value;\n  rowTranslation: Animated.Value;\n  rowState: number;\n  leftWidth?: number;\n  rightOffset?: number;\n  rowWidth?: number;\n};\n\nexport default class Swipeable extends Component<\n  SwipeableProps,\n  SwipeableState\n> {\n  static defaultProps = {\n    friction: 1,\n    overshootFriction: 1,\n    useNativeAnimations: true,\n  };\n\n  constructor(props: SwipeableProps) {\n    super(props);\n    const dragX = new Animated.Value(0);\n    this.state = {\n      dragX,\n      rowTranslation: new Animated.Value(0),\n      rowState: 0,\n      leftWidth: undefined,\n      rightOffset: undefined,\n      rowWidth: undefined,\n    };\n    this.updateAnimatedEvent(props, this.state);\n\n    this.onGestureEvent = Animated.event(\n      [{ nativeEvent: { translationX: dragX } }],\n      { useNativeDriver: props.useNativeAnimations! }\n    );\n  }\n\n  shouldComponentUpdate(props: SwipeableProps, state: SwipeableState) {\n    if (\n      this.props.friction !== props.friction ||\n      this.props.overshootLeft !== props.overshootLeft ||\n      this.props.overshootRight !== props.overshootRight ||\n      this.props.overshootFriction !== props.overshootFriction ||\n      this.state.leftWidth !== state.leftWidth ||\n      this.state.rightOffset !== state.rightOffset ||\n      this.state.rowWidth !== state.rowWidth\n    ) {\n      this.updateAnimatedEvent(props, state);\n    }\n\n    return true;\n  }\n\n  private onGestureEvent?: (\n    event: GestureEvent<PanGestureHandlerEventPayload>\n  ) => void;\n  private transX?: AnimatedInterpolation;\n  private showLeftAction?: AnimatedInterpolation | Animated.Value;\n  private leftActionTranslate?: AnimatedInterpolation;\n  private showRightAction?: AnimatedInterpolation | Animated.Value;\n  private rightActionTranslate?: AnimatedInterpolation;\n\n  private updateAnimatedEvent = (\n    props: SwipeableProps,\n    state: SwipeableState\n  ) => {\n    const { friction, overshootFriction } = props;\n    const { dragX, rowTranslation, leftWidth = 0, rowWidth = 0 } = state;\n    const { rightOffset = rowWidth } = state;\n    const rightWidth = Math.max(0, rowWidth - rightOffset);\n\n    const { overshootLeft = leftWidth > 0, overshootRight = rightWidth > 0 } =\n      props;\n\n    const transX = Animated.add(\n      rowTranslation,\n      dragX.interpolate({\n        inputRange: [0, friction!],\n        outputRange: [0, 1],\n      })\n    ).interpolate({\n      inputRange: [-rightWidth - 1, -rightWidth, leftWidth, leftWidth + 1],\n      outputRange: [\n        -rightWidth - (overshootRight ? 1 / overshootFriction! : 0),\n        -rightWidth,\n        leftWidth,\n        leftWidth + (overshootLeft ? 1 / overshootFriction! : 0),\n      ],\n    });\n    this.transX = transX;\n    this.showLeftAction =\n      leftWidth > 0\n        ? transX.interpolate({\n            inputRange: [-1, 0, leftWidth],\n            outputRange: [0, 0, 1],\n          })\n        : new Animated.Value(0);\n    this.leftActionTranslate = this.showLeftAction.interpolate({\n      inputRange: [0, Number.MIN_VALUE],\n      outputRange: [-10000, 0],\n      extrapolate: 'clamp',\n    });\n    this.showRightAction =\n      rightWidth > 0\n        ? transX.interpolate({\n            inputRange: [-rightWidth, 0, 1],\n            outputRange: [1, 0, 0],\n          })\n        : new Animated.Value(0);\n    this.rightActionTranslate = this.showRightAction.interpolate({\n      inputRange: [0, Number.MIN_VALUE],\n      outputRange: [-10000, 0],\n      extrapolate: 'clamp',\n    });\n  };\n\n  private onTapHandlerStateChange = ({\n    nativeEvent,\n  }: HandlerStateChangeEvent<TapGestureHandlerEventPayload>) => {\n    if (nativeEvent.oldState === State.ACTIVE) {\n      this.close();\n    }\n  };\n\n  private onHandlerStateChange = (\n    ev: HandlerStateChangeEvent<PanGestureHandlerEventPayload>\n  ) => {\n    if (ev.nativeEvent.oldState === State.ACTIVE) {\n      this.handleRelease(ev);\n    }\n  };\n\n  private handleRelease = (\n    ev: HandlerStateChangeEvent<PanGestureHandlerEventPayload>\n  ) => {\n    const { velocityX, translationX: dragX } = ev.nativeEvent;\n    const { leftWidth = 0, rowWidth = 0, rowState } = this.state;\n    const { rightOffset = rowWidth } = this.state;\n    const rightWidth = rowWidth - rightOffset;\n    const {\n      friction,\n      leftThreshold = leftWidth / 2,\n      rightThreshold = rightWidth / 2,\n    } = this.props;\n\n    const startOffsetX = this.currentOffset() + dragX / friction!;\n    const translationX = (dragX + DRAG_TOSS * velocityX) / friction!;\n\n    let toValue = 0;\n    if (rowState === 0) {\n      if (translationX > leftThreshold) {\n        toValue = leftWidth;\n      } else if (translationX < -rightThreshold) {\n        toValue = -rightWidth;\n      }\n    } else if (rowState === 1) {\n      // swiped to left\n      if (translationX > -leftThreshold) {\n        toValue = leftWidth;\n      }\n    } else {\n      // swiped to right\n      if (translationX < rightThreshold) {\n        toValue = -rightWidth;\n      }\n    }\n\n    this.animateRow(startOffsetX, toValue, velocityX / friction!);\n  };\n\n  private animateRow = (\n    fromValue: number,\n    toValue: number,\n    velocityX?:\n      | number\n      | {\n          x: number;\n          y: number;\n        }\n  ) => {\n    const { dragX, rowTranslation } = this.state;\n    dragX.setValue(0);\n    rowTranslation.setValue(fromValue);\n\n    this.setState({ rowState: Math.sign(toValue) });\n    Animated.spring(rowTranslation, {\n      restSpeedThreshold: 1.7,\n      restDisplacementThreshold: 0.4,\n      velocity: velocityX,\n      bounciness: 0,\n      toValue,\n      useNativeDriver: this.props.useNativeAnimations!,\n      ...this.props.animationOptions,\n    }).start(({ finished }) => {\n      if (finished) {\n        if (toValue > 0) {\n          this.props.onSwipeableLeftOpen?.();\n          this.props.onSwipeableOpen?.('left', this);\n        } else if (toValue < 0) {\n          this.props.onSwipeableRightOpen?.();\n          this.props.onSwipeableOpen?.('right', this);\n        } else {\n          const closingDirection = fromValue > 0 ? 'left' : 'right';\n          this.props.onSwipeableClose?.(closingDirection, this);\n        }\n      }\n    });\n    if (toValue > 0) {\n      this.props.onSwipeableLeftWillOpen?.();\n      this.props.onSwipeableWillOpen?.('left');\n    } else if (toValue < 0) {\n      this.props.onSwipeableRightWillOpen?.();\n      this.props.onSwipeableWillOpen?.('right');\n    } else {\n      const closingDirection = fromValue > 0 ? 'left' : 'right';\n      this.props.onSwipeableWillClose?.(closingDirection);\n    }\n  };\n\n  private onRowLayout = ({ nativeEvent }: LayoutChangeEvent) => {\n    this.setState({ rowWidth: nativeEvent.layout.width });\n  };\n\n  private currentOffset = () => {\n    const { leftWidth = 0, rowWidth = 0, rowState } = this.state;\n    const { rightOffset = rowWidth } = this.state;\n    const rightWidth = rowWidth - rightOffset;\n    if (rowState === 1) {\n      return leftWidth;\n    } else if (rowState === -1) {\n      return -rightWidth;\n    }\n    return 0;\n  };\n\n  close = () => {\n    this.animateRow(this.currentOffset(), 0);\n  };\n\n  openLeft = () => {\n    const { leftWidth = 0 } = this.state;\n    this.animateRow(this.currentOffset(), leftWidth);\n  };\n\n  openRight = () => {\n    const { rowWidth = 0 } = this.state;\n    const { rightOffset = rowWidth } = this.state;\n    const rightWidth = rowWidth - rightOffset;\n    this.animateRow(this.currentOffset(), -rightWidth);\n  };\n\n  render() {\n    const { rowState } = this.state;\n    const { children, renderLeftActions, renderRightActions } = this.props;\n\n    const left = renderLeftActions && (\n      <Animated.View\n        style={[\n          styles.leftActions,\n          // all those and below parameters can have ! since they are all\n          // asigned in constructor in `updateAnimatedEvent` but TS cannot spot\n          // it for some reason\n          { transform: [{ translateX: this.leftActionTranslate! }] },\n        ]}>\n        {renderLeftActions(this.showLeftAction!, this.transX!)}\n        <View\n          onLayout={({ nativeEvent }) =>\n            this.setState({ leftWidth: nativeEvent.layout.x })\n          }\n        />\n      </Animated.View>\n    );\n\n    const right = renderRightActions && (\n      <Animated.View\n        style={[\n          styles.rightActions,\n          { transform: [{ translateX: this.rightActionTranslate! }] },\n        ]}>\n        {renderRightActions(this.showRightAction!, this.transX!, this)}\n        <View\n          onLayout={({ nativeEvent }) =>\n            this.setState({ rightOffset: nativeEvent.layout.x })\n          }\n        />\n      </Animated.View>\n    );\n\n    return (\n      <PanGestureHandler\n        activeOffsetX={[-10, 10]}\n        {...this.props}\n        onGestureEvent={this.onGestureEvent}\n        onHandlerStateChange={this.onHandlerStateChange}>\n        <Animated.View\n          onLayout={this.onRowLayout}\n          style={[styles.container, this.props.containerStyle]}>\n          {left}\n          {right}\n          <TapGestureHandler\n            enabled={rowState !== 0}\n            onHandlerStateChange={this.onTapHandlerStateChange}>\n            <Animated.View\n              pointerEvents={rowState === 0 ? 'auto' : 'box-only'}\n              style={[\n                {\n                  transform: [{ translateX: this.transX! }],\n                },\n                this.props.childrenContainerStyle,\n              ]}>\n              {children}\n            </Animated.View>\n          </TapGestureHandler>\n        </Animated.View>\n      </PanGestureHandler>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    overflow: 'hidden',\n  },\n  leftActions: {\n    ...StyleSheet.absoluteFillObject,\n    flexDirection: I18nManager.isRTL ? 'row-reverse' : 'row',\n  },\n  rightActions: {\n    ...StyleSheet.absoluteFillObject,\n    flexDirection: I18nManager.isRTL ? 'row' : 'row-reverse',\n  },\n});\n"]}