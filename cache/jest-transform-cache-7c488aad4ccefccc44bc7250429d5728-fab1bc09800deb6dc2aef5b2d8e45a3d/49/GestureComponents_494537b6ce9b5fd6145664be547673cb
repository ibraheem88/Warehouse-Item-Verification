9573cccbc9037a9b00c8a1194f96a6b4
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");
var _slicedToArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/slicedToArray"));
var _toConsumableArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/toConsumableArray"));
var _objectWithoutProperties2 = _interopRequireDefault2(require("@babel/runtime/helpers/objectWithoutProperties"));
var _excluded = ["refreshControl", "waitFor"],
  _excluded2 = ["waitFor", "refreshControl"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FlatList = exports.DrawerLayoutAndroid = exports.TextInput = exports.Switch = exports.ScrollView = exports.RefreshControl = void 0;
var React = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _createNativeWrapper = _interopRequireDefault(require("../handlers/createNativeWrapper"));
var _NativeViewGestureHandler = require("../handlers/NativeViewGestureHandler");
var _utils = require("../utils");
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();
  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };
  return cache;
}
function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }
  var cache = _getRequireWildcardCache();
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
var RefreshControl = (0, _createNativeWrapper.default)(_reactNative.RefreshControl, {
  disallowInterruption: true,
  shouldCancelWhenOutside: false
});
exports.RefreshControl = RefreshControl;
var GHScrollView = (0, _createNativeWrapper.default)(_reactNative.ScrollView, {
  disallowInterruption: true,
  shouldCancelWhenOutside: false
});
var ScrollView = React.forwardRef(function (props, ref) {
  var refreshControlGestureRef = React.useRef(null);
  var refreshControl = props.refreshControl,
    waitFor = props.waitFor,
    rest = (0, _objectWithoutProperties2.default)(props, _excluded);
  return React.createElement(GHScrollView, _extends({}, rest, {
    ref: ref,
    waitFor: [].concat((0, _toConsumableArray2.default)((0, _utils.toArray)(waitFor !== null && waitFor !== void 0 ? waitFor : [])), [refreshControlGestureRef]),
    refreshControl: refreshControl ? React.cloneElement(refreshControl, {
      ref: refreshControlGestureRef
    }) : undefined
  }));
});
exports.ScrollView = ScrollView;
var Switch = (0, _createNativeWrapper.default)(_reactNative.Switch, {
  shouldCancelWhenOutside: false,
  shouldActivateOnStart: true,
  disallowInterruption: true
});
exports.Switch = Switch;
var TextInput = (0, _createNativeWrapper.default)(_reactNative.TextInput);
exports.TextInput = TextInput;
var DrawerLayoutAndroid = (0, _createNativeWrapper.default)(_reactNative.DrawerLayoutAndroid, {
  disallowInterruption: true
});
exports.DrawerLayoutAndroid = DrawerLayoutAndroid;
var FlatList = React.forwardRef(function (props, ref) {
  var refreshControlGestureRef = React.useRef(null);
  var waitFor = props.waitFor,
    refreshControl = props.refreshControl,
    rest = (0, _objectWithoutProperties2.default)(props, _excluded2);
  var flatListProps = {};
  var scrollViewProps = {};
  for (var _ref of Object.entries(rest)) {
    var _ref2 = (0, _slicedToArray2.default)(_ref, 2);
    var propName = _ref2[0];
    var value = _ref2[1];
    if (_NativeViewGestureHandler.nativeViewProps.includes(propName)) {
      scrollViewProps[propName] = value;
    } else {
      flatListProps[propName] = value;
    }
  }
  return React.createElement(_reactNative.FlatList, _extends({
    ref: ref
  }, flatListProps, {
    renderScrollComponent: function renderScrollComponent(scrollProps) {
      return React.createElement(ScrollView, _extends({}, scrollProps, scrollViewProps, {
        waitFor: [].concat((0, _toConsumableArray2.default)((0, _utils.toArray)(waitFor !== null && waitFor !== void 0 ? waitFor : [])), [refreshControlGestureRef])
      }));
    },
    refreshControl: refreshControl ? React.cloneElement(refreshControl, {
      ref: refreshControlGestureRef
    }) : undefined
  }));
});
exports.FlatList = FlatList;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,