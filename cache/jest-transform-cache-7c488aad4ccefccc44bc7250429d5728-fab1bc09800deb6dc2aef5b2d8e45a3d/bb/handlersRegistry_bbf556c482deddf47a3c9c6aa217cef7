205b1f772d7b2f6e3e3c8982684699b2
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getNextHandlerTag = getNextHandlerTag;
exports.registerHandler = registerHandler;
exports.registerOldGestureHandler = registerOldGestureHandler;
exports.unregisterHandler = unregisterHandler;
exports.findHandler = findHandler;
exports.findOldGestureHandler = findOldGestureHandler;
exports.findHandlerByTestID = findHandlerByTestID;
exports.handlerIDToTag = void 0;
var _utils = require("../utils");
var handlerIDToTag = {};
exports.handlerIDToTag = handlerIDToTag;
var gestures = new Map();
var oldHandlers = new Map();
var testIDs = new Map();
var handlerTag = 1;
function getNextHandlerTag() {
  return handlerTag++;
}
function registerHandler(handlerTag, handler, testID) {
  gestures.set(handlerTag, handler);
  if ((0, _utils.isJestEnv)() && testID) {
    testIDs.set(testID, handlerTag);
  }
}
function registerOldGestureHandler(handlerTag, handler) {
  oldHandlers.set(handlerTag, handler);
}
function unregisterHandler(handlerTag, testID) {
  gestures.delete(handlerTag);
  if ((0, _utils.isJestEnv)() && testID) {
    testIDs.delete(testID);
  }
}
function findHandler(handlerTag) {
  return gestures.get(handlerTag);
}
function findOldGestureHandler(handlerTag) {
  return oldHandlers.get(handlerTag);
}
function findHandlerByTestID(testID) {
  var handlerTag = testIDs.get(testID);
  if (handlerTag !== undefined) {
    var _findHandler;
    return (_findHandler = findHandler(handlerTag)) !== null && _findHandler !== void 0 ? _findHandler : null;
  }
  return null;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFBO0FBSU8sSUFBTUEsY0FBc0MsR0FBRyxFQUEvQzs7QUFDUCxJQUFNQyxRQUFRLEdBQUcsSUFBSUMsR0FBSixFQUFqQjtBQUNBLElBQU1DLFdBQVcsR0FBRyxJQUFJRCxHQUFKLEVBQXBCO0FBQ0EsSUFBTUUsT0FBTyxHQUFHLElBQUlGLEdBQUosRUFBaEI7QUFFQSxJQUFJRyxVQUFVLEdBQUcsQ0FBakI7QUFFTyxTQUFTQyxpQkFBVCxHQUFxQztFQUMxQyxPQUFPRCxVQUFVLEVBQWpCO0FBQ0Q7QUFFTSxTQUFTRSxlQUFULENBQ0xGLFVBREssRUFFTEcsT0FGSyxFQUdMQyxNQUhLLEVBSUw7RUFDQVIsUUFBUSxDQUFDUyxHQUFULENBQWFMLFVBQWIsRUFBeUJHLE9BQXpCO0VBQ0EsSUFBSSwyQkFBZUMsTUFBbkIsRUFBMkI7SUFDekJMLE9BQU8sQ0FBQ00sR0FBUixDQUFZRCxNQUFaLEVBQW9CSixVQUFwQjtFQUNEO0FBQ0Y7QUFFTSxTQUFTTSx5QkFBVCxDQUNMTixVQURLLEVBRUxHLE9BRkssRUFHTDtFQUNBTCxXQUFXLENBQUNPLEdBQVosQ0FBZ0JMLFVBQWhCLEVBQTRCRyxPQUE1QjtBQUNEO0FBRU0sU0FBU0ksaUJBQVQsQ0FBMkJQLFVBQTNCLEVBQStDSSxNQUEvQyxFQUFnRTtFQUNyRVIsUUFBUSxDQUFDWSxNQUFULENBQWdCUixVQUFoQjtFQUNBLElBQUksMkJBQWVJLE1BQW5CLEVBQTJCO0lBQ3pCTCxPQUFPLENBQUNTLE1BQVIsQ0FBZUosTUFBZjtFQUNEO0FBQ0Y7QUFFTSxTQUFTSyxXQUFULENBQXFCVCxVQUFyQixFQUF5QztFQUM5QyxPQUFPSixRQUFRLENBQUNjLEdBQVQsQ0FBYVYsVUFBYixDQUFQO0FBQ0Q7QUFFTSxTQUFTVyxxQkFBVCxDQUErQlgsVUFBL0IsRUFBbUQ7RUFDeEQsT0FBT0YsV0FBVyxDQUFDWSxHQUFaLENBQWdCVixVQUFoQixDQUFQO0FBQ0Q7QUFFTSxTQUFTWSxtQkFBVCxDQUE2QlIsTUFBN0IsRUFBNkM7RUFDbEQsSUFBTUosVUFBVSxHQUFHRCxPQUFPLENBQUNXLEdBQVIsQ0FBWU4sTUFBWixDQUFuQjtFQUNBLElBQUlKLFVBQVUsS0FBS2EsU0FBbkIsRUFBOEI7SUFBQTtJQUM1Qix1QkFBT0osV0FBVyxDQUFDVCxVQUFELENBQWxCLHVEQUFrQyxJQUFsQztFQUNEO0VBQ0QsT0FBTyxJQUFQO0FBQ0QiLCJuYW1lcyI6WyJoYW5kbGVySURUb1RhZyIsImdlc3R1cmVzIiwiTWFwIiwib2xkSGFuZGxlcnMiLCJ0ZXN0SURzIiwiaGFuZGxlclRhZyIsImdldE5leHRIYW5kbGVyVGFnIiwicmVnaXN0ZXJIYW5kbGVyIiwiaGFuZGxlciIsInRlc3RJRCIsInNldCIsInJlZ2lzdGVyT2xkR2VzdHVyZUhhbmRsZXIiLCJ1bnJlZ2lzdGVySGFuZGxlciIsImRlbGV0ZSIsImZpbmRIYW5kbGVyIiwiZ2V0IiwiZmluZE9sZEdlc3R1cmVIYW5kbGVyIiwiZmluZEhhbmRsZXJCeVRlc3RJRCIsInVuZGVmaW5lZCJdLCJzb3VyY2VzIjpbImhhbmRsZXJzUmVnaXN0cnkudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNKZXN0RW52IH0gZnJvbSAnLi4vdXRpbHMnO1xuaW1wb3J0IHsgR2VzdHVyZVR5cGUgfSBmcm9tICcuL2dlc3R1cmVzL2dlc3R1cmUnO1xuaW1wb3J0IHsgR2VzdHVyZUV2ZW50LCBIYW5kbGVyU3RhdGVDaGFuZ2VFdmVudCB9IGZyb20gJy4vZ2VzdHVyZUhhbmRsZXJDb21tb24nO1xuXG5leHBvcnQgY29uc3QgaGFuZGxlcklEVG9UYWc6IFJlY29yZDxzdHJpbmcsIG51bWJlcj4gPSB7fTtcbmNvbnN0IGdlc3R1cmVzID0gbmV3IE1hcDxudW1iZXIsIEdlc3R1cmVUeXBlPigpO1xuY29uc3Qgb2xkSGFuZGxlcnMgPSBuZXcgTWFwPG51bWJlciwgR2VzdHVyZUhhbmRsZXJDYWxsYmFja3M+KCk7XG5jb25zdCB0ZXN0SURzID0gbmV3IE1hcDxzdHJpbmcsIG51bWJlcj4oKTtcblxubGV0IGhhbmRsZXJUYWcgPSAxO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0TmV4dEhhbmRsZXJUYWcoKTogbnVtYmVyIHtcbiAgcmV0dXJuIGhhbmRsZXJUYWcrKztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVySGFuZGxlcihcbiAgaGFuZGxlclRhZzogbnVtYmVyLFxuICBoYW5kbGVyOiBHZXN0dXJlVHlwZSxcbiAgdGVzdElEPzogc3RyaW5nXG4pIHtcbiAgZ2VzdHVyZXMuc2V0KGhhbmRsZXJUYWcsIGhhbmRsZXIpO1xuICBpZiAoaXNKZXN0RW52KCkgJiYgdGVzdElEKSB7XG4gICAgdGVzdElEcy5zZXQodGVzdElELCBoYW5kbGVyVGFnKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVnaXN0ZXJPbGRHZXN0dXJlSGFuZGxlcihcbiAgaGFuZGxlclRhZzogbnVtYmVyLFxuICBoYW5kbGVyOiBHZXN0dXJlSGFuZGxlckNhbGxiYWNrc1xuKSB7XG4gIG9sZEhhbmRsZXJzLnNldChoYW5kbGVyVGFnLCBoYW5kbGVyKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVucmVnaXN0ZXJIYW5kbGVyKGhhbmRsZXJUYWc6IG51bWJlciwgdGVzdElEPzogc3RyaW5nKSB7XG4gIGdlc3R1cmVzLmRlbGV0ZShoYW5kbGVyVGFnKTtcbiAgaWYgKGlzSmVzdEVudigpICYmIHRlc3RJRCkge1xuICAgIHRlc3RJRHMuZGVsZXRlKHRlc3RJRCk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZpbmRIYW5kbGVyKGhhbmRsZXJUYWc6IG51bWJlcikge1xuICByZXR1cm4gZ2VzdHVyZXMuZ2V0KGhhbmRsZXJUYWcpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZmluZE9sZEdlc3R1cmVIYW5kbGVyKGhhbmRsZXJUYWc6IG51bWJlcikge1xuICByZXR1cm4gb2xkSGFuZGxlcnMuZ2V0KGhhbmRsZXJUYWcpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZmluZEhhbmRsZXJCeVRlc3RJRCh0ZXN0SUQ6IHN0cmluZykge1xuICBjb25zdCBoYW5kbGVyVGFnID0gdGVzdElEcy5nZXQodGVzdElEKTtcbiAgaWYgKGhhbmRsZXJUYWcgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBmaW5kSGFuZGxlcihoYW5kbGVyVGFnKSA/PyBudWxsO1xuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEdlc3R1cmVIYW5kbGVyQ2FsbGJhY2tzIHtcbiAgb25HZXN0dXJlRXZlbnQ6IChldmVudDogR2VzdHVyZUV2ZW50PGFueT4pID0+IHZvaWQ7XG4gIG9uR2VzdHVyZVN0YXRlQ2hhbmdlOiAoZXZlbnQ6IEhhbmRsZXJTdGF0ZUNoYW5nZUV2ZW50PGFueT4pID0+IHZvaWQ7XG59XG4iXX0=