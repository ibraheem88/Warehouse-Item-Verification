{"version":3,"names":["TouchableNativeFeedback","state","pressability","Pressability","_createPressabilityConfig","accessibilityStateDisabled","props","accessibilityState","disabled","cancelable","rejectResponderTermination","hitSlop","delayLongPress","delayPressIn","delayPressOut","minPressDuration","pressRectOffset","pressRetentionOffset","android_disableSound","touchSoundDisabled","onLongPress","onPress","onPressIn","event","Platform","OS","_dispatchHotspotUpdate","_dispatchPressedStateChange","onPressMove","onPressOut","pressed","hostComponentRef","findHostInstance_DEPRECATED","console","warn","Commands","setPressed","nativeEvent","locationX","locationY","hotspotUpdate","element","React","Children","only","children","__DEV__","type","View","push","getEventHandlers","onBlur","onFocus","eventHandlersWithoutBlurAndFocus","_accessibilityState","busy","checked","expanded","selected","accessibilityValue","max","min","now","text","accessibilityLiveRegion","accessibilityLabel","cloneElement","getBackgroundProp","background","undefined","SelectableBackground","useForeground","accessible","accessibilityHint","accessibilityLanguage","accessibilityRole","accessibilityActions","onAccessibilityAction","importantForAccessibility","accessibilityViewIsModal","accessibilityElementsHidden","hasTVPreferredFocus","focusable","nativeID","nextFocusDown","nextFocusForward","nextFocusLeft","nextFocusRight","nextFocusUp","onLayout","testID","prevProps","prevState","configure","reset","Component","rippleRadius","attribute","SelectableBackgroundBorderless","Ripple","color","borderless","processedColor","processColor","invariant","canUseNativeForeground","Version","nativeForegroundAndroid","nativeBackgroundAndroid","displayName","module","exports"],"sources":["TouchableNativeFeedback.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport type {PressEvent} from '../../Types/CoreEventTypes';\nimport typeof TouchableWithoutFeedback from './TouchableWithoutFeedback';\n\nimport View from '../../Components/View/View';\nimport Pressability, {\n  type PressabilityConfig,\n} from '../../Pressability/Pressability';\nimport {PressabilityDebugView} from '../../Pressability/PressabilityDebug';\nimport {findHostInstance_DEPRECATED} from '../../ReactNative/RendererProxy';\nimport processColor from '../../StyleSheet/processColor';\nimport Platform from '../../Utilities/Platform';\nimport {Commands} from '../View/ViewNativeComponent';\nimport invariant from 'invariant';\nimport * as React from 'react';\n\ntype Props = $ReadOnly<{|\n  ...React.ElementConfig<TouchableWithoutFeedback>,\n\n  /**\n   * Determines the type of background drawable that's going to be used to\n   * display feedback. It takes an object with `type` property and extra data\n   * depending on the `type`. It's recommended to use one of the static\n   * methods to generate that dictionary.\n   */\n  background?: ?(\n    | $ReadOnly<{|\n        type: 'ThemeAttrAndroid',\n        attribute:\n          | 'selectableItemBackground'\n          | 'selectableItemBackgroundBorderless',\n        rippleRadius: ?number,\n      |}>\n    | $ReadOnly<{|\n        type: 'RippleAndroid',\n        color: ?number,\n        borderless: boolean,\n        rippleRadius: ?number,\n      |}>\n  ),\n\n  /**\n   * TV preferred focus (see documentation for the View component).\n   */\n  hasTVPreferredFocus?: ?boolean,\n\n  /**\n   * TV next focus down (see documentation for the View component).\n   */\n  nextFocusDown?: ?number,\n\n  /**\n   * TV next focus forward (see documentation for the View component).\n   */\n  nextFocusForward?: ?number,\n\n  /**\n   * TV next focus left (see documentation for the View component).\n   */\n  nextFocusLeft?: ?number,\n\n  /**\n   * TV next focus right (see documentation for the View component).\n   */\n  nextFocusRight?: ?number,\n\n  /**\n   * TV next focus up (see documentation for the View component).\n   */\n  nextFocusUp?: ?number,\n\n  /**\n   * Set to true to add the ripple effect to the foreground of the view, instead\n   * of the background. This is useful if one of your child views has a\n   * background of its own, or you're e.g. displaying images, and you don't want\n   * the ripple to be covered by them.\n   *\n   * Check TouchableNativeFeedback.canUseNativeForeground() first, as this is\n   * only available on Android 6.0 and above. If you try to use this on older\n   * versions, this will fallback to background.\n   */\n  useForeground?: ?boolean,\n|}>;\n\ntype State = $ReadOnly<{|\n  pressability: Pressability,\n|}>;\n\nclass TouchableNativeFeedback extends React.Component<Props, State> {\n  /**\n   * Creates a value for the `background` prop that uses the Android theme's\n   * default background for selectable elements.\n   */\n  static SelectableBackground: (rippleRadius: ?number) => $ReadOnly<{|\n    attribute: 'selectableItemBackground',\n    type: 'ThemeAttrAndroid',\n    rippleRadius: ?number,\n  |}> = (rippleRadius: ?number) => ({\n    type: 'ThemeAttrAndroid',\n    attribute: 'selectableItemBackground',\n    rippleRadius,\n  });\n\n  /**\n   * Creates a value for the `background` prop that uses the Android theme's\n   * default background for borderless selectable elements. Requires API 21+.\n   */\n  static SelectableBackgroundBorderless: (rippleRadius: ?number) => $ReadOnly<{|\n    attribute: 'selectableItemBackgroundBorderless',\n    type: 'ThemeAttrAndroid',\n    rippleRadius: ?number,\n  |}> = (rippleRadius: ?number) => ({\n    type: 'ThemeAttrAndroid',\n    attribute: 'selectableItemBackgroundBorderless',\n    rippleRadius,\n  });\n\n  /**\n   * Creates a value for the `background` prop that uses the Android ripple with\n   * the supplied color. If `borderless` is true, the ripple will render outside\n   * of the view bounds. Requires API 21+.\n   */\n  static Ripple: (\n    color: string,\n    borderless: boolean,\n    rippleRadius: ?number,\n  ) => $ReadOnly<{|\n    borderless: boolean,\n    color: ?number,\n    rippleRadius: ?number,\n    type: 'RippleAndroid',\n  |}> = (color: string, borderless: boolean, rippleRadius: ?number) => {\n    const processedColor = processColor(color);\n    invariant(\n      processedColor == null || typeof processedColor === 'number',\n      'Unexpected color given for Ripple color',\n    );\n    return {\n      type: 'RippleAndroid',\n      color: processedColor,\n      borderless,\n      rippleRadius,\n    };\n  };\n\n  /**\n   * Whether `useForeground` is supported.\n   */\n  static canUseNativeForeground: () => boolean = () =>\n    Platform.OS === 'android' && Platform.Version >= 23;\n\n  state: State = {\n    pressability: new Pressability(this._createPressabilityConfig()),\n  };\n\n  _createPressabilityConfig(): PressabilityConfig {\n    const accessibilityStateDisabled =\n      this.props['aria-disabled'] ?? this.props.accessibilityState?.disabled;\n    return {\n      cancelable: !this.props.rejectResponderTermination,\n      disabled:\n        this.props.disabled != null\n          ? this.props.disabled\n          : accessibilityStateDisabled,\n      hitSlop: this.props.hitSlop,\n      delayLongPress: this.props.delayLongPress,\n      delayPressIn: this.props.delayPressIn,\n      delayPressOut: this.props.delayPressOut,\n      minPressDuration: 0,\n      pressRectOffset: this.props.pressRetentionOffset,\n      android_disableSound: this.props.touchSoundDisabled,\n      onLongPress: this.props.onLongPress,\n      onPress: this.props.onPress,\n      onPressIn: event => {\n        if (Platform.OS === 'android') {\n          this._dispatchHotspotUpdate(event);\n          this._dispatchPressedStateChange(true);\n        }\n        if (this.props.onPressIn != null) {\n          this.props.onPressIn(event);\n        }\n      },\n      onPressMove: event => {\n        if (Platform.OS === 'android') {\n          this._dispatchHotspotUpdate(event);\n        }\n      },\n      onPressOut: event => {\n        if (Platform.OS === 'android') {\n          this._dispatchPressedStateChange(false);\n        }\n        if (this.props.onPressOut != null) {\n          this.props.onPressOut(event);\n        }\n      },\n    };\n  }\n\n  _dispatchPressedStateChange(pressed: boolean): void {\n    if (Platform.OS === 'android') {\n      const hostComponentRef = findHostInstance_DEPRECATED(this);\n      if (hostComponentRef == null) {\n        console.warn(\n          'Touchable: Unable to find HostComponent instance. ' +\n            'Has your Touchable component been unmounted?',\n        );\n      } else {\n        Commands.setPressed(hostComponentRef, pressed);\n      }\n    }\n  }\n\n  _dispatchHotspotUpdate(event: PressEvent): void {\n    if (Platform.OS === 'android') {\n      const {locationX, locationY} = event.nativeEvent;\n      const hostComponentRef = findHostInstance_DEPRECATED(this);\n      if (hostComponentRef == null) {\n        console.warn(\n          'Touchable: Unable to find HostComponent instance. ' +\n            'Has your Touchable component been unmounted?',\n        );\n      } else {\n        Commands.hotspotUpdate(\n          hostComponentRef,\n          locationX ?? 0,\n          locationY ?? 0,\n        );\n      }\n    }\n  }\n\n  render(): React.Node {\n    const element = React.Children.only(this.props.children);\n    const children = [element.props.children];\n    if (__DEV__) {\n      if (element.type === View) {\n        children.push(\n          <PressabilityDebugView color=\"brown\" hitSlop={this.props.hitSlop} />,\n        );\n      }\n    }\n\n    // BACKWARD-COMPATIBILITY: Focus and blur events were never supported before\n    // adopting `Pressability`, so preserve that behavior.\n    const {onBlur, onFocus, ...eventHandlersWithoutBlurAndFocus} =\n      this.state.pressability.getEventHandlers();\n\n    let _accessibilityState = {\n      busy: this.props['aria-busy'] ?? this.props.accessibilityState?.busy,\n      checked:\n        this.props['aria-checked'] ?? this.props.accessibilityState?.checked,\n      disabled:\n        this.props['aria-disabled'] ?? this.props.accessibilityState?.disabled,\n      expanded:\n        this.props['aria-expanded'] ?? this.props.accessibilityState?.expanded,\n      selected:\n        this.props['aria-selected'] ?? this.props.accessibilityState?.selected,\n    };\n\n    _accessibilityState =\n      this.props.disabled != null\n        ? {\n            ..._accessibilityState,\n            disabled: this.props.disabled,\n          }\n        : _accessibilityState;\n\n    const accessibilityValue = {\n      max: this.props['aria-valuemax'] ?? this.props.accessibilityValue?.max,\n      min: this.props['aria-valuemin'] ?? this.props.accessibilityValue?.min,\n      now: this.props['aria-valuenow'] ?? this.props.accessibilityValue?.now,\n      text: this.props['aria-valuetext'] ?? this.props.accessibilityValue?.text,\n    };\n\n    const accessibilityLiveRegion =\n      this.props['aria-live'] === 'off'\n        ? 'none'\n        : this.props['aria-live'] ?? this.props.accessibilityLiveRegion;\n\n    const accessibilityLabel =\n      this.props['aria-label'] ?? this.props.accessibilityLabel;\n    return React.cloneElement(\n      element,\n      {\n        ...eventHandlersWithoutBlurAndFocus,\n        ...getBackgroundProp(\n          this.props.background === undefined\n            ? TouchableNativeFeedback.SelectableBackground()\n            : this.props.background,\n          this.props.useForeground === true,\n        ),\n        accessible: this.props.accessible !== false,\n        accessibilityHint: this.props.accessibilityHint,\n        accessibilityLanguage: this.props.accessibilityLanguage,\n        accessibilityLabel: accessibilityLabel,\n        accessibilityRole: this.props.accessibilityRole,\n        accessibilityState: _accessibilityState,\n        accessibilityActions: this.props.accessibilityActions,\n        onAccessibilityAction: this.props.onAccessibilityAction,\n        accessibilityValue: accessibilityValue,\n        importantForAccessibility:\n          this.props['aria-hidden'] === true\n            ? 'no-hide-descendants'\n            : this.props.importantForAccessibility,\n        accessibilityViewIsModal:\n          this.props['aria-modal'] ?? this.props.accessibilityViewIsModal,\n        accessibilityLiveRegion: accessibilityLiveRegion,\n        accessibilityElementsHidden:\n          this.props['aria-hidden'] ?? this.props.accessibilityElementsHidden,\n        hasTVPreferredFocus: this.props.hasTVPreferredFocus,\n        hitSlop: this.props.hitSlop,\n        focusable:\n          this.props.focusable !== false &&\n          this.props.onPress !== undefined &&\n          !this.props.disabled,\n        nativeID: this.props.nativeID,\n        nextFocusDown: this.props.nextFocusDown,\n        nextFocusForward: this.props.nextFocusForward,\n        nextFocusLeft: this.props.nextFocusLeft,\n        nextFocusRight: this.props.nextFocusRight,\n        nextFocusUp: this.props.nextFocusUp,\n        onLayout: this.props.onLayout,\n        testID: this.props.testID,\n      },\n      ...children,\n    );\n  }\n\n  componentDidUpdate(prevProps: Props, prevState: State) {\n    this.state.pressability.configure(this._createPressabilityConfig());\n  }\n\n  componentWillUnmount(): void {\n    this.state.pressability.reset();\n  }\n}\n\nconst getBackgroundProp =\n  Platform.OS === 'android'\n    ? /* $FlowFixMe[missing-local-annot] The type annotation(s) required by\n       * Flow's LTI update could not be added via codemod */\n      (background, useForeground: boolean) =>\n        useForeground && TouchableNativeFeedback.canUseNativeForeground()\n          ? {nativeForegroundAndroid: background}\n          : {nativeBackgroundAndroid: background}\n    : /* $FlowFixMe[missing-local-annot] The type annotation(s) required by\n       * Flow's LTI update could not be added via codemod */\n      (background, useForeground: boolean) => null;\n\nTouchableNativeFeedback.displayName = 'TouchableNativeFeedback';\n\nmodule.exports = TouchableNativeFeedback;\n"],"mappings":"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"}