{"version":3,"mappings":";;;;;;;;AAAA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAEO,IAAMA,cAAc,GAAG;EAC5BC,GAAG,EAAE,eAAM;IACT,OAAO,IAAIC,sBAAJ,EAAP;EACD,CAH2B;EAK5BC,GAAG,EAAE,eAAM;IACT,OAAO,IAAIC,sBAAJ,EAAP;EACD,CAP2B;EAS5BC,KAAK,EAAE,iBAAM;IACX,OAAO,IAAIC,0BAAJ,EAAP;EACD,CAX2B;EAa5BC,QAAQ,EAAE,oBAAM;IACd,OAAO,IAAIC,gCAAJ,EAAP;EACD,CAf2B;EAiB5BC,KAAK,EAAE,iBAAM;IACX,OAAO,IAAIC,0BAAJ,EAAP;EACD,CAnB2B;EAqB5BC,SAAS,EAAE,qBAAM;IACf,OAAO,IAAIC,kCAAJ,EAAP;EACD,CAvB2B;EAyB5BC,UAAU,EAAE,sBAAM;IAChB,OAAO,IAAIC,oCAAJ,EAAP;EACD,CA3B2B;EA6B5BC,MAAM,EAAE,kBAAM;IACZ,OAAO,IAAIC,4BAAJ,EAAP;EACD,CA/B2B;EAiC5BC,MAAM,EAAE,kBAAM;IACZ,OAAO,IAAIC,4BAAJ,EAAP;EACD,CAnC2B;EAyC5BC,IAAI,EAAE,gBAA4B;IAAA,kCAAxBC,QAAJ;MAAIA,QAAJ;IAAA;IACJ,gCAAWC,mCAAJ,EAAuBD,QAAvB;EACR,CA3C2B;EAgD5BE,YAAY,0BAAyB;IAAA,mCAArBF,QAAJ;MAAIA,QAAJ;IAAA;IACV,gCAAWG,uCAAJ,EAA2BH,QAA3B;EACR,CAlD2B;EA2D5BI,SAAS,uBAAyB;IAAA,mCAArBJ,QAAJ;MAAIA,QAAJ;IAAA;IACP,gCAAWK,oCAAJ,EAAwBL,QAAxB;EACR;AA7D2B,CAAvB","names":["GestureObjects","Tap","TapGesture","Pan","PanGesture","Pinch","PinchGesture","Rotation","RotationGesture","Fling","FlingGesture","LongPress","LongPressGesture","ForceTouch","ForceTouchGesture","Native","NativeGesture","Manual","ManualGesture","Race","gestures","ComposedGesture","Simultaneous","SimultaneousGesture","Exclusive","ExclusiveGesture"],"sources":["gestureObjects.ts"],"sourcesContent":["import { FlingGesture } from './flingGesture';\nimport { ForceTouchGesture } from './forceTouchGesture';\nimport { Gesture } from './gesture';\nimport {\n  ComposedGesture,\n  ExclusiveGesture,\n  SimultaneousGesture,\n} from './gestureComposition';\nimport { LongPressGesture } from './longPressGesture';\nimport { PanGesture } from './panGesture';\nimport { PinchGesture } from './pinchGesture';\nimport { RotationGesture } from './rotationGesture';\nimport { TapGesture } from './tapGesture';\nimport { NativeGesture } from './nativeGesture';\nimport { ManualGesture } from './manualGesture';\n\nexport const GestureObjects = {\n  Tap: () => {\n    return new TapGesture();\n  },\n\n  Pan: () => {\n    return new PanGesture();\n  },\n\n  Pinch: () => {\n    return new PinchGesture();\n  },\n\n  Rotation: () => {\n    return new RotationGesture();\n  },\n\n  Fling: () => {\n    return new FlingGesture();\n  },\n\n  LongPress: () => {\n    return new LongPressGesture();\n  },\n\n  ForceTouch: () => {\n    return new ForceTouchGesture();\n  },\n\n  Native: () => {\n    return new NativeGesture();\n  },\n\n  Manual: () => {\n    return new ManualGesture();\n  },\n\n  /**\n   * Builds a composed gesture consisting of gestures provided as parameters.\n   * The first one that becomes active cancels the rest of gestures.\n   */\n  Race: (...gestures: Gesture[]) => {\n    return new ComposedGesture(...gestures);\n  },\n\n  /**\n   * Builds a composed gesture that allows all base gestures to run simultaneously.\n   */\n  Simultaneous(...gestures: Gesture[]) {\n    return new SimultaneousGesture(...gestures);\n  },\n\n  /**\n   * Builds a composed gesture where only one of the provided gestures can become active.\n   * Priority is decided through the order of gestures: the first one has higher priority\n   * than the second one, second one has higher priority than the third one, and so on.\n   * For example, to make a gesture that recognizes both single and double tap you need\n   * to call Exclusive(doubleTap, singleTap).\n   */\n  Exclusive(...gestures: Gesture[]) {\n    return new ExclusiveGesture(...gestures);\n  },\n};\n"]}